
kernel.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea00017d 	b	865c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e59f0020 	ldr	r0, [pc, #32]	; 809c <main+0x2c>
    8078:	eb00001f 	bl	80fc <CKernel::Initialize()>
    807c:	e3500000 	cmp	r0, #0
    8080:	0a000004 	beq	8098 <main+0x28>
    8084:	e59f0010 	ldr	r0, [pc, #16]	; 809c <main+0x2c>
    8088:	eb00002a 	bl	8138 <CKernel::Run()>
    808c:	e3500002 	cmp	r0, #2
    8090:	1a000000 	bne	8098 <main+0x28>
    8094:	eb000165 	bl	8630 <reboot>
    8098:	eb000161 	bl	8624 <halt>
    809c:	00013d44 	.word	0x00013d44

000080a0 <_GLOBAL__sub_I_Kernel>:
    80a0:	e92d4010 	push	{r4, lr}
    80a4:	e59f4018 	ldr	r4, [pc, #24]	; 80c4 <_GLOBAL__sub_I_Kernel+0x24>
    80a8:	e1a00004 	mov	r0, r4
    80ac:	eb000007 	bl	80d0 <CKernel::CKernel()>
    80b0:	e1a00004 	mov	r0, r4
    80b4:	e8bd4010 	pop	{r4, lr}
    80b8:	e59f2008 	ldr	r2, [pc, #8]	; 80c8 <_GLOBAL__sub_I_Kernel+0x28>
    80bc:	e59f1008 	ldr	r1, [pc, #8]	; 80cc <_GLOBAL__sub_I_Kernel+0x2c>
    80c0:	ea000156 	b	8620 <__aeabi_atexit>
    80c4:	00013d44 	.word	0x00013d44
    80c8:	00013d58 	.word	0x00013d58
    80cc:	000080e8 	.word	0x000080e8

000080d0 <CKernel::CKernel()>:
    80d0:	e92d4010 	push	{r4, lr}
    80d4:	e1a04000 	mov	r4, r0
    80d8:	e3a01001 	mov	r1, #1
    80dc:	eb00010b 	bl	8510 <CMemorySystem::CMemorySystem(bool)>
    80e0:	e1a00004 	mov	r0, r4
    80e4:	e8bd8010 	pop	{r4, pc}

000080e8 <CKernel::~CKernel()>:
    80e8:	e92d4010 	push	{r4, lr}
    80ec:	e1a04000 	mov	r4, r0
    80f0:	eb00007c 	bl	82e8 <CMemorySystem::~CMemorySystem()>
    80f4:	e1a00004 	mov	r0, r4
    80f8:	e8bd8010 	pop	{r4, pc}

000080fc <CKernel::Initialize()>:
    80fc:	e3a0c882 	mov	ip, #8519680	; 0x820000
    8100:	e59f3024 	ldr	r3, [pc, #36]	; 812c <CKernel::Initialize()+0x30>
    8104:	e59f2024 	ldr	r2, [pc, #36]	; 8130 <CKernel::Initialize()+0x34>
    8108:	e5933000 	ldr	r3, [r3]
    810c:	e59f1020 	ldr	r1, [pc, #32]	; 8134 <CKernel::Initialize()+0x38>
    8110:	e5832008 	str	r2, [r3, #8]
    8114:	e3a00001 	mov	r0, #1
    8118:	e5832000 	str	r2, [r3]
    811c:	e5832004 	str	r2, [r3, #4]
    8120:	e583c01c 	str	ip, [r3, #28]
    8124:	e5831028 	str	r1, [r3, #40]	; 0x28
    8128:	e12fff1e 	bx	lr
    812c:	00013cb0 	.word	0x00013cb0
    8130:	49249249 	.word	0x49249249
    8134:	0009ffff 	.word	0x0009ffff

00008138 <CKernel::Run()>:
    8138:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    813c:	e24dd024 	sub	sp, sp, #36	; 0x24
    8140:	e1a0e00d 	mov	lr, sp
    8144:	e3a06882 	mov	r6, #8519680	; 0x820000
    8148:	e59fc178 	ldr	ip, [pc, #376]	; 82c8 <CKernel::Run()+0x190>
    814c:	e59f4178 	ldr	r4, [pc, #376]	; 82cc <CKernel::Run()+0x194>
    8150:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8154:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    8158:	e89c000f 	ldm	ip, {r0, r1, r2, r3}
    815c:	e59fc16c 	ldr	ip, [pc, #364]	; 82d0 <CKernel::Run()+0x198>
    8160:	e59f516c 	ldr	r5, [pc, #364]	; 82d4 <CKernel::Run()+0x19c>
    8164:	e59cc000 	ldr	ip, [ip]
    8168:	e88e000f 	stm	lr, {r0, r1, r2, r3}
    816c:	e58c4008 	str	r4, [ip, #8]
    8170:	e3a02000 	mov	r2, #0
    8174:	e58c4000 	str	r4, [ip]
    8178:	e58c4004 	str	r4, [ip, #4]
    817c:	e58c601c 	str	r6, [ip, #28]
    8180:	e58c5028 	str	r5, [ip, #40]	; 0x28
    8184:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    8188:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    818c:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    8190:	e3a04702 	mov	r4, #524288	; 0x80000
    8194:	e3a01801 	mov	r1, #65536	; 0x10000
    8198:	e3a06802 	mov	r6, #131072	; 0x20000
    819c:	e59f5134 	ldr	r5, [pc, #308]	; 82d8 <CKernel::Run()+0x1a0>
    81a0:	e59fe134 	ldr	lr, [pc, #308]	; 82dc <CKernel::Run()+0x1a4>
    81a4:	e59f0134 	ldr	r0, [pc, #308]	; 82e0 <CKernel::Run()+0x1a8>
    81a8:	e59f7134 	ldr	r7, [pc, #308]	; 82e4 <CKernel::Run()+0x1ac>
    81ac:	e59c3034 	ldr	r3, [ip, #52]	; 0x34
    81b0:	e1e03003 	mvn	r3, r3
    81b4:	e3130b02 	tst	r3, #2048	; 0x800
    81b8:	0afffffb 	beq	81ac <CKernel::Run()+0x74>
    81bc:	e2138c01 	ands	r8, r3, #256	; 0x100
    81c0:	0a00001b 	beq	8234 <CKernel::Run()+0xfc>
    81c4:	e58ce028 	str	lr, [ip, #40]	; 0x28
    81c8:	e58c101c 	str	r1, [ip, #28]
    81cc:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    81d0:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    81d4:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    81d8:	e59c8034 	ldr	r8, [ip, #52]	; 0x34
    81dc:	e28d9020 	add	r9, sp, #32
    81e0:	e1a035a8 	lsr	r3, r8, #11
    81e4:	e203301c 	and	r3, r3, #28
    81e8:	e0893003 	add	r3, r9, r3
    81ec:	e5133020 	ldr	r3, [r3, #-32]	; 0xffffffe0
    81f0:	e0088000 	and	r8, r8, r0
    81f4:	e0853683 	add	r3, r5, r3, lsl #13
    81f8:	e7d33008 	ldrb	r3, [r3, r8]
    81fc:	e383380a 	orr	r3, r3, #655360	; 0xa0000
    8200:	e58c301c 	str	r3, [ip, #28]
    8204:	e58c1028 	str	r1, [ip, #40]	; 0x28
    8208:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    820c:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    8210:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    8214:	e59c3034 	ldr	r3, [ip, #52]	; 0x34
    8218:	e3130b02 	tst	r3, #2048	; 0x800
    821c:	0afffffc 	beq	8214 <CKernel::Run()+0xdc>
    8220:	e58c4028 	str	r4, [ip, #40]	; 0x28
    8224:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    8228:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    822c:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    8230:	eaffffdd 	b	81ac <CKernel::Run()+0x74>
    8234:	e3130901 	tst	r3, #16384	; 0x4000
    8238:	0affffdb 	beq	81ac <CKernel::Run()+0x74>
    823c:	e59c9034 	ldr	r9, [ip, #52]	; 0x34
    8240:	e58ce028 	str	lr, [ip, #40]	; 0x28
    8244:	e209901f 	and	r9, r9, #31
    8248:	e58c101c 	str	r1, [ip, #28]
    824c:	ee078f1a 	mcr	15, 0, r8, cr7, cr10, {0}
    8250:	ee078f1e 	mcr	15, 0, r8, cr7, cr14, {0}
    8254:	ee078f17 	mcr	15, 0, r8, cr7, cr7, {0}
    8258:	e59c8034 	ldr	r8, [ip, #52]	; 0x34
    825c:	e1a036a8 	lsr	r3, r8, #13
    8260:	e2033007 	and	r3, r3, #7
    8264:	e3530002 	cmp	r3, #2
    8268:	e008b000 	and	fp, r8, r0
    826c:	d3a0a000 	movle	sl, #0
    8270:	c3a0a001 	movgt	sl, #1
    8274:	e35b0000 	cmp	fp, #0
    8278:	13a0a000 	movne	sl, #0
    827c:	e35a0000 	cmp	sl, #0
    8280:	1a000001 	bne	828c <CKernel::Run()+0x154>
    8284:	e1180007 	tst	r8, r7
    8288:	1a000002 	bne	8298 <CKernel::Run()+0x160>
    828c:	e28d8020 	add	r8, sp, #32
    8290:	e0883103 	add	r3, r8, r3, lsl #2
    8294:	e5039020 	str	r9, [r3, #-32]	; 0xffffffe0
    8298:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    829c:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    82a0:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    82a4:	e58c601c 	str	r6, [ip, #28]
    82a8:	e58c1028 	str	r1, [ip, #40]	; 0x28
    82ac:	ee072f1a 	mcr	15, 0, r2, cr7, cr10, {0}
    82b0:	ee072f1e 	mcr	15, 0, r2, cr7, cr14, {0}
    82b4:	ee072f17 	mcr	15, 0, r2, cr7, cr7, {0}
    82b8:	e59c3034 	ldr	r3, [ip, #52]	; 0x34
    82bc:	e3130b02 	tst	r3, #2048	; 0x800
    82c0:	0afffffc 	beq	82b8 <CKernel::Run()+0x180>
    82c4:	eaffffd2 	b	8214 <CKernel::Run()+0xdc>
    82c8:	0000f0f0 	.word	0x0000f0f0
    82cc:	49249249 	.word	0x49249249
    82d0:	00013cb0 	.word	0x00013cb0
    82d4:	0009ffff 	.word	0x0009ffff
    82d8:	0000f110 	.word	0x0000f110
    82dc:	000200ff 	.word	0x000200ff
    82e0:	00001fff 	.word	0x00001fff
    82e4:	00000fff 	.word	0x00000fff

000082e8 <CMemorySystem::~CMemorySystem()>:
    82e8:	e59f3090 	ldr	r3, [pc, #144]	; 8380 <CMemorySystem::~CMemorySystem()+0x98>
    82ec:	e92d4070 	push	{r4, r5, r6, lr}
    82f0:	e5932000 	ldr	r2, [r3]
    82f4:	e1a04000 	mov	r4, r0
    82f8:	e1520000 	cmp	r2, r0
    82fc:	0a000001 	beq	8308 <CMemorySystem::~CMemorySystem()+0x20>
    8300:	e1a00004 	mov	r0, r4
    8304:	e8bd8070 	pop	{r4, r5, r6, pc}
    8308:	e3a02000 	mov	r2, #0
    830c:	e5d01000 	ldrb	r1, [r0]
    8310:	e5832000 	str	r2, [r3]
    8314:	e1510002 	cmp	r1, r2
    8318:	0a000004 	beq	8330 <CMemorySystem::~CMemorySystem()+0x48>
    831c:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
    8320:	e59f305c 	ldr	r3, [pc, #92]	; 8384 <CMemorySystem::~CMemorySystem()+0x9c>
    8324:	e0033001 	and	r3, r3, r1
    8328:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    832c:	ee082f17 	mcr	15, 0, r2, cr8, cr7, {0}
    8330:	e594500c 	ldr	r5, [r4, #12]
    8334:	e3550000 	cmp	r5, #0
    8338:	0a000004 	beq	8350 <CMemorySystem::~CMemorySystem()+0x68>
    833c:	e1a00005 	mov	r0, r5
    8340:	eb00019a 	bl	89b0 <CPageTable::~CPageTable()>
    8344:	e1a00005 	mov	r0, r5
    8348:	e3a01008 	mov	r1, #8
    834c:	eb000f69 	bl	c0f8 <operator delete(void*, unsigned int)>
    8350:	e3a03000 	mov	r3, #0
    8354:	e5945008 	ldr	r5, [r4, #8]
    8358:	e584300c 	str	r3, [r4, #12]
    835c:	e1550003 	cmp	r5, r3
    8360:	0affffe6 	beq	8300 <CMemorySystem::~CMemorySystem()+0x18>
    8364:	e1a00005 	mov	r0, r5
    8368:	eb000190 	bl	89b0 <CPageTable::~CPageTable()>
    836c:	e1a00005 	mov	r0, r5
    8370:	e3a01008 	mov	r1, #8
    8374:	eb000f5f 	bl	c0f8 <operator delete(void*, unsigned int)>
    8378:	e1a00004 	mov	r0, r4
    837c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8380:	00013d54 	.word	0x00013d54
    8384:	ff7fe7fa 	.word	0xff7fe7fa

00008388 <CMemorySystem::GetMemSize() const>:
    8388:	e92d4010 	push	{r4, lr}
    838c:	e59f402c 	ldr	r4, [pc, #44]	; 83c0 <CMemorySystem::GetMemSize() const+0x38>
    8390:	e5943000 	ldr	r3, [r4]
    8394:	e3530000 	cmp	r3, #0
    8398:	0a000001 	beq	83a4 <CMemorySystem::GetMemSize() const+0x1c>
    839c:	e5930004 	ldr	r0, [r3, #4]
    83a0:	e8bd8010 	pop	{r4, pc}
    83a4:	e3a0208b 	mov	r2, #139	; 0x8b
    83a8:	e59f1014 	ldr	r1, [pc, #20]	; 83c4 <CMemorySystem::GetMemSize() const+0x3c>
    83ac:	e59f0014 	ldr	r0, [pc, #20]	; 83c8 <CMemorySystem::GetMemSize() const+0x40>
    83b0:	eb00018a 	bl	89e0 <assertion_failed>
    83b4:	e5943000 	ldr	r3, [r4]
    83b8:	e5930004 	ldr	r0, [r3, #4]
    83bc:	e8bd8010 	pop	{r4, pc}
    83c0:	00013d54 	.word	0x00013d54
    83c4:	00013110 	.word	0x00013110
    83c8:	0001311c 	.word	0x0001311c

000083cc <CMemorySystem::Get()>:
    83cc:	e92d4010 	push	{r4, lr}
    83d0:	e59f4020 	ldr	r4, [pc, #32]	; 83f8 <CMemorySystem::Get()+0x2c>
    83d4:	e5940000 	ldr	r0, [r4]
    83d8:	e3500000 	cmp	r0, #0
    83dc:	18bd8010 	popne	{r4, pc}
    83e0:	e3a020d0 	mov	r2, #208	; 0xd0
    83e4:	e59f1010 	ldr	r1, [pc, #16]	; 83fc <CMemorySystem::Get()+0x30>
    83e8:	e59f0010 	ldr	r0, [pc, #16]	; 8400 <CMemorySystem::Get()+0x34>
    83ec:	eb00017b 	bl	89e0 <assertion_failed>
    83f0:	e5940000 	ldr	r0, [r4]
    83f4:	e8bd8010 	pop	{r4, pc}
    83f8:	00013d54 	.word	0x00013d54
    83fc:	00013110 	.word	0x00013110
    8400:	0001311c 	.word	0x0001311c

00008404 <CMemorySystem::EnableMMU()>:
    8404:	e5d03000 	ldrb	r3, [r0]
    8408:	e92d4010 	push	{r4, lr}
    840c:	e3530000 	cmp	r3, #0
    8410:	e1a04000 	mov	r4, r0
    8414:	0a000021 	beq	84a0 <CMemorySystem::EnableMMU()+0x9c>
    8418:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    841c:	e3833040 	orr	r3, r3, #64	; 0x40
    8420:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    8424:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    8428:	e3130001 	tst	r3, #1
    842c:	1a000020 	bne	84b4 <CMemorySystem::EnableMMU()+0xb0>
    8430:	e3a03003 	mov	r3, #3
    8434:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    8438:	e5940008 	ldr	r0, [r4, #8]
    843c:	e3500000 	cmp	r0, #0
    8440:	0a000026 	beq	84e0 <CMemorySystem::EnableMMU()+0xdc>
    8444:	eb000162 	bl	89d4 <CPageTable::GetBaseAddress() const>
    8448:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    844c:	e594000c 	ldr	r0, [r4, #12]
    8450:	e3500000 	cmp	r0, #0
    8454:	0a00001b 	beq	84c8 <CMemorySystem::EnableMMU()+0xc4>
    8458:	eb00015d 	bl	89d4 <CPageTable::GetBaseAddress() const>
    845c:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    8460:	e3a03005 	mov	r3, #5
    8464:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    8468:	e3a03000 	mov	r3, #0
    846c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    8470:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8474:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    8478:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    847c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    8480:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8484:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    8488:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    848c:	e59f2064 	ldr	r2, [pc, #100]	; 84f8 <CMemorySystem::EnableMMU()+0xf4>
    8490:	e3c33002 	bic	r3, r3, #2
    8494:	e1832002 	orr	r2, r3, r2
    8498:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
    849c:	e8bd8010 	pop	{r4, pc}
    84a0:	e3a020d6 	mov	r2, #214	; 0xd6
    84a4:	e59f1050 	ldr	r1, [pc, #80]	; 84fc <CMemorySystem::EnableMMU()+0xf8>
    84a8:	e59f0050 	ldr	r0, [pc, #80]	; 8500 <CMemorySystem::EnableMMU()+0xfc>
    84ac:	eb00014b 	bl	89e0 <assertion_failed>
    84b0:	eaffffd8 	b	8418 <CMemorySystem::EnableMMU()+0x14>
    84b4:	e3a020e3 	mov	r2, #227	; 0xe3
    84b8:	e59f103c 	ldr	r1, [pc, #60]	; 84fc <CMemorySystem::EnableMMU()+0xf8>
    84bc:	e59f0040 	ldr	r0, [pc, #64]	; 8504 <CMemorySystem::EnableMMU()+0x100>
    84c0:	eb000146 	bl	89e0 <assertion_failed>
    84c4:	eaffffd9 	b	8430 <CMemorySystem::EnableMMU()+0x2c>
    84c8:	e59f0038 	ldr	r0, [pc, #56]	; 8508 <CMemorySystem::EnableMMU()+0x104>
    84cc:	e3a020ed 	mov	r2, #237	; 0xed
    84d0:	e59f1024 	ldr	r1, [pc, #36]	; 84fc <CMemorySystem::EnableMMU()+0xf8>
    84d4:	eb000141 	bl	89e0 <assertion_failed>
    84d8:	e594000c 	ldr	r0, [r4, #12]
    84dc:	eaffffdd 	b	8458 <CMemorySystem::EnableMMU()+0x54>
    84e0:	e59f0024 	ldr	r0, [pc, #36]	; 850c <CMemorySystem::EnableMMU()+0x108>
    84e4:	e3a020e9 	mov	r2, #233	; 0xe9
    84e8:	e59f100c 	ldr	r1, [pc, #12]	; 84fc <CMemorySystem::EnableMMU()+0xf8>
    84ec:	eb00013b 	bl	89e0 <assertion_failed>
    84f0:	e5940008 	ldr	r0, [r4, #8]
    84f4:	eaffffd2 	b	8444 <CMemorySystem::EnableMMU()+0x40>
    84f8:	00c01805 	.word	0x00c01805
    84fc:	00013110 	.word	0x00013110
    8500:	0001312c 	.word	0x0001312c
    8504:	0001313c 	.word	0x0001313c
    8508:	00013184 	.word	0x00013184
    850c:	00013168 	.word	0x00013168

00008510 <CMemorySystem::CMemorySystem(bool)>:
    8510:	e3a03000 	mov	r3, #0
    8514:	e92d4030 	push	{r4, r5, lr}
    8518:	e59f20e4 	ldr	r2, [pc, #228]	; 8604 <CMemorySystem::CMemorySystem(bool)+0xf4>
    851c:	e24dd024 	sub	sp, sp, #36	; 0x24
    8520:	e5925000 	ldr	r5, [r2]
    8524:	e1a04000 	mov	r4, r0
    8528:	e1550003 	cmp	r5, r3
    852c:	e5c01000 	strb	r1, [r0]
    8530:	e5803004 	str	r3, [r0, #4]
    8534:	e5803008 	str	r3, [r0, #8]
    8538:	e580300c 	str	r3, [r0, #12]
    853c:	0a000002 	beq	854c <CMemorySystem::CMemorySystem(bool)+0x3c>
    8540:	e1a00004 	mov	r0, r4
    8544:	e28dd024 	add	sp, sp, #36	; 0x24
    8548:	e8bd8030 	pop	{r4, r5, pc}
    854c:	e28d0008 	add	r0, sp, #8
    8550:	e5824000 	str	r4, [r2]
    8554:	eb001163 	bl	cae8 <CBcmPropertyTags::CBcmPropertyTags()>
    8558:	e58d5000 	str	r5, [sp]
    855c:	e28d0008 	add	r0, sp, #8
    8560:	e3a03014 	mov	r3, #20
    8564:	e28d200c 	add	r2, sp, #12
    8568:	e59f1098 	ldr	r1, [pc, #152]	; 8608 <CMemorySystem::CMemorySystem(bool)+0xf8>
    856c:	eb001168 	bl	cb14 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8570:	e3500000 	cmp	r0, #0
    8574:	1a000018 	bne	85dc <CMemorySystem::CMemorySystem(bool)+0xcc>
    8578:	e3a01303 	mov	r1, #201326592	; 0xc000000
    857c:	e1cd01f8 	strd	r0, [sp, #24]
    8580:	e5841004 	str	r1, [r4, #4]
    8584:	eb000edd 	bl	c100 <mem_init>
    8588:	e5d43000 	ldrb	r3, [r4]
    858c:	e3530000 	cmp	r3, #0
    8590:	0a00000c 	beq	85c8 <CMemorySystem::CMemorySystem(bool)+0xb8>
    8594:	e3a00008 	mov	r0, #8
    8598:	eb000ed2 	bl	c0e8 <operator new(unsigned int)>
    859c:	e1a05000 	mov	r5, r0
    85a0:	e5941004 	ldr	r1, [r4, #4]
    85a4:	eb0000b7 	bl	8888 <CPageTable::CPageTable(unsigned int)>
    85a8:	e5845008 	str	r5, [r4, #8]
    85ac:	e3a00008 	mov	r0, #8
    85b0:	eb000ecc 	bl	c0e8 <operator new(unsigned int)>
    85b4:	e1a05000 	mov	r5, r0
    85b8:	eb000087 	bl	87dc <CPageTable::CPageTable()>
    85bc:	e584500c 	str	r5, [r4, #12]
    85c0:	e1a00004 	mov	r0, r4
    85c4:	ebffff8e 	bl	8404 <CMemorySystem::EnableMMU()>
    85c8:	e28d0008 	add	r0, sp, #8
    85cc:	eb00114b 	bl	cb00 <CBcmPropertyTags::~CBcmPropertyTags()>
    85d0:	e1a00004 	mov	r0, r4
    85d4:	e28dd024 	add	sp, sp, #36	; 0x24
    85d8:	e8bd8030 	pop	{r4, r5, pc}
    85dc:	e59d0018 	ldr	r0, [sp, #24]
    85e0:	e3500000 	cmp	r0, #0
    85e4:	059d101c 	ldreq	r1, [sp, #28]
    85e8:	0affffe4 	beq	8580 <CMemorySystem::CMemorySystem(bool)+0x70>
    85ec:	e59f1018 	ldr	r1, [pc, #24]	; 860c <CMemorySystem::CMemorySystem(bool)+0xfc>
    85f0:	e59f0018 	ldr	r0, [pc, #24]	; 8610 <CMemorySystem::CMemorySystem(bool)+0x100>
    85f4:	e3a0204a 	mov	r2, #74	; 0x4a
    85f8:	eb0000f8 	bl	89e0 <assertion_failed>
    85fc:	e1cd01d8 	ldrd	r0, [sp, #24]
    8600:	eaffffde 	b	8580 <CMemorySystem::CMemorySystem(bool)+0x70>
    8604:	00013d54 	.word	0x00013d54
    8608:	00010005 	.word	0x00010005
    860c:	00013110 	.word	0x00013110
    8610:	00013198 	.word	0x00013198

00008614 <CMemorySystem::GetCoherentPage(unsigned int)>:
    8614:	e1a00600 	lsl	r0, r0, #12
    8618:	e2800501 	add	r0, r0, #4194304	; 0x400000
    861c:	e12fff1e 	bx	lr

00008620 <__aeabi_atexit>:
    8620:	e12fff1e 	bx	lr

00008624 <halt>:
    8624:	f10c0080 	cpsid	i
    8628:	f10c0040 	cpsid	f
    862c:	eafffffe 	b	862c <halt+0x8>

00008630 <reboot>:
    8630:	e3a03000 	mov	r3, #0
    8634:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8638:	e59f3010 	ldr	r3, [pc, #16]	; 8650 <reboot+0x20>
    863c:	e59f1010 	ldr	r1, [pc, #16]	; 8654 <reboot+0x24>
    8640:	e59f2010 	ldr	r2, [pc, #16]	; 8658 <reboot+0x28>
    8644:	e5831024 	str	r1, [r3, #36]	; 0x24
    8648:	e583201c 	str	r2, [r3, #28]
    864c:	eafffffe 	b	864c <reboot+0x1c>
    8650:	20100000 	.word	0x20100000
    8654:	5a000001 	.word	0x5a000001
    8658:	5a000020 	.word	0x5a000020

0000865c <sysinit>:
    865c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8660:	e24dd01c 	sub	sp, sp, #28
    8664:	f1080040 	cpsie	f
    8668:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    866c:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8670:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8674:	e3a0e000 	mov	lr, #0
    8678:	ee07ef95 	mcr	15, 0, lr, cr7, cr5, {4}
    867c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    8680:	eee83a10 	vmsr	fpexc, r3
    8684:	e3a03402 	mov	r3, #33554432	; 0x2000000
    8688:	eee13a10 	vmsr	fpscr, r3
    868c:	e59f3138 	ldr	r3, [pc, #312]	; 87cc <sysinit+0x170>
    8690:	e59fc138 	ldr	ip, [pc, #312]	; 87d0 <sysinit+0x174>
    8694:	e153000c 	cmp	r3, ip
    8698:	2a000037 	bcs	877c <sysinit+0x120>
    869c:	e2630000 	rsb	r0, r3, #0
    86a0:	e2000003 	and	r0, r0, #3
    86a4:	e2801003 	add	r1, r0, #3
    86a8:	e3510005 	cmp	r1, #5
    86ac:	33a01005 	movcc	r1, #5
    86b0:	e2832001 	add	r2, r3, #1
    86b4:	e04c4002 	sub	r4, ip, r2
    86b8:	e1510004 	cmp	r1, r4
    86bc:	e04c4003 	sub	r4, ip, r3
    86c0:	8a000018 	bhi	8728 <sysinit+0xcc>
    86c4:	e150000e 	cmp	r0, lr
    86c8:	01a01003 	moveq	r1, r3
    86cc:	0a000008 	beq	86f4 <sysinit+0x98>
    86d0:	e3500001 	cmp	r0, #1
    86d4:	e5c3e000 	strb	lr, [r3]
    86d8:	01a01002 	moveq	r1, r2
    86dc:	0a000004 	beq	86f4 <sysinit+0x98>
    86e0:	e3500002 	cmp	r0, #2
    86e4:	e5c3e001 	strb	lr, [r3, #1]
    86e8:	02831002 	addeq	r1, r3, #2
    86ec:	15c3e002 	strbne	lr, [r3, #2]
    86f0:	12831003 	addne	r1, r3, #3
    86f4:	e3a02000 	mov	r2, #0
    86f8:	e1a0e002 	mov	lr, r2
    86fc:	e0444000 	sub	r4, r4, r0
    8700:	e0833000 	add	r3, r3, r0
    8704:	e1a00124 	lsr	r0, r4, #2
    8708:	e2822001 	add	r2, r2, #1
    870c:	e1500002 	cmp	r0, r2
    8710:	e483e004 	str	lr, [r3], #4
    8714:	8afffffb 	bhi	8708 <sysinit+0xac>
    8718:	e3c43003 	bic	r3, r4, #3
    871c:	e1540003 	cmp	r4, r3
    8720:	e0813003 	add	r3, r1, r3
    8724:	0a000014 	beq	877c <sysinit+0x120>
    8728:	e1a01003 	mov	r1, r3
    872c:	e3a02000 	mov	r2, #0
    8730:	e4c12001 	strb	r2, [r1], #1
    8734:	e151000c 	cmp	r1, ip
    8738:	2a00000f 	bcs	877c <sysinit+0x120>
    873c:	e2831002 	add	r1, r3, #2
    8740:	e151000c 	cmp	r1, ip
    8744:	e5c32001 	strb	r2, [r3, #1]
    8748:	2a00000b 	bcs	877c <sysinit+0x120>
    874c:	e2831003 	add	r1, r3, #3
    8750:	e151000c 	cmp	r1, ip
    8754:	e5c32002 	strb	r2, [r3, #2]
    8758:	2a000007 	bcs	877c <sysinit+0x120>
    875c:	e2831004 	add	r1, r3, #4
    8760:	e151000c 	cmp	r1, ip
    8764:	e5c32003 	strb	r2, [r3, #3]
    8768:	2a000003 	bcs	877c <sysinit+0x120>
    876c:	e2831005 	add	r1, r3, #5
    8770:	e151000c 	cmp	r1, ip
    8774:	e5c32004 	strb	r2, [r3, #4]
    8778:	35c32005 	strbcc	r2, [r3, #5]
    877c:	e1a0000d 	mov	r0, sp
    8780:	eb000d0d 	bl	bbbc <CMachineInfo::CMachineInfo()>
    8784:	e59f4048 	ldr	r4, [pc, #72]	; 87d4 <sysinit+0x178>
    8788:	e59f3048 	ldr	r3, [pc, #72]	; 87d8 <sysinit+0x17c>
    878c:	e1540003 	cmp	r4, r3
    8790:	2a000008 	bcs	87b8 <sysinit+0x15c>
    8794:	e1e05004 	mvn	r5, r4
    8798:	e0855003 	add	r5, r5, r3
    879c:	e3c55003 	bic	r5, r5, #3
    87a0:	e0855004 	add	r5, r5, r4
    87a4:	e2444004 	sub	r4, r4, #4
    87a8:	e5b43004 	ldr	r3, [r4, #4]!
    87ac:	e12fff33 	blx	r3
    87b0:	e1540005 	cmp	r4, r5
    87b4:	1afffffb 	bne	87a8 <sysinit+0x14c>
    87b8:	ebfffe2c 	bl	8070 <main>
    87bc:	e3500001 	cmp	r0, #1
    87c0:	0a000000 	beq	87c8 <sysinit+0x16c>
    87c4:	ebffff96 	bl	8624 <halt>
    87c8:	ebffff98 	bl	8630 <reboot>
    87cc:	00013d44 	.word	0x00013d44
    87d0:	00013de4 	.word	0x00013de4
    87d4:	00013ca4 	.word	0x00013ca4
    87d8:	00013cb0 	.word	0x00013cb0

000087dc <CPageTable::CPageTable()>:
    87dc:	e3a01000 	mov	r1, #0
    87e0:	e3a02709 	mov	r2, #2359296	; 0x240000
    87e4:	e1a0c001 	mov	ip, r1
    87e8:	e1a03002 	mov	r3, r2
    87ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    87f0:	e59f6084 	ldr	r6, [pc, #132]	; 887c <CPageTable::CPageTable()+0xa0>
    87f4:	e59f5084 	ldr	r5, [pc, #132]	; 8880 <CPageTable::CPageTable()+0xa4>
    87f8:	e59f4084 	ldr	r4, [pc, #132]	; 8884 <CPageTable::CPageTable()+0xa8>
    87fc:	e5c01000 	strb	r1, [r0]
    8800:	e5802004 	str	r2, [r0, #4]
    8804:	e3a0e004 	mov	lr, #4
    8808:	e5d32002 	ldrb	r2, [r3, #2]
    880c:	e5d31000 	ldrb	r1, [r3]
    8810:	e3822001 	orr	r2, r2, #1
    8814:	e20220f1 	and	r2, r2, #241	; 0xf1
    8818:	e20110e0 	and	r1, r1, #224	; 0xe0
    881c:	e5c32002 	strb	r2, [r3, #2]
    8820:	e3811006 	orr	r1, r1, #6
    8824:	e5c31000 	strb	r1, [r3]
    8828:	e1d320b2 	ldrh	r2, [r3, #2]
    882c:	e1d370b0 	ldrh	r7, [r3]
    8830:	e1c21005 	bic	r1, r2, r5
    8834:	e00c2006 	and	r2, ip, r6
    8838:	e1812e12 	orr	r2, r1, r2, lsl lr
    883c:	e3c71e1e 	bic	r1, r7, #480	; 0x1e0
    8840:	e15c0004 	cmp	ip, r4
    8844:	e1c310b0 	strh	r1, [r3]
    8848:	e1c320b2 	strh	r2, [r3, #2]
    884c:	85d32000 	ldrbhi	r2, [r3]
    8850:	e28cc001 	add	ip, ip, #1
    8854:	83822010 	orrhi	r2, r2, #16
    8858:	85c32000 	strbhi	r2, [r3]
    885c:	e35c0a01 	cmp	ip, #4096	; 0x1000
    8860:	e5c3e001 	strb	lr, [r3, #1]
    8864:	e2833004 	add	r3, r3, #4
    8868:	1affffe5 	bne	8804 <CPageTable::CPageTable()+0x28>
    886c:	e3a03000 	mov	r3, #0
    8870:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8874:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8878:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    887c:	00000fff 	.word	0x00000fff
    8880:	0000fff0 	.word	0x0000fff0
    8884:	000001ff 	.word	0x000001ff

00008888 <CPageTable::CPageTable(unsigned int)>:
    8888:	e3a03001 	mov	r3, #1
    888c:	e92d4070 	push	{r4, r5, r6, lr}
    8890:	e5c03000 	strb	r3, [r0]
    8894:	e1a05000 	mov	r5, r0
    8898:	e1a04001 	mov	r4, r1
    889c:	eb001039 	bl	c988 <palloc>
    88a0:	e3500000 	cmp	r0, #0
    88a4:	e5850004 	str	r0, [r5, #4]
    88a8:	0a000036 	beq	8988 <CPageTable::CPageTable(unsigned int)+0x100>
    88ac:	e1a03a00 	lsl	r3, r0, #20
    88b0:	e1a03a23 	lsr	r3, r3, #20
    88b4:	e3530000 	cmp	r3, #0
    88b8:	1a00002c 	bne	8970 <CPageTable::CPageTable(unsigned int)+0xe8>
    88bc:	e3a03000 	mov	r3, #0
    88c0:	e59f60d8 	ldr	r6, [pc, #216]	; 89a0 <CPageTable::CPageTable(unsigned int)+0x118>
    88c4:	ea000009 	b	88f0 <CPageTable::CPageTable(unsigned int)+0x68>
    88c8:	e6ef1072 	uxtb	r1, r2
    88cc:	e5d02002 	ldrb	r2, [r0, #2]
    88d0:	e3c11008 	bic	r1, r1, #8
    88d4:	e3822001 	orr	r2, r2, #1
    88d8:	e5c01000 	strb	r1, [r0]
    88dc:	e5c02002 	strb	r2, [r0, #2]
    88e0:	e2833601 	add	r3, r3, #1048576	; 0x100000
    88e4:	e3530202 	cmp	r3, #536870912	; 0x20000000
    88e8:	e2800004 	add	r0, r0, #4
    88ec:	0a00001a 	beq	895c <CPageTable::CPageTable(unsigned int)+0xd4>
    88f0:	e3a0e00e 	mov	lr, #14
    88f4:	e3a0c004 	mov	ip, #4
    88f8:	e1a02823 	lsr	r2, r3, #16
    88fc:	e20220f0 	and	r2, r2, #240	; 0xf0
    8900:	e1a01c23 	lsr	r1, r3, #24
    8904:	e1530006 	cmp	r3, r6
    8908:	e5c02002 	strb	r2, [r0, #2]
    890c:	e5c0e000 	strb	lr, [r0]
    8910:	e5c0c001 	strb	ip, [r0, #1]
    8914:	e5c01003 	strb	r1, [r0, #3]
    8918:	3afffff0 	bcc	88e0 <CPageTable::CPageTable(unsigned int)+0x58>
    891c:	e6ef207e 	uxtb	r2, lr
    8920:	e3822010 	orr	r2, r2, #16
    8924:	e1540003 	cmp	r4, r3
    8928:	e5c02000 	strb	r2, [r0]
    892c:	9affffe5 	bls	88c8 <CPageTable::CPageTable(unsigned int)+0x40>
    8930:	e3530501 	cmp	r3, #4194304	; 0x400000
    8934:	1affffe9 	bne	88e0 <CPageTable::CPageTable(unsigned int)+0x58>
    8938:	e5d02000 	ldrb	r2, [r0]
    893c:	e5d03002 	ldrb	r3, [r0, #2]
    8940:	e20220f3 	and	r2, r2, #243	; 0xf3
    8944:	e3833001 	orr	r3, r3, #1
    8948:	e5c03002 	strb	r3, [r0, #2]
    894c:	e5c02000 	strb	r2, [r0]
    8950:	e3a03605 	mov	r3, #5242880	; 0x500000
    8954:	e2800004 	add	r0, r0, #4
    8958:	eaffffe4 	b	88f0 <CPageTable::CPageTable(unsigned int)+0x68>
    895c:	e3a03000 	mov	r3, #0
    8960:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8964:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8968:	e1a00005 	mov	r0, r5
    896c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8970:	e59f002c 	ldr	r0, [pc, #44]	; 89a4 <CPageTable::CPageTable(unsigned int)+0x11c>
    8974:	e3a02051 	mov	r2, #81	; 0x51
    8978:	e59f1028 	ldr	r1, [pc, #40]	; 89a8 <CPageTable::CPageTable(unsigned int)+0x120>
    897c:	eb000017 	bl	89e0 <assertion_failed>
    8980:	e5950004 	ldr	r0, [r5, #4]
    8984:	eaffffcc 	b	88bc <CPageTable::CPageTable(unsigned int)+0x34>
    8988:	e59f001c 	ldr	r0, [pc, #28]	; 89ac <CPageTable::CPageTable(unsigned int)+0x124>
    898c:	e3a02050 	mov	r2, #80	; 0x50
    8990:	e59f1010 	ldr	r1, [pc, #16]	; 89a8 <CPageTable::CPageTable(unsigned int)+0x120>
    8994:	eb000011 	bl	89e0 <assertion_failed>
    8998:	e5950004 	ldr	r0, [r5, #4]
    899c:	eaffffc2 	b	88ac <CPageTable::CPageTable(unsigned int)+0x24>
    89a0:	0000f0f0 	.word	0x0000f0f0
    89a4:	000131d4 	.word	0x000131d4
    89a8:	000131b4 	.word	0x000131b4
    89ac:	000131c4 	.word	0x000131c4

000089b0 <CPageTable::~CPageTable()>:
    89b0:	e5d03000 	ldrb	r3, [r0]
    89b4:	e92d4010 	push	{r4, lr}
    89b8:	e3530000 	cmp	r3, #0
    89bc:	e1a04000 	mov	r4, r0
    89c0:	0a000001 	beq	89cc <CPageTable::~CPageTable()+0x1c>
    89c4:	e5900004 	ldr	r0, [r0, #4]
    89c8:	eb001028 	bl	ca70 <pfree>
    89cc:	e1a00004 	mov	r0, r4
    89d0:	e8bd8010 	pop	{r4, pc}

000089d4 <CPageTable::GetBaseAddress() const>:
    89d4:	e5900004 	ldr	r0, [r0, #4]
    89d8:	e3800001 	orr	r0, r0, #1
    89dc:	e12fff1e 	bx	lr

000089e0 <assertion_failed>:
    89e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    89e4:	e1a05000 	mov	r5, r0
    89e8:	e24dd01c 	sub	sp, sp, #28
    89ec:	e1a06001 	mov	r6, r1
    89f0:	e1a07002 	mov	r7, r2
    89f4:	e1a0400d 	mov	r4, sp
    89f8:	eb000bcd 	bl	b934 <CInterruptSystem::DisableFIQ()>
    89fc:	f1080040 	cpsie	f
    8a00:	e28d0008 	add	r0, sp, #8
    8a04:	eb0002d4 	bl	955c <CString::CString()>
    8a08:	e1a03007 	mov	r3, r7
    8a0c:	e1a02006 	mov	r2, r6
    8a10:	e28d0008 	add	r0, sp, #8
    8a14:	e59f104c 	ldr	r1, [pc, #76]	; 8a68 <assertion_failed+0x88>
    8a18:	eb000a8b 	bl	b44c <CString::Format(char const*, ...)>
    8a1c:	e28d0008 	add	r0, sp, #8
    8a20:	eb0002e3 	bl	95b4 <CString::operator char const*() const>
    8a24:	e1a01000 	mov	r1, r0
    8a28:	e1a00004 	mov	r0, r4
    8a2c:	eb000050 	bl	8b74 <debug_stacktrace(unsigned int const*, char const*)>
    8a30:	eb000100 	bl	8e38 <CLogger::Get()>
    8a34:	e1a04000 	mov	r4, r0
    8a38:	e28d0008 	add	r0, sp, #8
    8a3c:	eb0002dc 	bl	95b4 <CString::operator char const*() const>
    8a40:	e59f3024 	ldr	r3, [pc, #36]	; 8a6c <assertion_failed+0x8c>
    8a44:	e1a01000 	mov	r1, r0
    8a48:	e3a02000 	mov	r2, #0
    8a4c:	e1a00004 	mov	r0, r4
    8a50:	e58d5000 	str	r5, [sp]
    8a54:	eb000289 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8a58:	e28d0008 	add	r0, sp, #8
    8a5c:	eb0002a5 	bl	94f8 <CString::~CString()>
    8a60:	e28dd01c 	add	sp, sp, #28
    8a64:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8a68:	000131f4 	.word	0x000131f4
    8a6c:	000131fc 	.word	0x000131fc

00008a70 <debug_hexdump(void const*, unsigned int, char const*)>:
    8a70:	e3520000 	cmp	r2, #0
    8a74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8a78:	e1a05001 	mov	r5, r1
    8a7c:	e59f80e4 	ldr	r8, [pc, #228]	; 8b68 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
    8a80:	e1a04000 	mov	r4, r0
    8a84:	11a08002 	movne	r8, r2
    8a88:	e24dd048 	sub	sp, sp, #72	; 0x48
    8a8c:	eb0000e9 	bl	8e38 <CLogger::Get()>
    8a90:	e58d4004 	str	r4, [sp, #4]
    8a94:	e58d5000 	str	r5, [sp]
    8a98:	e1a01008 	mov	r1, r8
    8a9c:	e59f30c8 	ldr	r3, [pc, #200]	; 8b6c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    8aa0:	e3a02004 	mov	r2, #4
    8aa4:	eb000275 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8aa8:	e3550000 	cmp	r5, #0
    8aac:	0a00002b 	beq	8b60 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    8ab0:	e59f90b8 	ldr	r9, [pc, #184]	; 8b70 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    8ab4:	ea000001 	b	8ac0 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    8ab8:	e2555010 	subs	r5, r5, #16
    8abc:	0a000027 	beq	8b60 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
    8ac0:	eb0000dc 	bl	8e38 <CLogger::Get()>
    8ac4:	e5d4c00f 	ldrb	ip, [r4, #15]
    8ac8:	e5d4300e 	ldrb	r3, [r4, #14]
    8acc:	e5d4200d 	ldrb	r2, [r4, #13]
    8ad0:	e5d4100c 	ldrb	r1, [r4, #12]
    8ad4:	e5d4a00b 	ldrb	sl, [r4, #11]
    8ad8:	e5d4700a 	ldrb	r7, [r4, #10]
    8adc:	e5d46009 	ldrb	r6, [r4, #9]
    8ae0:	e5d4e008 	ldrb	lr, [r4, #8]
    8ae4:	e58dc040 	str	ip, [sp, #64]	; 0x40
    8ae8:	e5d4c007 	ldrb	ip, [r4, #7]
    8aec:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    8af0:	e5d43006 	ldrb	r3, [r4, #6]
    8af4:	e58d2038 	str	r2, [sp, #56]	; 0x38
    8af8:	e5d42005 	ldrb	r2, [r4, #5]
    8afc:	e58d1034 	str	r1, [sp, #52]	; 0x34
    8b00:	e5d41004 	ldrb	r1, [r4, #4]
    8b04:	e58da030 	str	sl, [sp, #48]	; 0x30
    8b08:	e5d4a003 	ldrb	sl, [r4, #3]
    8b0c:	e58d702c 	str	r7, [sp, #44]	; 0x2c
    8b10:	e5d47002 	ldrb	r7, [r4, #2]
    8b14:	e58d6028 	str	r6, [sp, #40]	; 0x28
    8b18:	e5d46001 	ldrb	r6, [r4, #1]
    8b1c:	e58de024 	str	lr, [sp, #36]	; 0x24
    8b20:	e5d4e000 	ldrb	lr, [r4]
    8b24:	e58dc020 	str	ip, [sp, #32]
    8b28:	e58d301c 	str	r3, [sp, #28]
    8b2c:	e6ffc074 	uxth	ip, r4
    8b30:	e58d2018 	str	r2, [sp, #24]
    8b34:	e58d1014 	str	r1, [sp, #20]
    8b38:	e1a03009 	mov	r3, r9
    8b3c:	e3a02004 	mov	r2, #4
    8b40:	e1a01008 	mov	r1, r8
    8b44:	e58da010 	str	sl, [sp, #16]
    8b48:	e1cd60f8 	strd	r6, [sp, #8]
    8b4c:	e88d5000 	stm	sp, {ip, lr}
    8b50:	eb00024a 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8b54:	e355000f 	cmp	r5, #15
    8b58:	e2844010 	add	r4, r4, #16
    8b5c:	8affffd5 	bhi	8ab8 <debug_hexdump(void const*, unsigned int, char const*)+0x48>
    8b60:	e28dd048 	add	sp, sp, #72	; 0x48
    8b64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8b68:	00013214 	.word	0x00013214
    8b6c:	0001321c 	.word	0x0001321c
    8b70:	00013240 	.word	0x00013240

00008b74 <debug_stacktrace(unsigned int const*, char const*)>:
    8b74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8b78:	e3a04000 	mov	r4, #0
    8b7c:	e1510004 	cmp	r1, r4
    8b80:	e59f806c 	ldr	r8, [pc, #108]	; 8bf4 <debug_stacktrace(unsigned int const*, char const*)+0x80>
    8b84:	e24dd00c 	sub	sp, sp, #12
    8b88:	11a08001 	movne	r8, r1
    8b8c:	e59f6064 	ldr	r6, [pc, #100]	; 8bf8 <debug_stacktrace(unsigned int const*, char const*)+0x84>
    8b90:	e59f7064 	ldr	r7, [pc, #100]	; 8bfc <debug_stacktrace(unsigned int const*, char const*)+0x88>
    8b94:	e59f9064 	ldr	r9, [pc, #100]	; 8c00 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    8b98:	e2405004 	sub	r5, r0, #4
    8b9c:	ea000002 	b	8bac <debug_stacktrace(unsigned int const*, char const*)+0x38>
    8ba0:	e2844001 	add	r4, r4, #1
    8ba4:	e3540040 	cmp	r4, #64	; 0x40
    8ba8:	0a00000f 	beq	8bec <debug_stacktrace(unsigned int const*, char const*)+0x78>
    8bac:	e5b53004 	ldr	r3, [r5, #4]!
    8bb0:	e1530006 	cmp	r3, r6
    8bb4:	9afffff9 	bls	8ba0 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    8bb8:	e1530007 	cmp	r3, r7
    8bbc:	2afffff7 	bcs	8ba0 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    8bc0:	eb00009c 	bl	8e38 <CLogger::Get()>
    8bc4:	e5952000 	ldr	r2, [r5]
    8bc8:	e1a03009 	mov	r3, r9
    8bcc:	e58d2004 	str	r2, [sp, #4]
    8bd0:	e58d4000 	str	r4, [sp]
    8bd4:	e3a02004 	mov	r2, #4
    8bd8:	e1a01008 	mov	r1, r8
    8bdc:	e2844001 	add	r4, r4, #1
    8be0:	eb000226 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8be4:	e3540040 	cmp	r4, #64	; 0x40
    8be8:	1affffef 	bne	8bac <debug_stacktrace(unsigned int const*, char const*)+0x38>
    8bec:	e28dd00c 	add	sp, sp, #12
    8bf0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8bf4:	00013214 	.word	0x00013214
    8bf8:	00007fff 	.word	0x00007fff
    8bfc:	0000f0f0 	.word	0x0000f0f0
    8c00:	00013298 	.word	0x00013298

00008c04 <CLogger::CLogger(unsigned int, CTimer*)>:
    8c04:	e92d4010 	push	{r4, lr}
    8c08:	e3a03000 	mov	r3, #0
    8c0c:	e1a04000 	mov	r4, r0
    8c10:	e3a00001 	mov	r0, #1
    8c14:	e884000e 	stm	r4, {r1, r2, r3}
    8c18:	e584300c 	str	r3, [r4, #12]
    8c1c:	e5843010 	str	r3, [r4, #16]
    8c20:	e5843014 	str	r3, [r4, #20]
    8c24:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    8c28:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    8c2c:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    8c30:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    8c34:	e5840018 	str	r0, [r4, #24]
    8c38:	e58400ec 	str	r0, [r4, #236]	; 0xec
    8c3c:	e3a00901 	mov	r0, #16384	; 0x4000
    8c40:	eb000d29 	bl	c0ec <operator new[](unsigned int)>
    8c44:	e59f300c 	ldr	r3, [pc, #12]	; 8c58 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    8c48:	e584000c 	str	r0, [r4, #12]
    8c4c:	e5834000 	str	r4, [r3]
    8c50:	e1a00004 	mov	r0, r4
    8c54:	e8bd8010 	pop	{r4, pc}
    8c58:	00013d5c 	.word	0x00013d5c

00008c5c <CLogger::~CLogger()>:
    8c5c:	e3a02000 	mov	r2, #0
    8c60:	e59f1060 	ldr	r1, [pc, #96]	; 8cc8 <CLogger::~CLogger()+0x6c>
    8c64:	e92d4070 	push	{r4, r5, r6, lr}
    8c68:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    8c6c:	e1a04000 	mov	r4, r0
    8c70:	e1a05002 	mov	r5, r2
    8c74:	e5812000 	str	r2, [r1]
    8c78:	ea000008 	b	8ca0 <CLogger::~CLogger()+0x44>
    8c7c:	e591001c 	ldr	r0, [r1, #28]
    8c80:	e3a01f42 	mov	r1, #264	; 0x108
    8c84:	eb000d1b 	bl	c0f8 <operator delete(void*, unsigned int)>
    8c88:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    8c8c:	e2833001 	add	r3, r3, #1
    8c90:	e3530032 	cmp	r3, #50	; 0x32
    8c94:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    8c98:	03a03000 	moveq	r3, #0
    8c9c:	058450e8 	streq	r5, [r4, #232]	; 0xe8
    8ca0:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    8ca4:	e0841103 	add	r1, r4, r3, lsl #2
    8ca8:	e1520003 	cmp	r2, r3
    8cac:	1afffff2 	bne	8c7c <CLogger::~CLogger()+0x20>
    8cb0:	e594000c 	ldr	r0, [r4, #12]
    8cb4:	e3500000 	cmp	r0, #0
    8cb8:	0a000000 	beq	8cc0 <CLogger::~CLogger()+0x64>
    8cbc:	eb000d0c 	bl	c0f4 <operator delete[](void*)>
    8cc0:	e1a00004 	mov	r0, r4
    8cc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cc8:	00013d5c 	.word	0x00013d5c

00008ccc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    8ccc:	e590c000 	ldr	ip, [r0]
    8cd0:	e152000c 	cmp	r2, ip
    8cd4:	812fff1e 	bxhi	lr
    8cd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8cdc:	e1a06003 	mov	r6, r3
    8ce0:	e3a03000 	mov	r3, #0
    8ce4:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    8ce8:	e1520003 	cmp	r2, r3
    8cec:	e1a05002 	mov	r5, r2
    8cf0:	e1a04000 	mov	r4, r0
    8cf4:	e5cd3000 	strb	r3, [sp]
    8cf8:	0a000034 	beq	8dd0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x104>
    8cfc:	e1a0800d 	mov	r8, sp
    8d00:	e1a00008 	mov	r0, r8
    8d04:	eb001515 	bl	e160 <strcat>
    8d08:	e59f1114 	ldr	r1, [pc, #276]	; 8e24 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x158>
    8d0c:	e1a00008 	mov	r0, r8
    8d10:	eb001512 	bl	e160 <strcat>
    8d14:	e1a01006 	mov	r1, r6
    8d18:	e1a00008 	mov	r0, r8
    8d1c:	eb00150f 	bl	e160 <strcat>
    8d20:	e59f1100 	ldr	r1, [pc, #256]	; 8e28 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x15c>
    8d24:	e1a00008 	mov	r0, r8
    8d28:	eb00150c 	bl	e160 <strcat>
    8d2c:	e1a00008 	mov	r0, r8
    8d30:	eb001483 	bl	df44 <strlen>
    8d34:	e1a06000 	mov	r6, r0
    8d38:	e5940008 	ldr	r0, [r4, #8]
    8d3c:	e1a02006 	mov	r2, r6
    8d40:	e5903000 	ldr	r3, [r0]
    8d44:	e1a01008 	mov	r1, r8
    8d48:	e593300c 	ldr	r3, [r3, #12]
    8d4c:	e12fff33 	blx	r3
    8d50:	e5940018 	ldr	r0, [r4, #24]
    8d54:	e3500000 	cmp	r0, #0
    8d58:	1a00002e 	bne	8e18 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x14c>
    8d5c:	e1a01008 	mov	r1, r8
    8d60:	e59f70c4 	ldr	r7, [pc, #196]	; 8e2c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x160>
    8d64:	e0880006 	add	r0, r8, r6
    8d68:	e1510000 	cmp	r1, r0
    8d6c:	0a00000f 	beq	8db0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe4>
    8d70:	e0d1c0d1 	ldrsb	ip, [r1], #1
    8d74:	e35c000d 	cmp	ip, #13
    8d78:	0afffffa 	beq	8d68 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x9c>
    8d7c:	e5942010 	ldr	r2, [r4, #16]
    8d80:	e594e00c 	ldr	lr, [r4, #12]
    8d84:	e7cec002 	strb	ip, [lr, r2]
    8d88:	e5943010 	ldr	r3, [r4, #16]
    8d8c:	e5942014 	ldr	r2, [r4, #20]
    8d90:	e2833001 	add	r3, r3, #1
    8d94:	e0033007 	and	r3, r3, r7
    8d98:	e1530002 	cmp	r3, r2
    8d9c:	e5843010 	str	r3, [r4, #16]
    8da0:	1afffff0 	bne	8d68 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x9c>
    8da4:	e2433001 	sub	r3, r3, #1
    8da8:	e0033007 	and	r3, r3, r7
    8dac:	e5843010 	str	r3, [r4, #16]
    8db0:	e5943018 	ldr	r3, [r4, #24]
    8db4:	e3530000 	cmp	r3, #0
    8db8:	0a000000 	beq	8dc0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xf4>
    8dbc:	eb001013 	bl	ce10 <LeaveCritical>
    8dc0:	e3550000 	cmp	r5, #0
    8dc4:	0a000015 	beq	8e20 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x154>
    8dc8:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    8dcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8dd0:	e1a0800d 	mov	r8, sp
    8dd4:	e1a07001 	mov	r7, r1
    8dd8:	e1a00008 	mov	r0, r8
    8ddc:	e59f104c 	ldr	r1, [pc, #76]	; 8e30 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x164>
    8de0:	eb0014c1 	bl	e0ec <strcpy>
    8de4:	e1a01007 	mov	r1, r7
    8de8:	e1a00008 	mov	r0, r8
    8dec:	eb0014db 	bl	e160 <strcat>
    8df0:	e1a00008 	mov	r0, r8
    8df4:	e59f1028 	ldr	r1, [pc, #40]	; 8e24 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x158>
    8df8:	eb0014d8 	bl	e160 <strcat>
    8dfc:	e1a01006 	mov	r1, r6
    8e00:	e1a00008 	mov	r0, r8
    8e04:	eb0014d5 	bl	e160 <strcat>
    8e08:	e1a00008 	mov	r0, r8
    8e0c:	e59f1020 	ldr	r1, [pc, #32]	; 8e34 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x168>
    8e10:	eb0014d2 	bl	e160 <strcat>
    8e14:	eaffffc1 	b	8d20 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x54>
    8e18:	eb000fd0 	bl	cd60 <EnterCritical>
    8e1c:	eaffffce 	b	8d5c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x90>
    8e20:	ebfffdff 	bl	8624 <halt>
    8e24:	000132b4 	.word	0x000132b4
    8e28:	000132c0 	.word	0x000132c0
    8e2c:	00003fff 	.word	0x00003fff
    8e30:	000132ac 	.word	0x000132ac
    8e34:	000132b8 	.word	0x000132b8

00008e38 <CLogger::Get()>:
    8e38:	e59f3004 	ldr	r3, [pc, #4]	; 8e44 <CLogger::Get()+0xc>
    8e3c:	e5930000 	ldr	r0, [r3]
    8e40:	e12fff1e 	bx	lr
    8e44:	00013d5c 	.word	0x00013d5c

00008e48 <CLogger::Write(char const*)>:
    8e48:	e92d4070 	push	{r4, r5, r6, lr}
    8e4c:	e1a04000 	mov	r4, r0
    8e50:	e1a00001 	mov	r0, r1
    8e54:	e1a05001 	mov	r5, r1
    8e58:	eb001439 	bl	df44 <strlen>
    8e5c:	e1a06000 	mov	r6, r0
    8e60:	e5940008 	ldr	r0, [r4, #8]
    8e64:	e1a02006 	mov	r2, r6
    8e68:	e5903000 	ldr	r3, [r0]
    8e6c:	e1a01005 	mov	r1, r5
    8e70:	e593300c 	ldr	r3, [r3, #12]
    8e74:	e12fff33 	blx	r3
    8e78:	e5940018 	ldr	r0, [r4, #24]
    8e7c:	e3500000 	cmp	r0, #0
    8e80:	1a000018 	bne	8ee8 <CLogger::Write(char const*)+0xa0>
    8e84:	e59fe064 	ldr	lr, [pc, #100]	; 8ef0 <CLogger::Write(char const*)+0xa8>
    8e88:	e0850006 	add	r0, r5, r6
    8e8c:	e1550000 	cmp	r5, r0
    8e90:	0a00000f 	beq	8ed4 <CLogger::Write(char const*)+0x8c>
    8e94:	e0d510d1 	ldrsb	r1, [r5], #1
    8e98:	e351000d 	cmp	r1, #13
    8e9c:	0afffffa 	beq	8e8c <CLogger::Write(char const*)+0x44>
    8ea0:	e5942010 	ldr	r2, [r4, #16]
    8ea4:	e594c00c 	ldr	ip, [r4, #12]
    8ea8:	e7cc1002 	strb	r1, [ip, r2]
    8eac:	e5943010 	ldr	r3, [r4, #16]
    8eb0:	e5942014 	ldr	r2, [r4, #20]
    8eb4:	e2833001 	add	r3, r3, #1
    8eb8:	e003300e 	and	r3, r3, lr
    8ebc:	e1530002 	cmp	r3, r2
    8ec0:	e5843010 	str	r3, [r4, #16]
    8ec4:	1afffff0 	bne	8e8c <CLogger::Write(char const*)+0x44>
    8ec8:	e2433001 	sub	r3, r3, #1
    8ecc:	e003300e 	and	r3, r3, lr
    8ed0:	e5843010 	str	r3, [r4, #16]
    8ed4:	e5943018 	ldr	r3, [r4, #24]
    8ed8:	e3530000 	cmp	r3, #0
    8edc:	08bd8070 	popeq	{r4, r5, r6, pc}
    8ee0:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ee4:	ea000fc9 	b	ce10 <LeaveCritical>
    8ee8:	eb000f9c 	bl	cd60 <EnterCritical>
    8eec:	eaffffe4 	b	8e84 <CLogger::Write(char const*)+0x3c>
    8ef0:	00003fff 	.word	0x00003fff

00008ef4 <CLogger::Read(void*, unsigned int)>:
    8ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ef8:	e1a04000 	mov	r4, r0
    8efc:	e5900018 	ldr	r0, [r0, #24]
    8f00:	e1a05001 	mov	r5, r1
    8f04:	e3500000 	cmp	r0, #0
    8f08:	e1a06002 	mov	r6, r2
    8f0c:	1a00001b 	bne	8f80 <CLogger::Read(void*, unsigned int)+0x8c>
    8f10:	e1c421d0 	ldrd	r2, [r4, #16]
    8f14:	e1520003 	cmp	r2, r3
    8f18:	0a000020 	beq	8fa0 <CLogger::Read(void*, unsigned int)+0xac>
    8f1c:	e1a07006 	mov	r7, r6
    8f20:	e3a0c000 	mov	ip, #0
    8f24:	e59f2094 	ldr	r2, [pc, #148]	; 8fc0 <CLogger::Read(void*, unsigned int)+0xcc>
    8f28:	ea00000a 	b	8f58 <CLogger::Read(void*, unsigned int)+0x64>
    8f2c:	e594100c 	ldr	r1, [r4, #12]
    8f30:	e28cc001 	add	ip, ip, #1
    8f34:	e19130d3 	ldrsb	r3, [r1, r3]
    8f38:	e4c53001 	strb	r3, [r5], #1
    8f3c:	e5943014 	ldr	r3, [r4, #20]
    8f40:	e5941010 	ldr	r1, [r4, #16]
    8f44:	e2833001 	add	r3, r3, #1
    8f48:	e0033002 	and	r3, r3, r2
    8f4c:	e1530001 	cmp	r3, r1
    8f50:	e5843014 	str	r3, [r4, #20]
    8f54:	0a000014 	beq	8fac <CLogger::Read(void*, unsigned int)+0xb8>
    8f58:	e15c0006 	cmp	ip, r6
    8f5c:	1afffff2 	bne	8f2c <CLogger::Read(void*, unsigned int)+0x38>
    8f60:	e5943018 	ldr	r3, [r4, #24]
    8f64:	e3530000 	cmp	r3, #0
    8f68:	1a000001 	bne	8f74 <CLogger::Read(void*, unsigned int)+0x80>
    8f6c:	e1a00007 	mov	r0, r7
    8f70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8f74:	eb000fa5 	bl	ce10 <LeaveCritical>
    8f78:	e1a00007 	mov	r0, r7
    8f7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8f80:	eb000f76 	bl	cd60 <EnterCritical>
    8f84:	e1c421d0 	ldrd	r2, [r4, #16]
    8f88:	e1520003 	cmp	r2, r3
    8f8c:	1affffe2 	bne	8f1c <CLogger::Read(void*, unsigned int)+0x28>
    8f90:	e5943018 	ldr	r3, [r4, #24]
    8f94:	e3530000 	cmp	r3, #0
    8f98:	0a000000 	beq	8fa0 <CLogger::Read(void*, unsigned int)+0xac>
    8f9c:	eb000f9b 	bl	ce10 <LeaveCritical>
    8fa0:	e3e07000 	mvn	r7, #0
    8fa4:	e1a00007 	mov	r0, r7
    8fa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8fac:	e5943018 	ldr	r3, [r4, #24]
    8fb0:	e1a0700c 	mov	r7, ip
    8fb4:	e3530000 	cmp	r3, #0
    8fb8:	0affffeb 	beq	8f6c <CLogger::Read(void*, unsigned int)+0x78>
    8fbc:	eaffffec 	b	8f74 <CLogger::Read(void*, unsigned int)+0x80>
    8fc0:	00003fff 	.word	0x00003fff

00008fc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    8fc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8fc8:	e1a04000 	mov	r4, r0
    8fcc:	e3a00f42 	mov	r0, #264	; 0x108
    8fd0:	e1a07003 	mov	r7, r3
    8fd4:	e1a09002 	mov	r9, r2
    8fd8:	e1a08001 	mov	r8, r1
    8fdc:	eb000c41 	bl	c0e8 <operator new(unsigned int)>
    8fe0:	e3a06000 	mov	r6, #0
    8fe4:	e1a05000 	mov	r5, r0
    8fe8:	e1a01008 	mov	r1, r8
    8fec:	e3a02032 	mov	r2, #50	; 0x32
    8ff0:	e4c09001 	strb	r9, [r0], #1
    8ff4:	eb001447 	bl	e118 <strncpy>
    8ff8:	e1a01007 	mov	r1, r7
    8ffc:	e2850033 	add	r0, r5, #51	; 0x33
    9000:	e3a020c8 	mov	r2, #200	; 0xc8
    9004:	e5c56032 	strb	r6, [r5, #50]	; 0x32
    9008:	eb001442 	bl	e118 <strncpy>
    900c:	e5940004 	ldr	r0, [r4, #4]
    9010:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
    9014:	e1500006 	cmp	r0, r6
    9018:	0a000026 	beq	90b8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
    901c:	eb00107f 	bl	d220 <CTimer::GetTime() const>
    9020:	e58500fc 	str	r0, [r5, #252]	; 0xfc
    9024:	e5940004 	ldr	r0, [r4, #4]
    9028:	eb001078 	bl	d210 <CTimer::GetTicks() const>
    902c:	e1a02000 	mov	r2, r0
    9030:	e59f60e8 	ldr	r6, [pc, #232]	; 9120 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x15c>
    9034:	e5940004 	ldr	r0, [r4, #4]
    9038:	e0876692 	umull	r6, r7, r2, r6
    903c:	e1a032a7 	lsr	r3, r7, #5
    9040:	e0833103 	add	r3, r3, r3, lsl #2
    9044:	e0833103 	add	r3, r3, r3, lsl #2
    9048:	e0423103 	sub	r3, r2, r3, lsl #2
    904c:	e5853100 	str	r3, [r5, #256]	; 0x100
    9050:	eb001046 	bl	d170 <CTimer::GetTimeZone() const>
    9054:	e5850104 	str	r0, [r5, #260]	; 0x104
    9058:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    905c:	e3500000 	cmp	r0, #0
    9060:	1a00001a 	bne	90d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
    9064:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    9068:	e2823001 	add	r3, r2, #1
    906c:	e3530032 	cmp	r3, #50	; 0x32
    9070:	e0842102 	add	r2, r4, r2, lsl #2
    9074:	e582501c 	str	r5, [r2, #28]
    9078:	03a02000 	moveq	r2, #0
    907c:	01a03002 	moveq	r3, r2
    9080:	058420e4 	streq	r2, [r4, #228]	; 0xe4
    9084:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    9088:	158430e4 	strne	r3, [r4, #228]	; 0xe4
    908c:	e1520003 	cmp	r2, r3
    9090:	0a000011 	beq	90dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
    9094:	e3500000 	cmp	r0, #0
    9098:	1a000004 	bne	90b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xec>
    909c:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    90a0:	e3530000 	cmp	r3, #0
    90a4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    90a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    90ac:	e12fff13 	bx	r3
    90b0:	eb000f56 	bl	ce10 <LeaveCritical>
    90b4:	eafffff8 	b	909c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
    90b8:	e58500fc 	str	r0, [r5, #252]	; 0xfc
    90bc:	e5850100 	str	r0, [r5, #256]	; 0x100
    90c0:	e5850104 	str	r0, [r5, #260]	; 0x104
    90c4:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    90c8:	e3500000 	cmp	r0, #0
    90cc:	0affffe4 	beq	9064 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa0>
    90d0:	eb000f22 	bl	cd60 <EnterCritical>
    90d4:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    90d8:	eaffffe1 	b	9064 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xa0>
    90dc:	e2832001 	add	r2, r3, #1
    90e0:	e3520032 	cmp	r2, #50	; 0x32
    90e4:	e0843103 	add	r3, r4, r3, lsl #2
    90e8:	e593501c 	ldr	r5, [r3, #28]
    90ec:	03a03000 	moveq	r3, #0
    90f0:	158420e8 	strne	r2, [r4, #232]	; 0xe8
    90f4:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    90f8:	e3500000 	cmp	r0, #0
    90fc:	1a000005 	bne	9118 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
    9100:	e3550000 	cmp	r5, #0
    9104:	0affffe4 	beq	909c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
    9108:	e1a00005 	mov	r0, r5
    910c:	e3a01f42 	mov	r1, #264	; 0x108
    9110:	eb000bf8 	bl	c0f8 <operator delete(void*, unsigned int)>
    9114:	eaffffe0 	b	909c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
    9118:	eb000f3c 	bl	ce10 <LeaveCritical>
    911c:	eafffff7 	b	9100 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x13c>
    9120:	51eb851f 	.word	0x51eb851f

00009124 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    9124:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9128:	e1a04000 	mov	r4, r0
    912c:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    9130:	e1a07001 	mov	r7, r1
    9134:	e3500000 	cmp	r0, #0
    9138:	e1a08002 	mov	r8, r2
    913c:	e1a06003 	mov	r6, r3
    9140:	1a000021 	bne	91cc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    9144:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
    9148:	e1530002 	cmp	r3, r2
    914c:	0a000027 	beq	91f0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    9150:	e283c001 	add	ip, r3, #1
    9154:	e35c0032 	cmp	ip, #50	; 0x32
    9158:	e0843103 	add	r3, r4, r3, lsl #2
    915c:	e593501c 	ldr	r5, [r3, #28]
    9160:	03a03000 	moveq	r3, #0
    9164:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    9168:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    916c:	e3500000 	cmp	r0, #0
    9170:	1a000020 	bne	91f8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    9174:	e1a01005 	mov	r1, r5
    9178:	e4d12001 	ldrb	r2, [r1], #1
    917c:	e1a00008 	mov	r0, r8
    9180:	e5c72000 	strb	r2, [r7]
    9184:	eb0013d8 	bl	e0ec <strcpy>
    9188:	e2851033 	add	r1, r5, #51	; 0x33
    918c:	e1a00006 	mov	r0, r6
    9190:	eb0013d5 	bl	e0ec <strcpy>
    9194:	e59530fc 	ldr	r3, [r5, #252]	; 0xfc
    9198:	e59d2018 	ldr	r2, [sp, #24]
    919c:	e1a00005 	mov	r0, r5
    91a0:	e5823000 	str	r3, [r2]
    91a4:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    91a8:	e59d201c 	ldr	r2, [sp, #28]
    91ac:	e3a01f42 	mov	r1, #264	; 0x108
    91b0:	e5823000 	str	r3, [r2]
    91b4:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    91b8:	e59d2020 	ldr	r2, [sp, #32]
    91bc:	e5823000 	str	r3, [r2]
    91c0:	eb000bcc 	bl	c0f8 <operator delete(void*, unsigned int)>
    91c4:	e3a00001 	mov	r0, #1
    91c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    91cc:	eb000ee3 	bl	cd60 <EnterCritical>
    91d0:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
    91d4:	e1520003 	cmp	r2, r3
    91d8:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    91dc:	1affffdb 	bne	9150 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x2c>
    91e0:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    91e4:	e3530000 	cmp	r3, #0
    91e8:	0a000000 	beq	91f0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    91ec:	eb000f07 	bl	ce10 <LeaveCritical>
    91f0:	e3a00000 	mov	r0, #0
    91f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    91f8:	eb000f04 	bl	ce10 <LeaveCritical>
    91fc:	eaffffdc 	b	9174 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x50>

00009200 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    9200:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    9204:	e12fff1e 	bx	lr

00009208 <CLogger::RegisterPanicHandler(void (*)())>:
    9208:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    920c:	e12fff1e 	bx	lr

00009210 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    9210:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9214:	e1a07003 	mov	r7, r3
    9218:	e24dd024 	sub	sp, sp, #36	; 0x24
    921c:	e1a04000 	mov	r4, r0
    9220:	e1a0000d 	mov	r0, sp
    9224:	e1a06002 	mov	r6, r2
    9228:	e1a05001 	mov	r5, r1
    922c:	eb0000ca 	bl	955c <CString::CString()>
    9230:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    9234:	e1a01007 	mov	r1, r7
    9238:	e1a0000d 	mov	r0, sp
    923c:	eb000390 	bl	a084 <CString::FormatV(char const*, std::__va_list)>
    9240:	e1a0000d 	mov	r0, sp
    9244:	eb0000da 	bl	95b4 <CString::operator char const*() const>
    9248:	e1a02006 	mov	r2, r6
    924c:	e1a03000 	mov	r3, r0
    9250:	e1a01005 	mov	r1, r5
    9254:	e1a00004 	mov	r0, r4
    9258:	ebffff59 	bl	8fc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    925c:	e5943000 	ldr	r3, [r4]
    9260:	e1560003 	cmp	r6, r3
    9264:	8a000042 	bhi	9374 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    9268:	e28d0010 	add	r0, sp, #16
    926c:	eb0000ba 	bl	955c <CString::CString()>
    9270:	e3560000 	cmp	r6, #0
    9274:	0a000042 	beq	9384 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
    9278:	e5940004 	ldr	r0, [r4, #4]
    927c:	e3500000 	cmp	r0, #0
    9280:	1a000064 	bne	9418 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x208>
    9284:	e1a01005 	mov	r1, r5
    9288:	e28d0010 	add	r0, sp, #16
    928c:	eb0000fa 	bl	967c <CString::Append(char const*)>
    9290:	e59f11d0 	ldr	r1, [pc, #464]	; 9468 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x258>
    9294:	e28d0010 	add	r0, sp, #16
    9298:	eb0000f7 	bl	967c <CString::Append(char const*)>
    929c:	e1a0000d 	mov	r0, sp
    92a0:	eb0000c3 	bl	95b4 <CString::operator char const*() const>
    92a4:	e1a01000 	mov	r1, r0
    92a8:	e28d0010 	add	r0, sp, #16
    92ac:	eb0000f2 	bl	967c <CString::Append(char const*)>
    92b0:	e59f11b4 	ldr	r1, [pc, #436]	; 946c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x25c>
    92b4:	e28d0010 	add	r0, sp, #16
    92b8:	eb0000ef 	bl	967c <CString::Append(char const*)>
    92bc:	e28d0010 	add	r0, sp, #16
    92c0:	eb0000bb 	bl	95b4 <CString::operator char const*() const>
    92c4:	e1a05000 	mov	r5, r0
    92c8:	eb00131d 	bl	df44 <strlen>
    92cc:	e1a07000 	mov	r7, r0
    92d0:	e5940008 	ldr	r0, [r4, #8]
    92d4:	e1a02007 	mov	r2, r7
    92d8:	e5903000 	ldr	r3, [r0]
    92dc:	e1a01005 	mov	r1, r5
    92e0:	e593300c 	ldr	r3, [r3, #12]
    92e4:	e12fff33 	blx	r3
    92e8:	e5940018 	ldr	r0, [r4, #24]
    92ec:	e3500000 	cmp	r0, #0
    92f0:	1a000046 	bne	9410 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x200>
    92f4:	e59fe174 	ldr	lr, [pc, #372]	; 9470 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x260>
    92f8:	e0850007 	add	r0, r5, r7
    92fc:	e1550000 	cmp	r5, r0
    9300:	0a00000f 	beq	9344 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
    9304:	e0d510d1 	ldrsb	r1, [r5], #1
    9308:	e351000d 	cmp	r1, #13
    930c:	0afffffa 	beq	92fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xec>
    9310:	e5942010 	ldr	r2, [r4, #16]
    9314:	e594c00c 	ldr	ip, [r4, #12]
    9318:	e7cc1002 	strb	r1, [ip, r2]
    931c:	e5943010 	ldr	r3, [r4, #16]
    9320:	e5942014 	ldr	r2, [r4, #20]
    9324:	e2833001 	add	r3, r3, #1
    9328:	e003300e 	and	r3, r3, lr
    932c:	e1530002 	cmp	r3, r2
    9330:	e5843010 	str	r3, [r4, #16]
    9334:	1afffff0 	bne	92fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xec>
    9338:	e2433001 	sub	r3, r3, #1
    933c:	e003300e 	and	r3, r3, lr
    9340:	e5843010 	str	r3, [r4, #16]
    9344:	e5943018 	ldr	r3, [r4, #24]
    9348:	e3530000 	cmp	r3, #0
    934c:	0a000000 	beq	9354 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x144>
    9350:	eb000eae 	bl	ce10 <LeaveCritical>
    9354:	e3560000 	cmp	r6, #0
    9358:	0a00003d 	beq	9454 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x244>
    935c:	e28d0010 	add	r0, sp, #16
    9360:	eb000064 	bl	94f8 <CString::~CString()>
    9364:	e1a0000d 	mov	r0, sp
    9368:	eb000062 	bl	94f8 <CString::~CString()>
    936c:	e28dd024 	add	sp, sp, #36	; 0x24
    9370:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9374:	e1a0000d 	mov	r0, sp
    9378:	eb00005e 	bl	94f8 <CString::~CString()>
    937c:	e28dd024 	add	sp, sp, #36	; 0x24
    9380:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9384:	e59f10e8 	ldr	r1, [pc, #232]	; 9474 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x264>
    9388:	e28d0010 	add	r0, sp, #16
    938c:	eb00008e 	bl	95cc <CString::operator=(char const*)>
    9390:	e5940004 	ldr	r0, [r4, #4]
    9394:	e3500000 	cmp	r0, #0
    9398:	0a00000d 	beq	93d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    939c:	eb000fa9 	bl	d248 <CTimer::GetTimeString()>
    93a0:	e2507000 	subs	r7, r0, #0
    93a4:	0a00000a 	beq	93d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    93a8:	eb000081 	bl	95b4 <CString::operator char const*() const>
    93ac:	e1a01000 	mov	r1, r0
    93b0:	e28d0010 	add	r0, sp, #16
    93b4:	eb0000b0 	bl	967c <CString::Append(char const*)>
    93b8:	e28d0010 	add	r0, sp, #16
    93bc:	e59f10b4 	ldr	r1, [pc, #180]	; 9478 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x268>
    93c0:	eb0000ad 	bl	967c <CString::Append(char const*)>
    93c4:	e5973000 	ldr	r3, [r7]
    93c8:	e1a00007 	mov	r0, r7
    93cc:	e5933004 	ldr	r3, [r3, #4]
    93d0:	e12fff33 	blx	r3
    93d4:	e1a01005 	mov	r1, r5
    93d8:	e28d0010 	add	r0, sp, #16
    93dc:	eb0000a6 	bl	967c <CString::Append(char const*)>
    93e0:	e59f1080 	ldr	r1, [pc, #128]	; 9468 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x258>
    93e4:	e28d0010 	add	r0, sp, #16
    93e8:	eb0000a3 	bl	967c <CString::Append(char const*)>
    93ec:	e1a0000d 	mov	r0, sp
    93f0:	eb00006f 	bl	95b4 <CString::operator char const*() const>
    93f4:	e1a01000 	mov	r1, r0
    93f8:	e28d0010 	add	r0, sp, #16
    93fc:	eb00009e 	bl	967c <CString::Append(char const*)>
    9400:	e59f1074 	ldr	r1, [pc, #116]	; 947c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x26c>
    9404:	e28d0010 	add	r0, sp, #16
    9408:	eb00009b 	bl	967c <CString::Append(char const*)>
    940c:	eaffffa7 	b	92b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xa0>
    9410:	eb000e52 	bl	cd60 <EnterCritical>
    9414:	eaffffb6 	b	92f4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
    9418:	eb000f8a 	bl	d248 <CTimer::GetTimeString()>
    941c:	e2507000 	subs	r7, r0, #0
    9420:	0affff97 	beq	9284 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
    9424:	eb000062 	bl	95b4 <CString::operator char const*() const>
    9428:	e1a01000 	mov	r1, r0
    942c:	e28d0010 	add	r0, sp, #16
    9430:	eb000091 	bl	967c <CString::Append(char const*)>
    9434:	e28d0010 	add	r0, sp, #16
    9438:	e59f1038 	ldr	r1, [pc, #56]	; 9478 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x268>
    943c:	eb00008e 	bl	967c <CString::Append(char const*)>
    9440:	e5973000 	ldr	r3, [r7]
    9444:	e1a00007 	mov	r0, r7
    9448:	e5933004 	ldr	r3, [r3, #4]
    944c:	e12fff33 	blx	r3
    9450:	eaffff8b 	b	9284 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
    9454:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    9458:	e3530000 	cmp	r3, #0
    945c:	0a000000 	beq	9464 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x254>
    9460:	e12fff33 	blx	r3
    9464:	ebfffc6e 	bl	8624 <halt>
    9468:	000132b4 	.word	0x000132b4
    946c:	000132c0 	.word	0x000132c0
    9470:	00003fff 	.word	0x00003fff
    9474:	000132ac 	.word	0x000132ac
    9478:	000132c4 	.word	0x000132c4
    947c:	000132b8 	.word	0x000132b8

00009480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    9480:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    9484:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9488:	e24dd010 	sub	sp, sp, #16
    948c:	e28dc018 	add	ip, sp, #24
    9490:	e58dc000 	str	ip, [sp]
    9494:	e59d3014 	ldr	r3, [sp, #20]
    9498:	e58dc00c 	str	ip, [sp, #12]
    949c:	ebffff5b 	bl	9210 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    94a0:	e28dd010 	add	sp, sp, #16
    94a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    94a8:	e28dd004 	add	sp, sp, #4
    94ac:	e12fff1e 	bx	lr

000094b0 <CLogger::Initialize(CDevice*)>:
    94b0:	e92d4010 	push	{r4, lr}
    94b4:	e5801008 	str	r1, [r0, #8]
    94b8:	e24dd008 	sub	sp, sp, #8
    94bc:	e1a04000 	mov	r4, r0
    94c0:	eb000afa 	bl	c0b0 <CMachineInfo::Get()>
    94c4:	eb000a83 	bl	bed8 <CMachineInfo::GetMachineName() const>
    94c8:	e59f301c 	ldr	r3, [pc, #28]	; 94ec <CLogger::Initialize(CDevice*)+0x3c>
    94cc:	e58d0000 	str	r0, [sp]
    94d0:	e3a02003 	mov	r2, #3
    94d4:	e1a00004 	mov	r0, r4
    94d8:	e59f1010 	ldr	r1, [pc, #16]	; 94f0 <CLogger::Initialize(CDevice*)+0x40>
    94dc:	ebffffe7 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    94e0:	e3a00001 	mov	r0, #1
    94e4:	e28dd008 	add	sp, sp, #8
    94e8:	e8bd8010 	pop	{r4, pc}
    94ec:	000132c8 	.word	0x000132c8
    94f0:	000132e0 	.word	0x000132e0
    94f4:	00000000 	.word	0x00000000

000094f8 <CString::~CString()>:
    94f8:	e92d4010 	push	{r4, lr}
    94fc:	e1a04000 	mov	r4, r0
    9500:	e5900004 	ldr	r0, [r0, #4]
    9504:	e59f3014 	ldr	r3, [pc, #20]	; 9520 <CString::~CString()+0x28>
    9508:	e3500000 	cmp	r0, #0
    950c:	e5843000 	str	r3, [r4]
    9510:	0a000000 	beq	9518 <CString::~CString()+0x20>
    9514:	eb000af6 	bl	c0f4 <operator delete[](void*)>
    9518:	e1a00004 	mov	r0, r4
    951c:	e8bd8010 	pop	{r4, pc}
    9520:	000132f0 	.word	0x000132f0

00009524 <CString::~CString()>:
    9524:	e92d4010 	push	{r4, lr}
    9528:	e1a04000 	mov	r4, r0
    952c:	e5900004 	ldr	r0, [r0, #4]
    9530:	e59f3020 	ldr	r3, [pc, #32]	; 9558 <CString::~CString()+0x34>
    9534:	e3500000 	cmp	r0, #0
    9538:	e5843000 	str	r3, [r4]
    953c:	0a000000 	beq	9544 <CString::~CString()+0x20>
    9540:	eb000aeb 	bl	c0f4 <operator delete[](void*)>
    9544:	e1a00004 	mov	r0, r4
    9548:	e3a01010 	mov	r1, #16
    954c:	eb000ae9 	bl	c0f8 <operator delete(void*, unsigned int)>
    9550:	e1a00004 	mov	r0, r4
    9554:	e8bd8010 	pop	{r4, pc}
    9558:	000132f0 	.word	0x000132f0

0000955c <CString::CString()>:
    955c:	e3a02000 	mov	r2, #0
    9560:	e59f1008 	ldr	r1, [pc, #8]	; 9570 <CString::CString()+0x14>
    9564:	e5802008 	str	r2, [r0, #8]
    9568:	e8800006 	stm	r0, {r1, r2}
    956c:	e12fff1e 	bx	lr
    9570:	000132f0 	.word	0x000132f0

00009574 <CString::CString(char const*)>:
    9574:	e92d4070 	push	{r4, r5, r6, lr}
    9578:	e1a04000 	mov	r4, r0
    957c:	e59f302c 	ldr	r3, [pc, #44]	; 95b0 <CString::CString(char const*)+0x3c>
    9580:	e1a00001 	mov	r0, r1
    9584:	e5843000 	str	r3, [r4]
    9588:	e1a05001 	mov	r5, r1
    958c:	eb00126c 	bl	df44 <strlen>
    9590:	e2800001 	add	r0, r0, #1
    9594:	e5840008 	str	r0, [r4, #8]
    9598:	eb000ad3 	bl	c0ec <operator new[](unsigned int)>
    959c:	e1a01005 	mov	r1, r5
    95a0:	e5840004 	str	r0, [r4, #4]
    95a4:	eb0012d0 	bl	e0ec <strcpy>
    95a8:	e1a00004 	mov	r0, r4
    95ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    95b0:	000132f0 	.word	0x000132f0

000095b4 <CString::operator char const*() const>:
    95b4:	e5900004 	ldr	r0, [r0, #4]
    95b8:	e59f3008 	ldr	r3, [pc, #8]	; 95c8 <CString::operator char const*() const+0x14>
    95bc:	e3500000 	cmp	r0, #0
    95c0:	01a00003 	moveq	r0, r3
    95c4:	e12fff1e 	bx	lr
    95c8:	00013874 	.word	0x00013874

000095cc <CString::operator=(char const*)>:
    95cc:	e92d4070 	push	{r4, r5, r6, lr}
    95d0:	e1a04000 	mov	r4, r0
    95d4:	e5900004 	ldr	r0, [r0, #4]
    95d8:	e1a05001 	mov	r5, r1
    95dc:	e3500000 	cmp	r0, #0
    95e0:	0a000000 	beq	95e8 <CString::operator=(char const*)+0x1c>
    95e4:	eb000ac2 	bl	c0f4 <operator delete[](void*)>
    95e8:	e1a00005 	mov	r0, r5
    95ec:	eb001254 	bl	df44 <strlen>
    95f0:	e2800001 	add	r0, r0, #1
    95f4:	e5840008 	str	r0, [r4, #8]
    95f8:	eb000abb 	bl	c0ec <operator new[](unsigned int)>
    95fc:	e1a01005 	mov	r1, r5
    9600:	e5840004 	str	r0, [r4, #4]
    9604:	eb0012b8 	bl	e0ec <strcpy>
    9608:	e5940004 	ldr	r0, [r4, #4]
    960c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009610 <CString::operator=(CString const&)>:
    9610:	e92d4070 	push	{r4, r5, r6, lr}
    9614:	e1a04000 	mov	r4, r0
    9618:	e5900004 	ldr	r0, [r0, #4]
    961c:	e1a06001 	mov	r6, r1
    9620:	e3500000 	cmp	r0, #0
    9624:	0a000000 	beq	962c <CString::operator=(CString const&)+0x1c>
    9628:	eb000ab1 	bl	c0f4 <operator delete[](void*)>
    962c:	e5960004 	ldr	r0, [r6, #4]
    9630:	e59f5030 	ldr	r5, [pc, #48]	; 9668 <CString::operator=(CString const&)+0x58>
    9634:	e3500000 	cmp	r0, #0
    9638:	01a00005 	moveq	r0, r5
    963c:	eb001240 	bl	df44 <strlen>
    9640:	e2800001 	add	r0, r0, #1
    9644:	e5840008 	str	r0, [r4, #8]
    9648:	eb000aa7 	bl	c0ec <operator new[](unsigned int)>
    964c:	e5840004 	str	r0, [r4, #4]
    9650:	e5961004 	ldr	r1, [r6, #4]
    9654:	e3510000 	cmp	r1, #0
    9658:	01a01005 	moveq	r1, r5
    965c:	eb0012a2 	bl	e0ec <strcpy>
    9660:	e1a00004 	mov	r0, r4
    9664:	e8bd8070 	pop	{r4, r5, r6, pc}
    9668:	00013874 	.word	0x00013874

0000966c <CString::GetLength() const>:
    966c:	e5900004 	ldr	r0, [r0, #4]
    9670:	e3500000 	cmp	r0, #0
    9674:	012fff1e 	bxeq	lr
    9678:	ea001231 	b	df44 <strlen>

0000967c <CString::Append(char const*)>:
    967c:	e92d4070 	push	{r4, r5, r6, lr}
    9680:	e3a03001 	mov	r3, #1
    9684:	e1a04000 	mov	r4, r0
    9688:	e5900004 	ldr	r0, [r0, #4]
    968c:	e1a06001 	mov	r6, r1
    9690:	e3500000 	cmp	r0, #0
    9694:	e5843008 	str	r3, [r4, #8]
    9698:	0a000003 	beq	96ac <CString::Append(char const*)+0x30>
    969c:	eb001228 	bl	df44 <strlen>
    96a0:	e5943008 	ldr	r3, [r4, #8]
    96a4:	e0830000 	add	r0, r3, r0
    96a8:	e5840008 	str	r0, [r4, #8]
    96ac:	e1a00006 	mov	r0, r6
    96b0:	eb001223 	bl	df44 <strlen>
    96b4:	e5943008 	ldr	r3, [r4, #8]
    96b8:	e0800003 	add	r0, r0, r3
    96bc:	e5840008 	str	r0, [r4, #8]
    96c0:	eb000a89 	bl	c0ec <operator new[](unsigned int)>
    96c4:	e5941004 	ldr	r1, [r4, #4]
    96c8:	e1a05000 	mov	r5, r0
    96cc:	e3510000 	cmp	r1, #0
    96d0:	05c01000 	strbeq	r1, [r0]
    96d4:	0a000004 	beq	96ec <CString::Append(char const*)+0x70>
    96d8:	eb001283 	bl	e0ec <strcpy>
    96dc:	e5940004 	ldr	r0, [r4, #4]
    96e0:	e3500000 	cmp	r0, #0
    96e4:	0a000000 	beq	96ec <CString::Append(char const*)+0x70>
    96e8:	eb000a81 	bl	c0f4 <operator delete[](void*)>
    96ec:	e1a01006 	mov	r1, r6
    96f0:	e1a00005 	mov	r0, r5
    96f4:	eb001299 	bl	e160 <strcat>
    96f8:	e5845004 	str	r5, [r4, #4]
    96fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00009700 <CString::Compare(char const*) const>:
    9700:	e5900004 	ldr	r0, [r0, #4]
    9704:	ea001218 	b	df6c <strcmp>

00009708 <CString::Find(char) const>:
    9708:	e5902004 	ldr	r2, [r0, #4]
    970c:	e1d230d0 	ldrsb	r3, [r2]
    9710:	e3530000 	cmp	r3, #0
    9714:	0a000009 	beq	9740 <CString::Find(char) const+0x38>
    9718:	e1510003 	cmp	r1, r3
    971c:	e3a00000 	mov	r0, #0
    9720:	1a000002 	bne	9730 <CString::Find(char) const+0x28>
    9724:	e12fff1e 	bx	lr
    9728:	e1530001 	cmp	r3, r1
    972c:	012fff1e 	bxeq	lr
    9730:	e1f230d1 	ldrsb	r3, [r2, #1]!
    9734:	e2800001 	add	r0, r0, #1
    9738:	e3530000 	cmp	r3, #0
    973c:	1afffff9 	bne	9728 <CString::Find(char) const+0x20>
    9740:	e3e00000 	mvn	r0, #0
    9744:	e12fff1e 	bx	lr

00009748 <CString::Replace(char const*, char const*)>:
    9748:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    974c:	e1d1a0d0 	ldrsb	sl, [r1]
    9750:	e24dd014 	sub	sp, sp, #20
    9754:	e35a0000 	cmp	sl, #0
    9758:	058da004 	streq	sl, [sp, #4]
    975c:	01a0000a 	moveq	r0, sl
    9760:	1a000001 	bne	976c <CString::Replace(char const*, char const*)+0x24>
    9764:	e28dd014 	add	sp, sp, #20
    9768:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    976c:	e5905004 	ldr	r5, [r0, #4]
    9770:	e1a04000 	mov	r4, r0
    9774:	e1a00005 	mov	r0, r5
    9778:	e58d2008 	str	r2, [sp, #8]
    977c:	e1a09001 	mov	r9, r1
    9780:	eb0011ef 	bl	df44 <strlen>
    9784:	e2800001 	add	r0, r0, #1
    9788:	eb000a57 	bl	c0ec <operator new[](unsigned int)>
    978c:	e1a01005 	mov	r1, r5
    9790:	e58d000c 	str	r0, [sp, #12]
    9794:	eb001254 	bl	e0ec <strcpy>
    9798:	e5940004 	ldr	r0, [r4, #4]
    979c:	e3500000 	cmp	r0, #0
    97a0:	0a000000 	beq	97a8 <CString::Replace(char const*, char const*)+0x60>
    97a4:	eb000a52 	bl	c0f4 <operator delete[](void*)>
    97a8:	e3a00040 	mov	r0, #64	; 0x40
    97ac:	e3a03000 	mov	r3, #0
    97b0:	e5840008 	str	r0, [r4, #8]
    97b4:	e58d3004 	str	r3, [sp, #4]
    97b8:	eb000a4b 	bl	c0ec <operator new[](unsigned int)>
    97bc:	e59d500c 	ldr	r5, [sp, #12]
    97c0:	e5840004 	str	r0, [r4, #4]
    97c4:	e584000c 	str	r0, [r4, #12]
    97c8:	e1d910d0 	ldrsb	r1, [r9]
    97cc:	e1a00005 	mov	r0, r5
    97d0:	eb001273 	bl	e1a4 <strchr>
    97d4:	e2507000 	subs	r7, r0, #0
    97d8:	0a000066 	beq	9978 <CString::Replace(char const*, char const*)+0x230>
    97dc:	e1550007 	cmp	r5, r7
    97e0:	3a000005 	bcc	97fc <CString::Replace(char const*, char const*)+0xb4>
    97e4:	ea000074 	b	99bc <CString::Replace(char const*, char const*)+0x274>
    97e8:	e2803001 	add	r3, r0, #1
    97ec:	e1570005 	cmp	r7, r5
    97f0:	e584300c 	str	r3, [r4, #12]
    97f4:	e5c0a000 	strb	sl, [r0]
    97f8:	0a000017 	beq	985c <CString::Replace(char const*, char const*)+0x114>
    97fc:	e594000c 	ldr	r0, [r4, #12]
    9800:	e5948004 	ldr	r8, [r4, #4]
    9804:	e5943008 	ldr	r3, [r4, #8]
    9808:	e0408008 	sub	r8, r0, r8
    980c:	e2882002 	add	r2, r8, #2
    9810:	e1520003 	cmp	r2, r3
    9814:	e0d5a0d1 	ldrsb	sl, [r5], #1
    9818:	9afffff2 	bls	97e8 <CString::Replace(char const*, char const*)+0xa0>
    981c:	e288b042 	add	fp, r8, #66	; 0x42
    9820:	e1a0000b 	mov	r0, fp
    9824:	eb000a30 	bl	c0ec <operator new[](unsigned int)>
    9828:	e3a02000 	mov	r2, #0
    982c:	e594300c 	ldr	r3, [r4, #12]
    9830:	e1a06000 	mov	r6, r0
    9834:	e5c32000 	strb	r2, [r3]
    9838:	e5941004 	ldr	r1, [r4, #4]
    983c:	eb00122a 	bl	e0ec <strcpy>
    9840:	e5940004 	ldr	r0, [r4, #4]
    9844:	e3500000 	cmp	r0, #0
    9848:	0a000000 	beq	9850 <CString::Replace(char const*, char const*)+0x108>
    984c:	eb000a28 	bl	c0f4 <operator delete[](void*)>
    9850:	e9840840 	stmib	r4, {r6, fp}
    9854:	e0860008 	add	r0, r6, r8
    9858:	eaffffe2 	b	97e8 <CString::Replace(char const*, char const*)+0xa0>
    985c:	e1a06007 	mov	r6, r7
    9860:	e2875001 	add	r5, r7, #1
    9864:	e1d930d1 	ldrsb	r3, [r9, #1]
    9868:	e2891001 	add	r1, r9, #1
    986c:	e3530000 	cmp	r3, #0
    9870:	0a00000c 	beq	98a8 <CString::Replace(char const*, char const*)+0x160>
    9874:	e1d720d1 	ldrsb	r2, [r7, #1]
    9878:	e1520003 	cmp	r2, r3
    987c:	1a000017 	bne	98e0 <CString::Replace(char const*, char const*)+0x198>
    9880:	e2873002 	add	r3, r7, #2
    9884:	ea000003 	b	9898 <CString::Replace(char const*, char const*)+0x150>
    9888:	e1d500d0 	ldrsb	r0, [r5]
    988c:	e2833001 	add	r3, r3, #1
    9890:	e1500002 	cmp	r0, r2
    9894:	1a000011 	bne	98e0 <CString::Replace(char const*, char const*)+0x198>
    9898:	e1f120d1 	ldrsb	r2, [r1, #1]!
    989c:	e1a05003 	mov	r5, r3
    98a0:	e3520000 	cmp	r2, #0
    98a4:	1afffff7 	bne	9888 <CString::Replace(char const*, char const*)+0x140>
    98a8:	e59d0008 	ldr	r0, [sp, #8]
    98ac:	eb0011a4 	bl	df44 <strlen>
    98b0:	e2506000 	subs	r6, r0, #0
    98b4:	e594000c 	ldr	r0, [r4, #12]
    98b8:	1a000015 	bne	9914 <CString::Replace(char const*, char const*)+0x1cc>
    98bc:	e59d1008 	ldr	r1, [sp, #8]
    98c0:	eb001209 	bl	e0ec <strcpy>
    98c4:	e594300c 	ldr	r3, [r4, #12]
    98c8:	e59d2004 	ldr	r2, [sp, #4]
    98cc:	e0833006 	add	r3, r3, r6
    98d0:	e2822001 	add	r2, r2, #1
    98d4:	e58d2004 	str	r2, [sp, #4]
    98d8:	e584300c 	str	r3, [r4, #12]
    98dc:	eaffffb9 	b	97c8 <CString::Replace(char const*, char const*)+0x80>
    98e0:	e594300c 	ldr	r3, [r4, #12]
    98e4:	e5945004 	ldr	r5, [r4, #4]
    98e8:	e5942008 	ldr	r2, [r4, #8]
    98ec:	e0435005 	sub	r5, r3, r5
    98f0:	e2851002 	add	r1, r5, #2
    98f4:	e1510002 	cmp	r1, r2
    98f8:	e1d680d0 	ldrsb	r8, [r6]
    98fc:	8a000031 	bhi	99c8 <CString::Replace(char const*, char const*)+0x280>
    9900:	e2832001 	add	r2, r3, #1
    9904:	e584200c 	str	r2, [r4, #12]
    9908:	e2865001 	add	r5, r6, #1
    990c:	e5c38000 	strb	r8, [r3]
    9910:	eaffffac 	b	97c8 <CString::Replace(char const*, char const*)+0x80>
    9914:	e594b004 	ldr	fp, [r4, #4]
    9918:	e5943008 	ldr	r3, [r4, #8]
    991c:	e040b00b 	sub	fp, r0, fp
    9920:	e086700b 	add	r7, r6, fp
    9924:	e2872001 	add	r2, r7, #1
    9928:	e1520003 	cmp	r2, r3
    992c:	9affffe2 	bls	98bc <CString::Replace(char const*, char const*)+0x174>
    9930:	e2877041 	add	r7, r7, #65	; 0x41
    9934:	e1a00007 	mov	r0, r7
    9938:	eb0009eb 	bl	c0ec <operator new[](unsigned int)>
    993c:	e3a02000 	mov	r2, #0
    9940:	e594300c 	ldr	r3, [r4, #12]
    9944:	e1a08000 	mov	r8, r0
    9948:	e5c32000 	strb	r2, [r3]
    994c:	e5941004 	ldr	r1, [r4, #4]
    9950:	eb0011e5 	bl	e0ec <strcpy>
    9954:	e5940004 	ldr	r0, [r4, #4]
    9958:	e3500000 	cmp	r0, #0
    995c:	0a000000 	beq	9964 <CString::Replace(char const*, char const*)+0x21c>
    9960:	eb0009e3 	bl	c0f4 <operator delete[](void*)>
    9964:	e088000b 	add	r0, r8, fp
    9968:	e584000c 	str	r0, [r4, #12]
    996c:	e5848004 	str	r8, [r4, #4]
    9970:	e5847008 	str	r7, [r4, #8]
    9974:	eaffffd0 	b	98bc <CString::Replace(char const*, char const*)+0x174>
    9978:	e1a00005 	mov	r0, r5
    997c:	eb001170 	bl	df44 <strlen>
    9980:	e2506000 	subs	r6, r0, #0
    9984:	e594000c 	ldr	r0, [r4, #12]
    9988:	1a00001e 	bne	9a08 <CString::Replace(char const*, char const*)+0x2c0>
    998c:	e1a01005 	mov	r1, r5
    9990:	eb0011d5 	bl	e0ec <strcpy>
    9994:	e3a02000 	mov	r2, #0
    9998:	e594300c 	ldr	r3, [r4, #12]
    999c:	e59d000c 	ldr	r0, [sp, #12]
    99a0:	e0831006 	add	r1, r3, r6
    99a4:	e584100c 	str	r1, [r4, #12]
    99a8:	e7c32006 	strb	r2, [r3, r6]
    99ac:	eb0009d0 	bl	c0f4 <operator delete[](void*)>
    99b0:	e59d0004 	ldr	r0, [sp, #4]
    99b4:	e28dd014 	add	sp, sp, #20
    99b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99bc:	e1a06005 	mov	r6, r5
    99c0:	e2875001 	add	r5, r7, #1
    99c4:	eaffffa6 	b	9864 <CString::Replace(char const*, char const*)+0x11c>
    99c8:	e285b042 	add	fp, r5, #66	; 0x42
    99cc:	e1a0000b 	mov	r0, fp
    99d0:	eb0009c5 	bl	c0ec <operator new[](unsigned int)>
    99d4:	e3a02000 	mov	r2, #0
    99d8:	e594300c 	ldr	r3, [r4, #12]
    99dc:	e1a07000 	mov	r7, r0
    99e0:	e5c32000 	strb	r2, [r3]
    99e4:	e5941004 	ldr	r1, [r4, #4]
    99e8:	eb0011bf 	bl	e0ec <strcpy>
    99ec:	e5940004 	ldr	r0, [r4, #4]
    99f0:	e3500000 	cmp	r0, #0
    99f4:	0a000000 	beq	99fc <CString::Replace(char const*, char const*)+0x2b4>
    99f8:	eb0009bd 	bl	c0f4 <operator delete[](void*)>
    99fc:	e9840880 	stmib	r4, {r7, fp}
    9a00:	e0873005 	add	r3, r7, r5
    9a04:	eaffffbd 	b	9900 <CString::Replace(char const*, char const*)+0x1b8>
    9a08:	e5948004 	ldr	r8, [r4, #4]
    9a0c:	e5942008 	ldr	r2, [r4, #8]
    9a10:	e0408008 	sub	r8, r0, r8
    9a14:	e0863008 	add	r3, r6, r8
    9a18:	e2831001 	add	r1, r3, #1
    9a1c:	e1510002 	cmp	r1, r2
    9a20:	9affffd9 	bls	998c <CString::Replace(char const*, char const*)+0x244>
    9a24:	e2839041 	add	r9, r3, #65	; 0x41
    9a28:	e1a00009 	mov	r0, r9
    9a2c:	eb0009ae 	bl	c0ec <operator new[](unsigned int)>
    9a30:	e594300c 	ldr	r3, [r4, #12]
    9a34:	e1a0b000 	mov	fp, r0
    9a38:	e5c37000 	strb	r7, [r3]
    9a3c:	e5941004 	ldr	r1, [r4, #4]
    9a40:	eb0011a9 	bl	e0ec <strcpy>
    9a44:	e5940004 	ldr	r0, [r4, #4]
    9a48:	e3500000 	cmp	r0, #0
    9a4c:	0a000000 	beq	9a54 <CString::Replace(char const*, char const*)+0x30c>
    9a50:	eb0009a7 	bl	c0f4 <operator delete[](void*)>
    9a54:	e08b0008 	add	r0, fp, r8
    9a58:	e584000c 	str	r0, [r4, #12]
    9a5c:	e584b004 	str	fp, [r4, #4]
    9a60:	e5849008 	str	r9, [r4, #8]
    9a64:	eaffffc8 	b	998c <CString::Replace(char const*, char const*)+0x244>

00009a68 <CString::PutChar(char, unsigned int)>:
    9a68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9a6c:	e2526000 	subs	r6, r2, #0
    9a70:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9a74:	e590c00c 	ldr	ip, [r0, #12]
    9a78:	e5905004 	ldr	r5, [r0, #4]
    9a7c:	e5902008 	ldr	r2, [r0, #8]
    9a80:	e04c5005 	sub	r5, ip, r5
    9a84:	e0863005 	add	r3, r6, r5
    9a88:	e1a08001 	mov	r8, r1
    9a8c:	e2831001 	add	r1, r3, #1
    9a90:	e1510002 	cmp	r1, r2
    9a94:	e1a07000 	mov	r7, r0
    9a98:	8a000008 	bhi	9ac0 <CString::PutChar(char, unsigned int)+0x58>
    9a9c:	e2463001 	sub	r3, r6, #1
    9aa0:	e2433001 	sub	r3, r3, #1
    9aa4:	e28c2001 	add	r2, ip, #1
    9aa8:	e3730001 	cmn	r3, #1
    9aac:	e587200c 	str	r2, [r7, #12]
    9ab0:	e5cc8000 	strb	r8, [ip]
    9ab4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9ab8:	e597c00c 	ldr	ip, [r7, #12]
    9abc:	eafffff7 	b	9aa0 <CString::PutChar(char, unsigned int)+0x38>
    9ac0:	e2839041 	add	r9, r3, #65	; 0x41
    9ac4:	e1a00009 	mov	r0, r9
    9ac8:	eb000987 	bl	c0ec <operator new[](unsigned int)>
    9acc:	e3a02000 	mov	r2, #0
    9ad0:	e597300c 	ldr	r3, [r7, #12]
    9ad4:	e1a04000 	mov	r4, r0
    9ad8:	e5c32000 	strb	r2, [r3]
    9adc:	e5971004 	ldr	r1, [r7, #4]
    9ae0:	eb001181 	bl	e0ec <strcpy>
    9ae4:	e5970004 	ldr	r0, [r7, #4]
    9ae8:	e3500000 	cmp	r0, #0
    9aec:	0a000000 	beq	9af4 <CString::PutChar(char, unsigned int)+0x8c>
    9af0:	eb00097f 	bl	c0f4 <operator delete[](void*)>
    9af4:	e9870210 	stmib	r7, {r4, r9}
    9af8:	e084c005 	add	ip, r4, r5
    9afc:	eaffffe6 	b	9a9c <CString::PutChar(char, unsigned int)+0x34>

00009b00 <CString::PutString(char const*)>:
    9b00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b04:	e1a04000 	mov	r4, r0
    9b08:	e1a00001 	mov	r0, r1
    9b0c:	e1a05001 	mov	r5, r1
    9b10:	eb00110b 	bl	df44 <strlen>
    9b14:	e2506000 	subs	r6, r0, #0
    9b18:	e594000c 	ldr	r0, [r4, #12]
    9b1c:	1a000005 	bne	9b38 <CString::PutString(char const*)+0x38>
    9b20:	e1a01005 	mov	r1, r5
    9b24:	eb001170 	bl	e0ec <strcpy>
    9b28:	e594000c 	ldr	r0, [r4, #12]
    9b2c:	e0800006 	add	r0, r0, r6
    9b30:	e584000c 	str	r0, [r4, #12]
    9b34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b38:	e5947004 	ldr	r7, [r4, #4]
    9b3c:	e5942008 	ldr	r2, [r4, #8]
    9b40:	e0407007 	sub	r7, r0, r7
    9b44:	e0863007 	add	r3, r6, r7
    9b48:	e2831001 	add	r1, r3, #1
    9b4c:	e1510002 	cmp	r1, r2
    9b50:	9afffff2 	bls	9b20 <CString::PutString(char const*)+0x20>
    9b54:	e2838041 	add	r8, r3, #65	; 0x41
    9b58:	e1a00008 	mov	r0, r8
    9b5c:	eb000962 	bl	c0ec <operator new[](unsigned int)>
    9b60:	e3a02000 	mov	r2, #0
    9b64:	e594300c 	ldr	r3, [r4, #12]
    9b68:	e1a09000 	mov	r9, r0
    9b6c:	e5c32000 	strb	r2, [r3]
    9b70:	e5941004 	ldr	r1, [r4, #4]
    9b74:	eb00115c 	bl	e0ec <strcpy>
    9b78:	e5940004 	ldr	r0, [r4, #4]
    9b7c:	e3500000 	cmp	r0, #0
    9b80:	0a000000 	beq	9b88 <CString::PutString(char const*)+0x88>
    9b84:	eb00095a 	bl	c0f4 <operator delete[](void*)>
    9b88:	e0890007 	add	r0, r9, r7
    9b8c:	e584000c 	str	r0, [r4, #12]
    9b90:	e5849004 	str	r9, [r4, #4]
    9b94:	e5848008 	str	r8, [r4, #8]
    9b98:	eaffffe0 	b	9b20 <CString::PutString(char const*)+0x20>

00009b9c <CString::ReserveSpace(unsigned int)>:
    9b9c:	e3510000 	cmp	r1, #0
    9ba0:	012fff1e 	bxeq	lr
    9ba4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ba8:	e990004c 	ldmib	r0, {r2, r3, r6}
    9bac:	e0466002 	sub	r6, r6, r2
    9bb0:	e0811006 	add	r1, r1, r6
    9bb4:	e2812001 	add	r2, r1, #1
    9bb8:	e1520003 	cmp	r2, r3
    9bbc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    9bc0:	e1a04000 	mov	r4, r0
    9bc4:	e2815041 	add	r5, r1, #65	; 0x41
    9bc8:	e1a00005 	mov	r0, r5
    9bcc:	eb000946 	bl	c0ec <operator new[](unsigned int)>
    9bd0:	e3a02000 	mov	r2, #0
    9bd4:	e594300c 	ldr	r3, [r4, #12]
    9bd8:	e1a07000 	mov	r7, r0
    9bdc:	e5c32000 	strb	r2, [r3]
    9be0:	e5941004 	ldr	r1, [r4, #4]
    9be4:	eb001140 	bl	e0ec <strcpy>
    9be8:	e5940004 	ldr	r0, [r4, #4]
    9bec:	e3500000 	cmp	r0, #0
    9bf0:	0a000000 	beq	9bf8 <CString::ReserveSpace(unsigned int)+0x5c>
    9bf4:	eb00093e 	bl	c0f4 <operator delete[](void*)>
    9bf8:	e0876006 	add	r6, r7, r6
    9bfc:	e584600c 	str	r6, [r4, #12]
    9c00:	e5847004 	str	r7, [r4, #4]
    9c04:	e5845008 	str	r5, [r4, #8]
    9c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009c0c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    9c0c:	e1510002 	cmp	r1, r2
    9c10:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c14:	e1a05001 	mov	r5, r1
    9c18:	e1a06002 	mov	r6, r2
    9c1c:	e1a09000 	mov	r9, r0
    9c20:	e1a07003 	mov	r7, r3
    9c24:	23a0a001 	movcs	sl, #1
    9c28:	3a000029 	bcc	9cd4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xc8>
    9c2c:	e00a0a96 	mul	sl, r6, sl
    9c30:	e1a00005 	mov	r0, r5
    9c34:	e1a0100a 	mov	r1, sl
    9c38:	eb0014e6 	bl	efd8 <__udivsi3>
    9c3c:	e1500006 	cmp	r0, r6
    9c40:	e1a04000 	mov	r4, r0
    9c44:	2afffff8 	bcs	9c2c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    9c48:	e3570000 	cmp	r7, #0
    9c4c:	13a08037 	movne	r8, #55	; 0x37
    9c50:	03a08057 	moveq	r8, #87	; 0x57
    9c54:	e1a07009 	mov	r7, r9
    9c58:	ea000009 	b	9c84 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x78>
    9c5c:	e4cb3001 	strb	r3, [fp], #1
    9c60:	e1a01006 	mov	r1, r6
    9c64:	eb0014db 	bl	efd8 <__udivsi3>
    9c68:	e250a000 	subs	sl, r0, #0
    9c6c:	0a000014 	beq	9cc4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb8>
    9c70:	e1a0100a 	mov	r1, sl
    9c74:	e1a00005 	mov	r0, r5
    9c78:	eb0014d6 	bl	efd8 <__udivsi3>
    9c7c:	e1a0700b 	mov	r7, fp
    9c80:	e1a04000 	mov	r4, r0
    9c84:	e1a00005 	mov	r0, r5
    9c88:	e1a0100a 	mov	r1, sl
    9c8c:	eb00150e 	bl	f0cc <__aeabi_uidivmod>
    9c90:	e3540009 	cmp	r4, #9
    9c94:	e6ef4074 	uxtb	r4, r4
    9c98:	e2843030 	add	r3, r4, #48	; 0x30
    9c9c:	e1a05001 	mov	r5, r1
    9ca0:	e1a0b007 	mov	fp, r7
    9ca4:	e1a0000a 	mov	r0, sl
    9ca8:	e0844008 	add	r4, r4, r8
    9cac:	9affffea 	bls	9c5c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    9cb0:	e4cb4001 	strb	r4, [fp], #1
    9cb4:	e1a01006 	mov	r1, r6
    9cb8:	eb0014c6 	bl	efd8 <__udivsi3>
    9cbc:	e250a000 	subs	sl, r0, #0
    9cc0:	1affffea 	bne	9c70 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x64>
    9cc4:	e3a03000 	mov	r3, #0
    9cc8:	e1a00009 	mov	r0, r9
    9ccc:	e5c73001 	strb	r3, [r7, #1]
    9cd0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cd4:	e1a04001 	mov	r4, r1
    9cd8:	e3a0a001 	mov	sl, #1
    9cdc:	eaffffd9 	b	9c48 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00009ce0 <CString::ftoa(char*, double, unsigned int)>:
    9ce0:	eeb50bc0 	vcmpe.f64	d0, #0.0
    9ce4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9ce8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cec:	ed9f7bdd 	vldr	d7, [pc, #884]	; a068 <CString::ftoa(char*, double, unsigned int)+0x388>
    9cf0:	ed2d8b02 	vpush	{d8}
    9cf4:	eeb08b40 	vmov.f64	d8, d0
    9cf8:	4eb18b40 	vnegmi.f64	d8, d0
    9cfc:	43a0302d 	movmi	r3, #45	; 0x2d
    9d00:	eeb48bc7 	vcmpe.f64	d8, d7
    9d04:	45c03000 	strbmi	r3, [r0]
    9d08:	42805001 	addmi	r5, r0, #1
    9d0c:	51a05000 	movpl	r5, r0
    9d10:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9d14:	e24dd024 	sub	sp, sp, #36	; 0x24
    9d18:	e1a08000 	mov	r8, r0
    9d1c:	e58d1004 	str	r1, [sp, #4]
    9d20:	ca0000bd 	bgt	a01c <CString::ftoa(char*, double, unsigned int)+0x33c>
    9d24:	eefc7bc8 	vcvt.u32.f64	s15, d8
    9d28:	ee174a90 	vmov	r4, s15
    9d2c:	e3540009 	cmp	r4, #9
    9d30:	83a0a001 	movhi	sl, #1
    9d34:	9a0000bf 	bls	a038 <CString::ftoa(char*, double, unsigned int)+0x358>
    9d38:	e08a210a 	add	r2, sl, sl, lsl #2
    9d3c:	e1a0a082 	lsl	sl, r2, #1
    9d40:	e1a0100a 	mov	r1, sl
    9d44:	e1a00004 	mov	r0, r4
    9d48:	eb0014a2 	bl	efd8 <__udivsi3>
    9d4c:	e3500009 	cmp	r0, #9
    9d50:	e1a06000 	mov	r6, r0
    9d54:	8afffff7 	bhi	9d38 <CString::ftoa(char*, double, unsigned int)+0x58>
    9d58:	e1a07005 	mov	r7, r5
    9d5c:	e1a0b004 	mov	fp, r4
    9d60:	e59f9310 	ldr	r9, [pc, #784]	; a078 <CString::ftoa(char*, double, unsigned int)+0x398>
    9d64:	ea000007 	b	9d88 <CString::ftoa(char*, double, unsigned int)+0xa8>
    9d68:	e1b0a1a3 	lsrs	sl, r3, #3
    9d6c:	e4cc0001 	strb	r0, [ip], #1
    9d70:	0a000012 	beq	9dc0 <CString::ftoa(char*, double, unsigned int)+0xe0>
    9d74:	e1a0100a 	mov	r1, sl
    9d78:	e1a0000b 	mov	r0, fp
    9d7c:	e1a0700c 	mov	r7, ip
    9d80:	eb001494 	bl	efd8 <__udivsi3>
    9d84:	e1a06000 	mov	r6, r0
    9d88:	e1a0000b 	mov	r0, fp
    9d8c:	e1a0100a 	mov	r1, sl
    9d90:	eb0014cd 	bl	f0cc <__aeabi_uidivmod>
    9d94:	e6ef3076 	uxtb	r3, r6
    9d98:	e3560009 	cmp	r6, #9
    9d9c:	e1a0b001 	mov	fp, r1
    9da0:	e2830030 	add	r0, r3, #48	; 0x30
    9da4:	e2831057 	add	r1, r3, #87	; 0x57
    9da8:	e1a0c007 	mov	ip, r7
    9dac:	e083299a 	umull	r2, r3, sl, r9
    9db0:	9affffec 	bls	9d68 <CString::ftoa(char*, double, unsigned int)+0x88>
    9db4:	e1b0a1a3 	lsrs	sl, r3, #3
    9db8:	e4cc1001 	strb	r1, [ip], #1
    9dbc:	1affffec 	bne	9d74 <CString::ftoa(char*, double, unsigned int)+0x94>
    9dc0:	e3a03000 	mov	r3, #0
    9dc4:	e59d2004 	ldr	r2, [sp, #4]
    9dc8:	e5c73001 	strb	r3, [r7, #1]
    9dcc:	e1520003 	cmp	r2, r3
    9dd0:	1a000003 	bne	9de4 <CString::ftoa(char*, double, unsigned int)+0x104>
    9dd4:	e1a00008 	mov	r0, r8
    9dd8:	e28dd024 	add	sp, sp, #36	; 0x24
    9ddc:	ecbd8b02 	vpop	{d8}
    9de0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9de4:	e1a00005 	mov	r0, r5
    9de8:	eb001055 	bl	df44 <strlen>
    9dec:	e3a0302e 	mov	r3, #46	; 0x2e
    9df0:	e1a01000 	mov	r1, r0
    9df4:	e59d2004 	ldr	r2, [sp, #4]
    9df8:	e58d0008 	str	r0, [sp, #8]
    9dfc:	e3520009 	cmp	r2, #9
    9e00:	e0850000 	add	r0, r5, r0
    9e04:	31a07002 	movcc	r7, r2
    9e08:	23a07009 	movcs	r7, #9
    9e0c:	e7c53001 	strb	r3, [r5, r1]
    9e10:	e3520001 	cmp	r2, #1
    9e14:	e2803001 	add	r3, r0, #1
    9e18:	e58d000c 	str	r0, [sp, #12]
    9e1c:	e58d3004 	str	r3, [sp, #4]
    9e20:	9a00008b 	bls	a054 <CString::ftoa(char*, double, unsigned int)+0x374>
    9e24:	e3a02002 	mov	r2, #2
    9e28:	e3a0300a 	mov	r3, #10
    9e2c:	e2822001 	add	r2, r2, #1
    9e30:	e0833103 	add	r3, r3, r3, lsl #2
    9e34:	e1520007 	cmp	r2, r7
    9e38:	e1a03083 	lsl	r3, r3, #1
    9e3c:	9afffffa 	bls	9e2c <CString::ftoa(char*, double, unsigned int)+0x14c>
    9e40:	ee073a90 	vmov	s15, r3
    9e44:	eeb87b67 	vcvt.f64.u32	d7, s15
    9e48:	ee064a90 	vmov	s13, r4
    9e4c:	eeb86b66 	vcvt.f64.u32	d6, s13
    9e50:	ee386b46 	vsub.f64	d6, d8, d6
    9e54:	ee267b07 	vmul.f64	d7, d6, d7
    9e58:	eefc7bc7 	vcvt.u32.f64	s15, d7
    9e5c:	ee17ba90 	vmov	fp, s15
    9e60:	e35b0009 	cmp	fp, #9
    9e64:	83a04001 	movhi	r4, #1
    9e68:	9a00007b 	bls	a05c <CString::ftoa(char*, double, unsigned int)+0x37c>
    9e6c:	e0844104 	add	r4, r4, r4, lsl #2
    9e70:	e1a04084 	lsl	r4, r4, #1
    9e74:	e1a01004 	mov	r1, r4
    9e78:	e1a0000b 	mov	r0, fp
    9e7c:	eb001455 	bl	efd8 <__udivsi3>
    9e80:	e3500009 	cmp	r0, #9
    9e84:	e1a0a000 	mov	sl, r0
    9e88:	8afffff7 	bhi	9e6c <CString::ftoa(char*, double, unsigned int)+0x18c>
    9e8c:	e28d6014 	add	r6, sp, #20
    9e90:	e59f91e0 	ldr	r9, [pc, #480]	; a078 <CString::ftoa(char*, double, unsigned int)+0x398>
    9e94:	ea000007 	b	9eb8 <CString::ftoa(char*, double, unsigned int)+0x1d8>
    9e98:	e1b041a1 	lsrs	r4, r1, #3
    9e9c:	e4cce001 	strb	lr, [ip], #1
    9ea0:	0a000012 	beq	9ef0 <CString::ftoa(char*, double, unsigned int)+0x210>
    9ea4:	e1a01004 	mov	r1, r4
    9ea8:	e1a0000b 	mov	r0, fp
    9eac:	e1a0600c 	mov	r6, ip
    9eb0:	eb001448 	bl	efd8 <__udivsi3>
    9eb4:	e1a0a000 	mov	sl, r0
    9eb8:	e1a0000b 	mov	r0, fp
    9ebc:	e1a01004 	mov	r1, r4
    9ec0:	eb001481 	bl	f0cc <__aeabi_uidivmod>
    9ec4:	e6ef307a 	uxtb	r3, sl
    9ec8:	e35a0009 	cmp	sl, #9
    9ecc:	e1a0b001 	mov	fp, r1
    9ed0:	e283e030 	add	lr, r3, #48	; 0x30
    9ed4:	e1a0c006 	mov	ip, r6
    9ed8:	e0810994 	umull	r0, r1, r4, r9
    9edc:	e2833057 	add	r3, r3, #87	; 0x57
    9ee0:	9affffec 	bls	9e98 <CString::ftoa(char*, double, unsigned int)+0x1b8>
    9ee4:	e1b041a1 	lsrs	r4, r1, #3
    9ee8:	e4cc3001 	strb	r3, [ip], #1
    9eec:	1affffec 	bne	9ea4 <CString::ftoa(char*, double, unsigned int)+0x1c4>
    9ef0:	e3a03000 	mov	r3, #0
    9ef4:	e28d0014 	add	r0, sp, #20
    9ef8:	e5c63001 	strb	r3, [r6, #1]
    9efc:	eb001010 	bl	df44 <strlen>
    9f00:	e0470000 	sub	r0, r7, r0
    9f04:	e3500000 	cmp	r0, #0
    9f08:	e240c001 	sub	ip, r0, #1
    9f0c:	0a00003b 	beq	a000 <CString::ftoa(char*, double, unsigned int)+0x320>
    9f10:	e59d3008 	ldr	r3, [sp, #8]
    9f14:	e2831001 	add	r1, r3, #1
    9f18:	e0852001 	add	r2, r5, r1
    9f1c:	e2622000 	rsb	r2, r2, #0
    9f20:	e2022003 	and	r2, r2, #3
    9f24:	e2823003 	add	r3, r2, #3
    9f28:	e3530005 	cmp	r3, #5
    9f2c:	33a03005 	movcc	r3, #5
    9f30:	e15c0003 	cmp	ip, r3
    9f34:	3a000042 	bcc	a044 <CString::ftoa(char*, double, unsigned int)+0x364>
    9f38:	e3520000 	cmp	r2, #0
    9f3c:	0a000042 	beq	a04c <CString::ftoa(char*, double, unsigned int)+0x36c>
    9f40:	e3a03030 	mov	r3, #48	; 0x30
    9f44:	e59d400c 	ldr	r4, [sp, #12]
    9f48:	e3520001 	cmp	r2, #1
    9f4c:	e5c43001 	strb	r3, [r4, #1]
    9f50:	e284e002 	add	lr, r4, #2
    9f54:	e240c002 	sub	ip, r0, #2
    9f58:	0a000006 	beq	9f78 <CString::ftoa(char*, double, unsigned int)+0x298>
    9f5c:	e3520003 	cmp	r2, #3
    9f60:	e5c43002 	strb	r3, [r4, #2]
    9f64:	e284e003 	add	lr, r4, #3
    9f68:	e240c003 	sub	ip, r0, #3
    9f6c:	05c43003 	strbeq	r3, [r4, #3]
    9f70:	0284e004 	addeq	lr, r4, #4
    9f74:	0240c004 	subeq	ip, r0, #4
    9f78:	e3a03000 	mov	r3, #0
    9f7c:	e0821001 	add	r1, r2, r1
    9f80:	e59f40f4 	ldr	r4, [pc, #244]	; a07c <CString::ftoa(char*, double, unsigned int)+0x39c>
    9f84:	e0402002 	sub	r2, r0, r2
    9f88:	e0855001 	add	r5, r5, r1
    9f8c:	e1a01122 	lsr	r1, r2, #2
    9f90:	e2833001 	add	r3, r3, #1
    9f94:	e1530001 	cmp	r3, r1
    9f98:	e4854004 	str	r4, [r5], #4
    9f9c:	3afffffb 	bcc	9f90 <CString::ftoa(char*, double, unsigned int)+0x2b0>
    9fa0:	e3c21003 	bic	r1, r2, #3
    9fa4:	e1520001 	cmp	r2, r1
    9fa8:	e08e3001 	add	r3, lr, r1
    9fac:	e04cc001 	sub	ip, ip, r1
    9fb0:	0a00000f 	beq	9ff4 <CString::ftoa(char*, double, unsigned int)+0x314>
    9fb4:	e3a02030 	mov	r2, #48	; 0x30
    9fb8:	e35c0000 	cmp	ip, #0
    9fbc:	e5c32000 	strb	r2, [r3]
    9fc0:	0a00000b 	beq	9ff4 <CString::ftoa(char*, double, unsigned int)+0x314>
    9fc4:	e35c0001 	cmp	ip, #1
    9fc8:	e5c32001 	strb	r2, [r3, #1]
    9fcc:	0a000008 	beq	9ff4 <CString::ftoa(char*, double, unsigned int)+0x314>
    9fd0:	e35c0002 	cmp	ip, #2
    9fd4:	e5c32002 	strb	r2, [r3, #2]
    9fd8:	0a000005 	beq	9ff4 <CString::ftoa(char*, double, unsigned int)+0x314>
    9fdc:	e35c0003 	cmp	ip, #3
    9fe0:	e5c32003 	strb	r2, [r3, #3]
    9fe4:	0a000002 	beq	9ff4 <CString::ftoa(char*, double, unsigned int)+0x314>
    9fe8:	e35c0004 	cmp	ip, #4
    9fec:	e5c32004 	strb	r2, [r3, #4]
    9ff0:	15c32005 	strbne	r2, [r3, #5]
    9ff4:	e59d3004 	ldr	r3, [sp, #4]
    9ff8:	e0833000 	add	r3, r3, r0
    9ffc:	e58d3004 	str	r3, [sp, #4]
    a000:	e28d1014 	add	r1, sp, #20
    a004:	e59d0004 	ldr	r0, [sp, #4]
    a008:	eb001037 	bl	e0ec <strcpy>
    a00c:	e1a00008 	mov	r0, r8
    a010:	e28dd024 	add	sp, sp, #36	; 0x24
    a014:	ecbd8b02 	vpop	{d8}
    a018:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a01c:	e1a00005 	mov	r0, r5
    a020:	e59f1058 	ldr	r1, [pc, #88]	; a080 <CString::ftoa(char*, double, unsigned int)+0x3a0>
    a024:	eb001030 	bl	e0ec <strcpy>
    a028:	e1a00008 	mov	r0, r8
    a02c:	e28dd024 	add	sp, sp, #36	; 0x24
    a030:	ecbd8b02 	vpop	{d8}
    a034:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a038:	ee176a90 	vmov	r6, s15
    a03c:	e3a0a001 	mov	sl, #1
    a040:	eaffff44 	b	9d58 <CString::ftoa(char*, double, unsigned int)+0x78>
    a044:	e59d3004 	ldr	r3, [sp, #4]
    a048:	eaffffd9 	b	9fb4 <CString::ftoa(char*, double, unsigned int)+0x2d4>
    a04c:	e59de004 	ldr	lr, [sp, #4]
    a050:	eaffffc8 	b	9f78 <CString::ftoa(char*, double, unsigned int)+0x298>
    a054:	ed9f7b05 	vldr	d7, [pc, #20]	; a070 <CString::ftoa(char*, double, unsigned int)+0x390>
    a058:	eaffff7a 	b	9e48 <CString::ftoa(char*, double, unsigned int)+0x168>
    a05c:	ee17aa90 	vmov	sl, s15
    a060:	e3a04001 	mov	r4, #1
    a064:	eaffff88 	b	9e8c <CString::ftoa(char*, double, unsigned int)+0x1ac>
    a068:	ffe00000 	.word	0xffe00000
    a06c:	41efffff 	.word	0x41efffff
    a070:	00000000 	.word	0x00000000
    a074:	40240000 	.word	0x40240000
    a078:	cccccccd 	.word	0xcccccccd
    a07c:	30303030 	.word	0x30303030
    a080:	000132f8 	.word	0x000132f8

0000a084 <CString::FormatV(char const*, std::__va_list)>:
    a084:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a088:	e1a0b000 	mov	fp, r0
    a08c:	e5900004 	ldr	r0, [r0, #4]
    a090:	e24dd034 	sub	sp, sp, #52	; 0x34
    a094:	e3500000 	cmp	r0, #0
    a098:	e1a0a001 	mov	sl, r1
    a09c:	e1a09002 	mov	r9, r2
    a0a0:	0a000000 	beq	a0a8 <CString::FormatV(char const*, std::__va_list)+0x24>
    a0a4:	eb000812 	bl	c0f4 <operator delete[](void*)>
    a0a8:	e3a00040 	mov	r0, #64	; 0x40
    a0ac:	e58b0008 	str	r0, [fp, #8]
    a0b0:	eb00080d 	bl	c0ec <operator new[](unsigned int)>
    a0b4:	e58b0004 	str	r0, [fp, #4]
    a0b8:	e58b000c 	str	r0, [fp, #12]
    a0bc:	e1da40d0 	ldrsb	r4, [sl]
    a0c0:	e3540000 	cmp	r4, #0
    a0c4:	0a00005e 	beq	a244 <CString::FormatV(char const*, std::__va_list)+0x1c0>
    a0c8:	e3540025 	cmp	r4, #37	; 0x25
    a0cc:	e28a5001 	add	r5, sl, #1
    a0d0:	1a00004f 	bne	a214 <CString::FormatV(char const*, std::__va_list)+0x190>
    a0d4:	e1da70d1 	ldrsb	r7, [sl, #1]
    a0d8:	e3570025 	cmp	r7, #37	; 0x25
    a0dc:	0a000186 	beq	a6fc <CString::FormatV(char const*, std::__va_list)+0x678>
    a0e0:	e357002d 	cmp	r7, #45	; 0x2d
    a0e4:	03a03001 	moveq	r3, #1
    a0e8:	13a03000 	movne	r3, #0
    a0ec:	01da70d2 	ldrsbeq	r7, [sl, #2]
    a0f0:	028a5002 	addeq	r5, sl, #2
    a0f4:	e3570030 	cmp	r7, #48	; 0x30
    a0f8:	e58d3008 	str	r3, [sp, #8]
    a0fc:	13a03000 	movne	r3, #0
    a100:	03a02001 	moveq	r2, #1
    a104:	01d570d1 	ldrsbeq	r7, [r5, #1]
    a108:	02853002 	addeq	r3, r5, #2
    a10c:	e285a001 	add	sl, r5, #1
    a110:	01a0500a 	moveq	r5, sl
    a114:	158d300c 	strne	r3, [sp, #12]
    a118:	01a0a003 	moveq	sl, r3
    a11c:	e2473030 	sub	r3, r7, #48	; 0x30
    a120:	e6ef3073 	uxtb	r3, r3
    a124:	058d200c 	streq	r2, [sp, #12]
    a128:	e3530009 	cmp	r3, #9
    a12c:	93a04000 	movls	r4, #0
    a130:	9a000001 	bls	a13c <CString::FormatV(char const*, std::__va_list)+0xb8>
    a134:	ea00006c 	b	a2ec <CString::FormatV(char const*, std::__va_list)+0x268>
    a138:	e1a05006 	mov	r5, r6
    a13c:	e0844104 	add	r4, r4, r4, lsl #2
    a140:	e0874084 	add	r4, r7, r4, lsl #1
    a144:	e1d570d1 	ldrsb	r7, [r5, #1]
    a148:	e2444030 	sub	r4, r4, #48	; 0x30
    a14c:	e2473030 	sub	r3, r7, #48	; 0x30
    a150:	e6ef3073 	uxtb	r3, r3
    a154:	e3530009 	cmp	r3, #9
    a158:	e2856001 	add	r6, r5, #1
    a15c:	9afffff5 	bls	a138 <CString::FormatV(char const*, std::__va_list)+0xb4>
    a160:	e285a002 	add	sl, r5, #2
    a164:	e357002e 	cmp	r7, #46	; 0x2e
    a168:	13a01006 	movne	r1, #6
    a16c:	0a000038 	beq	a254 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    a170:	e357006c 	cmp	r7, #108	; 0x6c
    a174:	01d670d1 	ldrsbeq	r7, [r6, #1]
    a178:	01a0600a 	moveq	r6, sl
    a17c:	e2473058 	sub	r3, r7, #88	; 0x58
    a180:	028aa001 	addeq	sl, sl, #1
    a184:	e3530020 	cmp	r3, #32
    a188:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a18c:	ea000147 	b	a6b0 <CString::FormatV(char const*, std::__va_list)+0x62c>
    a190:	0000a65c 	.word	0x0000a65c
    a194:	0000a6b0 	.word	0x0000a6b0
    a198:	0000a6b0 	.word	0x0000a6b0
    a19c:	0000a6b0 	.word	0x0000a6b0
    a1a0:	0000a6b0 	.word	0x0000a6b0
    a1a4:	0000a6b0 	.word	0x0000a6b0
    a1a8:	0000a6b0 	.word	0x0000a6b0
    a1ac:	0000a6b0 	.word	0x0000a6b0
    a1b0:	0000a6b0 	.word	0x0000a6b0
    a1b4:	0000a6b0 	.word	0x0000a6b0
    a1b8:	0000a6b0 	.word	0x0000a6b0
    a1bc:	0000a664 	.word	0x0000a664
    a1c0:	0000a490 	.word	0x0000a490
    a1c4:	0000a6b0 	.word	0x0000a6b0
    a1c8:	0000a424 	.word	0x0000a424
    a1cc:	0000a6b0 	.word	0x0000a6b0
    a1d0:	0000a6b0 	.word	0x0000a6b0
    a1d4:	0000a490 	.word	0x0000a490
    a1d8:	0000a6b0 	.word	0x0000a6b0
    a1dc:	0000a6b0 	.word	0x0000a6b0
    a1e0:	0000a6b0 	.word	0x0000a6b0
    a1e4:	0000a6b0 	.word	0x0000a6b0
    a1e8:	0000a6b0 	.word	0x0000a6b0
    a1ec:	0000a2f8 	.word	0x0000a2f8
    a1f0:	0000a65c 	.word	0x0000a65c
    a1f4:	0000a6b0 	.word	0x0000a6b0
    a1f8:	0000a6b0 	.word	0x0000a6b0
    a1fc:	0000a608 	.word	0x0000a608
    a200:	0000a6b0 	.word	0x0000a6b0
    a204:	0000a41c 	.word	0x0000a41c
    a208:	0000a6b0 	.word	0x0000a6b0
    a20c:	0000a6b0 	.word	0x0000a6b0
    a210:	0000a65c 	.word	0x0000a65c
    a214:	e99b000e 	ldmib	fp, {r1, r2, r3}
    a218:	e0437001 	sub	r7, r3, r1
    a21c:	e2871002 	add	r1, r7, #2
    a220:	e1510002 	cmp	r1, r2
    a224:	8a000020 	bhi	a2ac <CString::FormatV(char const*, std::__va_list)+0x228>
    a228:	e1a0a005 	mov	sl, r5
    a22c:	e2832001 	add	r2, r3, #1
    a230:	e58b200c 	str	r2, [fp, #12]
    a234:	e5c34000 	strb	r4, [r3]
    a238:	e1da40d0 	ldrsb	r4, [sl]
    a23c:	e3540000 	cmp	r4, #0
    a240:	1affffa0 	bne	a0c8 <CString::FormatV(char const*, std::__va_list)+0x44>
    a244:	e59b300c 	ldr	r3, [fp, #12]
    a248:	e5c34000 	strb	r4, [r3]
    a24c:	e28dd034 	add	sp, sp, #52	; 0x34
    a250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a254:	e1d670d1 	ldrsb	r7, [r6, #1]
    a258:	e2473030 	sub	r3, r7, #48	; 0x30
    a25c:	e6ef3073 	uxtb	r3, r3
    a260:	e3530009 	cmp	r3, #9
    a264:	81a0600a 	movhi	r6, sl
    a268:	83a01000 	movhi	r1, #0
    a26c:	828aa001 	addhi	sl, sl, #1
    a270:	93a01000 	movls	r1, #0
    a274:	9a000001 	bls	a280 <CString::FormatV(char const*, std::__va_list)+0x1fc>
    a278:	eaffffbc 	b	a170 <CString::FormatV(char const*, std::__va_list)+0xec>
    a27c:	e1a0a006 	mov	sl, r6
    a280:	e0811101 	add	r1, r1, r1, lsl #2
    a284:	e0871081 	add	r1, r7, r1, lsl #1
    a288:	e1da70d1 	ldrsb	r7, [sl, #1]
    a28c:	e2411030 	sub	r1, r1, #48	; 0x30
    a290:	e2473030 	sub	r3, r7, #48	; 0x30
    a294:	e6ef3073 	uxtb	r3, r3
    a298:	e3530009 	cmp	r3, #9
    a29c:	e28a6001 	add	r6, sl, #1
    a2a0:	9afffff5 	bls	a27c <CString::FormatV(char const*, std::__va_list)+0x1f8>
    a2a4:	e28aa002 	add	sl, sl, #2
    a2a8:	eaffffb0 	b	a170 <CString::FormatV(char const*, std::__va_list)+0xec>
    a2ac:	e2878042 	add	r8, r7, #66	; 0x42
    a2b0:	e1a00008 	mov	r0, r8
    a2b4:	eb00078c 	bl	c0ec <operator new[](unsigned int)>
    a2b8:	e3a02000 	mov	r2, #0
    a2bc:	e59b300c 	ldr	r3, [fp, #12]
    a2c0:	e1a06000 	mov	r6, r0
    a2c4:	e5c32000 	strb	r2, [r3]
    a2c8:	e59b1004 	ldr	r1, [fp, #4]
    a2cc:	eb000f86 	bl	e0ec <strcpy>
    a2d0:	e59b0004 	ldr	r0, [fp, #4]
    a2d4:	e3500000 	cmp	r0, #0
    a2d8:	0a000000 	beq	a2e0 <CString::FormatV(char const*, std::__va_list)+0x25c>
    a2dc:	eb000784 	bl	c0f4 <operator delete[](void*)>
    a2e0:	e98b0140 	stmib	fp, {r6, r8}
    a2e4:	e0863007 	add	r3, r6, r7
    a2e8:	eaffffce 	b	a228 <CString::FormatV(char const*, std::__va_list)+0x1a4>
    a2ec:	e1a06005 	mov	r6, r5
    a2f0:	e3a04000 	mov	r4, #0
    a2f4:	eaffff9a 	b	a164 <CString::FormatV(char const*, std::__va_list)+0xe0>
    a2f8:	e3a06008 	mov	r6, #8
    a2fc:	e5995000 	ldr	r5, [r9]
    a300:	e2893004 	add	r3, r9, #4
    a304:	e1550006 	cmp	r5, r6
    a308:	e58d3014 	str	r3, [sp, #20]
    a30c:	23a08001 	movcs	r8, #1
    a310:	3a0001dc 	bcc	aa88 <CString::FormatV(char const*, std::__va_list)+0xa04>
    a314:	e0080896 	mul	r8, r6, r8
    a318:	e1a00005 	mov	r0, r5
    a31c:	e1a01008 	mov	r1, r8
    a320:	eb00132c 	bl	efd8 <__udivsi3>
    a324:	e1560000 	cmp	r6, r0
    a328:	9afffff9 	bls	a314 <CString::FormatV(char const*, std::__va_list)+0x290>
    a32c:	e1a09000 	mov	r9, r0
    a330:	e3570058 	cmp	r7, #88	; 0x58
    a334:	13a03057 	movne	r3, #87	; 0x57
    a338:	03a03037 	moveq	r3, #55	; 0x37
    a33c:	e28d7018 	add	r7, sp, #24
    a340:	e58d4010 	str	r4, [sp, #16]
    a344:	e58d7004 	str	r7, [sp, #4]
    a348:	e1a04008 	mov	r4, r8
    a34c:	e1a08006 	mov	r8, r6
    a350:	e1a06003 	mov	r6, r3
    a354:	ea000009 	b	a380 <CString::FormatV(char const*, std::__va_list)+0x2fc>
    a358:	e4c91001 	strb	r1, [r9], #1
    a35c:	e1a01008 	mov	r1, r8
    a360:	eb00131c 	bl	efd8 <__udivsi3>
    a364:	e2504000 	subs	r4, r0, #0
    a368:	0a000014 	beq	a3c0 <CString::FormatV(char const*, std::__va_list)+0x33c>
    a36c:	e1a01004 	mov	r1, r4
    a370:	e1a00005 	mov	r0, r5
    a374:	eb001317 	bl	efd8 <__udivsi3>
    a378:	e1a07009 	mov	r7, r9
    a37c:	e1a09000 	mov	r9, r0
    a380:	e1a00005 	mov	r0, r5
    a384:	e1a01004 	mov	r1, r4
    a388:	eb00134f 	bl	f0cc <__aeabi_uidivmod>
    a38c:	e6ef0079 	uxtb	r0, r9
    a390:	e3590009 	cmp	r9, #9
    a394:	e1a05001 	mov	r5, r1
    a398:	e0802006 	add	r2, r0, r6
    a39c:	e2801030 	add	r1, r0, #48	; 0x30
    a3a0:	e1a09007 	mov	r9, r7
    a3a4:	e1a00004 	mov	r0, r4
    a3a8:	9affffea 	bls	a358 <CString::FormatV(char const*, std::__va_list)+0x2d4>
    a3ac:	e4c92001 	strb	r2, [r9], #1
    a3b0:	e1a01008 	mov	r1, r8
    a3b4:	eb001307 	bl	efd8 <__udivsi3>
    a3b8:	e2504000 	subs	r4, r0, #0
    a3bc:	1affffea 	bne	a36c <CString::FormatV(char const*, std::__va_list)+0x2e8>
    a3c0:	e3a03000 	mov	r3, #0
    a3c4:	e59d0004 	ldr	r0, [sp, #4]
    a3c8:	e5c73001 	strb	r3, [r7, #1]
    a3cc:	e59d4010 	ldr	r4, [sp, #16]
    a3d0:	eb000edb 	bl	df44 <strlen>
    a3d4:	e59d3008 	ldr	r3, [sp, #8]
    a3d8:	e1a05000 	mov	r5, r0
    a3dc:	e3530000 	cmp	r3, #0
    a3e0:	1a0000d0 	bne	a728 <CString::FormatV(char const*, std::__va_list)+0x6a4>
    a3e4:	e1500004 	cmp	r0, r4
    a3e8:	3a0000f6 	bcc	a7c8 <CString::FormatV(char const*, std::__va_list)+0x744>
    a3ec:	e59d0004 	ldr	r0, [sp, #4]
    a3f0:	eb000ed3 	bl	df44 <strlen>
    a3f4:	e2504000 	subs	r4, r0, #0
    a3f8:	059b000c 	ldreq	r0, [fp, #12]
    a3fc:	1a0000d7 	bne	a760 <CString::FormatV(char const*, std::__va_list)+0x6dc>
    a400:	e59d1004 	ldr	r1, [sp, #4]
    a404:	eb000f38 	bl	e0ec <strcpy>
    a408:	e59b300c 	ldr	r3, [fp, #12]
    a40c:	e59d9014 	ldr	r9, [sp, #20]
    a410:	e0833004 	add	r3, r3, r4
    a414:	e58b300c 	str	r3, [fp, #12]
    a418:	eaffff27 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a41c:	e3a0600a 	mov	r6, #10
    a420:	eaffffb5 	b	a2fc <CString::FormatV(char const*, std::__va_list)+0x278>
    a424:	e2899007 	add	r9, r9, #7
    a428:	e28d5018 	add	r5, sp, #24
    a42c:	e3c99007 	bic	r9, r9, #7
    a430:	ed990b00 	vldr	d0, [r9]
    a434:	e1a00005 	mov	r0, r5
    a438:	e58d5004 	str	r5, [sp, #4]
    a43c:	ebfffe27 	bl	9ce0 <CString::ftoa(char*, double, unsigned int)>
    a440:	e1a00005 	mov	r0, r5
    a444:	eb000ebe 	bl	df44 <strlen>
    a448:	e59d3008 	ldr	r3, [sp, #8]
    a44c:	e2899008 	add	r9, r9, #8
    a450:	e3530000 	cmp	r3, #0
    a454:	e1a08000 	mov	r8, r0
    a458:	1a0001d7 	bne	abbc <CString::FormatV(char const*, std::__va_list)+0xb38>
    a45c:	e1500004 	cmp	r0, r4
    a460:	3a000233 	bcc	ad34 <CString::FormatV(char const*, std::__va_list)+0xcb0>
    a464:	e59d0004 	ldr	r0, [sp, #4]
    a468:	eb000eb5 	bl	df44 <strlen>
    a46c:	e2504000 	subs	r4, r0, #0
    a470:	059b000c 	ldreq	r0, [fp, #12]
    a474:	1a00013e 	bne	a974 <CString::FormatV(char const*, std::__va_list)+0x8f0>
    a478:	e59d1004 	ldr	r1, [sp, #4]
    a47c:	eb000f1a 	bl	e0ec <strcpy>
    a480:	e59b300c 	ldr	r3, [fp, #12]
    a484:	e0833004 	add	r3, r3, r4
    a488:	e58b300c 	str	r3, [fp, #12]
    a48c:	eaffff0a 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a490:	e5996000 	ldr	r6, [r9]
    a494:	e2893004 	add	r3, r9, #4
    a498:	e3560000 	cmp	r6, #0
    a49c:	b2666000 	rsblt	r6, r6, #0
    a4a0:	b3a07001 	movlt	r7, #1
    a4a4:	a3a07000 	movge	r7, #0
    a4a8:	e3560009 	cmp	r6, #9
    a4ac:	e58d3010 	str	r3, [sp, #16]
    a4b0:	e1a05006 	mov	r5, r6
    a4b4:	c3a09001 	movgt	r9, #1
    a4b8:	da00021a 	ble	ad28 <CString::FormatV(char const*, std::__va_list)+0xca4>
    a4bc:	e0899109 	add	r9, r9, r9, lsl #2
    a4c0:	e1a09089 	lsl	r9, r9, #1
    a4c4:	e1a01009 	mov	r1, r9
    a4c8:	e1a00006 	mov	r0, r6
    a4cc:	eb0012c1 	bl	efd8 <__udivsi3>
    a4d0:	e3500009 	cmp	r0, #9
    a4d4:	8afffff8 	bhi	a4bc <CString::FormatV(char const*, std::__va_list)+0x438>
    a4d8:	e1a08000 	mov	r8, r0
    a4dc:	e28d6018 	add	r6, sp, #24
    a4e0:	e58d6004 	str	r6, [sp, #4]
    a4e4:	ea000007 	b	a508 <CString::FormatV(char const*, std::__va_list)+0x484>
    a4e8:	e1b091a3 	lsrs	r9, r3, #3
    a4ec:	e4cc1001 	strb	r1, [ip], #1
    a4f0:	0a000013 	beq	a544 <CString::FormatV(char const*, std::__va_list)+0x4c0>
    a4f4:	e1a01009 	mov	r1, r9
    a4f8:	e1a00005 	mov	r0, r5
    a4fc:	e1a0600c 	mov	r6, ip
    a500:	eb0012b4 	bl	efd8 <__udivsi3>
    a504:	e1a08000 	mov	r8, r0
    a508:	e1a00005 	mov	r0, r5
    a50c:	e1a01009 	mov	r1, r9
    a510:	eb0012ed 	bl	f0cc <__aeabi_uidivmod>
    a514:	e59f3f2c 	ldr	r3, [pc, #3884]	; b448 <CString::FormatV(char const*, std::__va_list)+0x13c4>
    a518:	e6ef0078 	uxtb	r0, r8
    a51c:	e3580009 	cmp	r8, #9
    a520:	e1a05001 	mov	r5, r1
    a524:	e1a0c006 	mov	ip, r6
    a528:	e2801030 	add	r1, r0, #48	; 0x30
    a52c:	e0832399 	umull	r2, r3, r9, r3
    a530:	e2800057 	add	r0, r0, #87	; 0x57
    a534:	9affffeb 	bls	a4e8 <CString::FormatV(char const*, std::__va_list)+0x464>
    a538:	e1b091a3 	lsrs	r9, r3, #3
    a53c:	e4cc0001 	strb	r0, [ip], #1
    a540:	1affffeb 	bne	a4f4 <CString::FormatV(char const*, std::__va_list)+0x470>
    a544:	e3a03000 	mov	r3, #0
    a548:	e59d0004 	ldr	r0, [sp, #4]
    a54c:	e5c63001 	strb	r3, [r6, #1]
    a550:	eb000e7b 	bl	df44 <strlen>
    a554:	e3570000 	cmp	r7, #0
    a558:	e1a09000 	mov	r9, r0
    a55c:	0a0000b0 	beq	a824 <CString::FormatV(char const*, std::__va_list)+0x7a0>
    a560:	e59d3008 	ldr	r3, [sp, #8]
    a564:	e2809001 	add	r9, r0, #1
    a568:	e3530000 	cmp	r3, #0
    a56c:	1a000271 	bne	af38 <CString::FormatV(char const*, std::__va_list)+0xeb4>
    a570:	e59d300c 	ldr	r3, [sp, #12]
    a574:	e3530000 	cmp	r3, #0
    a578:	1a00030e 	bne	b1b8 <CString::FormatV(char const*, std::__va_list)+0x1134>
    a57c:	e1540009 	cmp	r4, r9
    a580:	9a000014 	bls	a5d8 <CString::FormatV(char const*, std::__va_list)+0x554>
    a584:	e59b3004 	ldr	r3, [fp, #4]
    a588:	e59b500c 	ldr	r5, [fp, #12]
    a58c:	e0444009 	sub	r4, r4, r9
    a590:	e0459003 	sub	r9, r5, r3
    a594:	e0846009 	add	r6, r4, r9
    a598:	e59b3008 	ldr	r3, [fp, #8]
    a59c:	e2862001 	add	r2, r6, #1
    a5a0:	e1520003 	cmp	r2, r3
    a5a4:	8a0002a2 	bhi	b034 <CString::FormatV(char const*, std::__va_list)+0xfb0>
    a5a8:	e2444001 	sub	r4, r4, #1
    a5ac:	e3a02020 	mov	r2, #32
    a5b0:	ea000000 	b	a5b8 <CString::FormatV(char const*, std::__va_list)+0x534>
    a5b4:	e59b500c 	ldr	r5, [fp, #12]
    a5b8:	e2444001 	sub	r4, r4, #1
    a5bc:	e2853001 	add	r3, r5, #1
    a5c0:	e3740001 	cmn	r4, #1
    a5c4:	e58b300c 	str	r3, [fp, #12]
    a5c8:	e5c52000 	strb	r2, [r5]
    a5cc:	1afffff8 	bne	a5b4 <CString::FormatV(char const*, std::__va_list)+0x530>
    a5d0:	e3570000 	cmp	r7, #0
    a5d4:	0a00024b 	beq	af08 <CString::FormatV(char const*, std::__va_list)+0xe84>
    a5d8:	e59b300c 	ldr	r3, [fp, #12]
    a5dc:	e59b5004 	ldr	r5, [fp, #4]
    a5e0:	e59b2008 	ldr	r2, [fp, #8]
    a5e4:	e0435005 	sub	r5, r3, r5
    a5e8:	e2851002 	add	r1, r5, #2
    a5ec:	e1510002 	cmp	r1, r2
    a5f0:	8a000371 	bhi	b3bc <CString::FormatV(char const*, std::__va_list)+0x1338>
    a5f4:	e3a0202d 	mov	r2, #45	; 0x2d
    a5f8:	e2831001 	add	r1, r3, #1
    a5fc:	e58b100c 	str	r1, [fp, #12]
    a600:	e5c32000 	strb	r2, [r3]
    a604:	ea00023f 	b	af08 <CString::FormatV(char const*, std::__va_list)+0xe84>
    a608:	e5995000 	ldr	r5, [r9]
    a60c:	e2899004 	add	r9, r9, #4
    a610:	e1a00005 	mov	r0, r5
    a614:	eb000e4a 	bl	df44 <strlen>
    a618:	e59d3008 	ldr	r3, [sp, #8]
    a61c:	e1a08000 	mov	r8, r0
    a620:	e3530000 	cmp	r3, #0
    a624:	1a00018d 	bne	ac60 <CString::FormatV(char const*, std::__va_list)+0xbdc>
    a628:	e1500004 	cmp	r0, r4
    a62c:	3a0001d4 	bcc	ad84 <CString::FormatV(char const*, std::__va_list)+0xd00>
    a630:	e1a00005 	mov	r0, r5
    a634:	eb000e42 	bl	df44 <strlen>
    a638:	e2504000 	subs	r4, r0, #0
    a63c:	059b000c 	ldreq	r0, [fp, #12]
    a640:	1a000099 	bne	a8ac <CString::FormatV(char const*, std::__va_list)+0x828>
    a644:	e1a01005 	mov	r1, r5
    a648:	eb000ea7 	bl	e0ec <strcpy>
    a64c:	e59b300c 	ldr	r3, [fp, #12]
    a650:	e0833004 	add	r3, r3, r4
    a654:	e58b300c 	str	r3, [fp, #12]
    a658:	eafffe97 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a65c:	e3a06010 	mov	r6, #16
    a660:	eaffff25 	b	a2fc <CString::FormatV(char const*, std::__va_list)+0x278>
    a664:	e59d2008 	ldr	r2, [sp, #8]
    a668:	e59b500c 	ldr	r5, [fp, #12]
    a66c:	e59b3004 	ldr	r3, [fp, #4]
    a670:	e3520000 	cmp	r2, #0
    a674:	e0453003 	sub	r3, r5, r3
    a678:	e2897004 	add	r7, r9, #4
    a67c:	e1d960d0 	ldrsb	r6, [r9]
    a680:	e59b1008 	ldr	r1, [fp, #8]
    a684:	1a00016b 	bne	ac38 <CString::FormatV(char const*, std::__va_list)+0xbb4>
    a688:	e3540001 	cmp	r4, #1
    a68c:	8a0000d2 	bhi	a9dc <CString::FormatV(char const*, std::__va_list)+0x958>
    a690:	e2832002 	add	r2, r3, #2
    a694:	e1520001 	cmp	r2, r1
    a698:	8a00009d 	bhi	a914 <CString::FormatV(char const*, std::__va_list)+0x890>
    a69c:	e2853001 	add	r3, r5, #1
    a6a0:	e58b300c 	str	r3, [fp, #12]
    a6a4:	e1a09007 	mov	r9, r7
    a6a8:	e5c56000 	strb	r6, [r5]
    a6ac:	eafffe82 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a6b0:	e99b000e 	ldmib	fp, {r1, r2, r3}
    a6b4:	e0435001 	sub	r5, r3, r1
    a6b8:	e2851002 	add	r1, r5, #2
    a6bc:	e1510002 	cmp	r1, r2
    a6c0:	8a000113 	bhi	ab14 <CString::FormatV(char const*, std::__va_list)+0xa90>
    a6c4:	e3a02025 	mov	r2, #37	; 0x25
    a6c8:	e2831001 	add	r1, r3, #1
    a6cc:	e58b100c 	str	r1, [fp, #12]
    a6d0:	e5c32000 	strb	r2, [r3]
    a6d4:	e99b000e 	ldmib	fp, {r1, r2, r3}
    a6d8:	e0435001 	sub	r5, r3, r1
    a6dc:	e2851002 	add	r1, r5, #2
    a6e0:	e1510002 	cmp	r1, r2
    a6e4:	e1d660d0 	ldrsb	r6, [r6]
    a6e8:	8a0000e9 	bhi	aa94 <CString::FormatV(char const*, std::__va_list)+0xa10>
    a6ec:	e2832001 	add	r2, r3, #1
    a6f0:	e58b200c 	str	r2, [fp, #12]
    a6f4:	e5c36000 	strb	r6, [r3]
    a6f8:	eafffe6f 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a6fc:	e99b000e 	ldmib	fp, {r1, r2, r3}
    a700:	e0435001 	sub	r5, r3, r1
    a704:	e2851002 	add	r1, r5, #2
    a708:	e1510002 	cmp	r1, r2
    a70c:	8a0000f0 	bhi	aad4 <CString::FormatV(char const*, std::__va_list)+0xa50>
    a710:	e3a02025 	mov	r2, #37	; 0x25
    a714:	e2831001 	add	r1, r3, #1
    a718:	e58b100c 	str	r1, [fp, #12]
    a71c:	e28aa002 	add	sl, sl, #2
    a720:	e5c32000 	strb	r2, [r3]
    a724:	eafffe64 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a728:	e59d0004 	ldr	r0, [sp, #4]
    a72c:	eb000e04 	bl	df44 <strlen>
    a730:	e2506000 	subs	r6, r0, #0
    a734:	e59b000c 	ldr	r0, [fp, #12]
    a738:	1a000105 	bne	ab54 <CString::FormatV(char const*, std::__va_list)+0xad0>
    a73c:	e59d1004 	ldr	r1, [sp, #4]
    a740:	eb000e69 	bl	e0ec <strcpy>
    a744:	e59b300c 	ldr	r3, [fp, #12]
    a748:	e1550004 	cmp	r5, r4
    a74c:	e0833006 	add	r3, r3, r6
    a750:	e58b300c 	str	r3, [fp, #12]
    a754:	3a000160 	bcc	acdc <CString::FormatV(char const*, std::__va_list)+0xc58>
    a758:	e59d9014 	ldr	r9, [sp, #20]
    a75c:	eafffe56 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a760:	e59b3004 	ldr	r3, [fp, #4]
    a764:	e59b000c 	ldr	r0, [fp, #12]
    a768:	e59b2008 	ldr	r2, [fp, #8]
    a76c:	e0405003 	sub	r5, r0, r3
    a770:	e0843005 	add	r3, r4, r5
    a774:	e2831001 	add	r1, r3, #1
    a778:	e1510002 	cmp	r1, r2
    a77c:	9affff1f 	bls	a400 <CString::FormatV(char const*, std::__va_list)+0x37c>
    a780:	e2836041 	add	r6, r3, #65	; 0x41
    a784:	e1a00006 	mov	r0, r6
    a788:	eb000657 	bl	c0ec <operator new[](unsigned int)>
    a78c:	e3a02000 	mov	r2, #0
    a790:	e59b300c 	ldr	r3, [fp, #12]
    a794:	e1a07000 	mov	r7, r0
    a798:	e5c32000 	strb	r2, [r3]
    a79c:	e59b1004 	ldr	r1, [fp, #4]
    a7a0:	eb000e51 	bl	e0ec <strcpy>
    a7a4:	e59b0004 	ldr	r0, [fp, #4]
    a7a8:	e3500000 	cmp	r0, #0
    a7ac:	0a000000 	beq	a7b4 <CString::FormatV(char const*, std::__va_list)+0x730>
    a7b0:	eb00064f 	bl	c0f4 <operator delete[](void*)>
    a7b4:	e0870005 	add	r0, r7, r5
    a7b8:	e58b000c 	str	r0, [fp, #12]
    a7bc:	e58b7004 	str	r7, [fp, #4]
    a7c0:	e58b6008 	str	r6, [fp, #8]
    a7c4:	eaffff0d 	b	a400 <CString::FormatV(char const*, std::__va_list)+0x37c>
    a7c8:	e59b200c 	ldr	r2, [fp, #12]
    a7cc:	e59b6004 	ldr	r6, [fp, #4]
    a7d0:	e0444000 	sub	r4, r4, r0
    a7d4:	e0426006 	sub	r6, r2, r6
    a7d8:	e59d000c 	ldr	r0, [sp, #12]
    a7dc:	e0843006 	add	r3, r4, r6
    a7e0:	e59b1008 	ldr	r1, [fp, #8]
    a7e4:	e3500000 	cmp	r0, #0
    a7e8:	e2830001 	add	r0, r3, #1
    a7ec:	03a05020 	moveq	r5, #32
    a7f0:	13a05030 	movne	r5, #48	; 0x30
    a7f4:	e1500001 	cmp	r0, r1
    a7f8:	8a00001a 	bhi	a868 <CString::FormatV(char const*, std::__va_list)+0x7e4>
    a7fc:	e2443001 	sub	r3, r4, #1
    a800:	ea000000 	b	a808 <CString::FormatV(char const*, std::__va_list)+0x784>
    a804:	e59b200c 	ldr	r2, [fp, #12]
    a808:	e2433001 	sub	r3, r3, #1
    a80c:	e2821001 	add	r1, r2, #1
    a810:	e3730001 	cmn	r3, #1
    a814:	e58b100c 	str	r1, [fp, #12]
    a818:	e5c25000 	strb	r5, [r2]
    a81c:	1afffff8 	bne	a804 <CString::FormatV(char const*, std::__va_list)+0x780>
    a820:	eafffef1 	b	a3ec <CString::FormatV(char const*, std::__va_list)+0x368>
    a824:	e59d3008 	ldr	r3, [sp, #8]
    a828:	e3530000 	cmp	r3, #0
    a82c:	0a0001b0 	beq	aef4 <CString::FormatV(char const*, std::__va_list)+0xe70>
    a830:	e59d0004 	ldr	r0, [sp, #4]
    a834:	eb000dc2 	bl	df44 <strlen>
    a838:	e2505000 	subs	r5, r0, #0
    a83c:	e59b000c 	ldr	r0, [fp, #12]
    a840:	1a000077 	bne	aa24 <CString::FormatV(char const*, std::__va_list)+0x9a0>
    a844:	e59d1004 	ldr	r1, [sp, #4]
    a848:	eb000e27 	bl	e0ec <strcpy>
    a84c:	e59b300c 	ldr	r3, [fp, #12]
    a850:	e1540009 	cmp	r4, r9
    a854:	e0835005 	add	r5, r3, r5
    a858:	e58b500c 	str	r5, [fp, #12]
    a85c:	8a0001c1 	bhi	af68 <CString::FormatV(char const*, std::__va_list)+0xee4>
    a860:	e59d9010 	ldr	r9, [sp, #16]
    a864:	eafffe14 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a868:	e2837041 	add	r7, r3, #65	; 0x41
    a86c:	e1a00007 	mov	r0, r7
    a870:	eb00061d 	bl	c0ec <operator new[](unsigned int)>
    a874:	e3a02000 	mov	r2, #0
    a878:	e59b300c 	ldr	r3, [fp, #12]
    a87c:	e1a09000 	mov	r9, r0
    a880:	e5c32000 	strb	r2, [r3]
    a884:	e59b1004 	ldr	r1, [fp, #4]
    a888:	eb000e17 	bl	e0ec <strcpy>
    a88c:	e59b0004 	ldr	r0, [fp, #4]
    a890:	e3500000 	cmp	r0, #0
    a894:	0a000000 	beq	a89c <CString::FormatV(char const*, std::__va_list)+0x818>
    a898:	eb000615 	bl	c0f4 <operator delete[](void*)>
    a89c:	e58b9004 	str	r9, [fp, #4]
    a8a0:	e58b7008 	str	r7, [fp, #8]
    a8a4:	e0892006 	add	r2, r9, r6
    a8a8:	eaffffd3 	b	a7fc <CString::FormatV(char const*, std::__va_list)+0x778>
    a8ac:	e59b000c 	ldr	r0, [fp, #12]
    a8b0:	e59b8004 	ldr	r8, [fp, #4]
    a8b4:	e59b3008 	ldr	r3, [fp, #8]
    a8b8:	e0408008 	sub	r8, r0, r8
    a8bc:	e0846008 	add	r6, r4, r8
    a8c0:	e2862001 	add	r2, r6, #1
    a8c4:	e1520003 	cmp	r2, r3
    a8c8:	9affff5d 	bls	a644 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    a8cc:	e2866041 	add	r6, r6, #65	; 0x41
    a8d0:	e1a00006 	mov	r0, r6
    a8d4:	eb000604 	bl	c0ec <operator new[](unsigned int)>
    a8d8:	e3a02000 	mov	r2, #0
    a8dc:	e59b300c 	ldr	r3, [fp, #12]
    a8e0:	e1a07000 	mov	r7, r0
    a8e4:	e5c32000 	strb	r2, [r3]
    a8e8:	e59b1004 	ldr	r1, [fp, #4]
    a8ec:	eb000dfe 	bl	e0ec <strcpy>
    a8f0:	e59b0004 	ldr	r0, [fp, #4]
    a8f4:	e3500000 	cmp	r0, #0
    a8f8:	0a000000 	beq	a900 <CString::FormatV(char const*, std::__va_list)+0x87c>
    a8fc:	eb0005fc 	bl	c0f4 <operator delete[](void*)>
    a900:	e0870008 	add	r0, r7, r8
    a904:	e58b000c 	str	r0, [fp, #12]
    a908:	e58b7004 	str	r7, [fp, #4]
    a90c:	e58b6008 	str	r6, [fp, #8]
    a910:	eaffff4b 	b	a644 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    a914:	e2834042 	add	r4, r3, #66	; 0x42
    a918:	e1a00004 	mov	r0, r4
    a91c:	e58d3004 	str	r3, [sp, #4]
    a920:	eb0005f1 	bl	c0ec <operator new[](unsigned int)>
    a924:	e3a03000 	mov	r3, #0
    a928:	e59b200c 	ldr	r2, [fp, #12]
    a92c:	e1a05000 	mov	r5, r0
    a930:	e5c23000 	strb	r3, [r2]
    a934:	e59b1004 	ldr	r1, [fp, #4]
    a938:	eb000deb 	bl	e0ec <strcpy>
    a93c:	e59b0004 	ldr	r0, [fp, #4]
    a940:	e59d3004 	ldr	r3, [sp, #4]
    a944:	e3500000 	cmp	r0, #0
    a948:	0a000001 	beq	a954 <CString::FormatV(char const*, std::__va_list)+0x8d0>
    a94c:	eb0005e8 	bl	c0f4 <operator delete[](void*)>
    a950:	e59d3004 	ldr	r3, [sp, #4]
    a954:	e58b5004 	str	r5, [fp, #4]
    a958:	e0855003 	add	r5, r5, r3
    a95c:	e2853001 	add	r3, r5, #1
    a960:	e58b4008 	str	r4, [fp, #8]
    a964:	e58b300c 	str	r3, [fp, #12]
    a968:	e1a09007 	mov	r9, r7
    a96c:	e5c56000 	strb	r6, [r5]
    a970:	eafffdd1 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    a974:	e59b000c 	ldr	r0, [fp, #12]
    a978:	e59b7004 	ldr	r7, [fp, #4]
    a97c:	e59b3008 	ldr	r3, [fp, #8]
    a980:	e0407007 	sub	r7, r0, r7
    a984:	e0845007 	add	r5, r4, r7
    a988:	e2852001 	add	r2, r5, #1
    a98c:	e1520003 	cmp	r2, r3
    a990:	9afffeb8 	bls	a478 <CString::FormatV(char const*, std::__va_list)+0x3f4>
    a994:	e2855041 	add	r5, r5, #65	; 0x41
    a998:	e1a00005 	mov	r0, r5
    a99c:	eb0005d2 	bl	c0ec <operator new[](unsigned int)>
    a9a0:	e3a02000 	mov	r2, #0
    a9a4:	e59b300c 	ldr	r3, [fp, #12]
    a9a8:	e1a06000 	mov	r6, r0
    a9ac:	e5c32000 	strb	r2, [r3]
    a9b0:	e59b1004 	ldr	r1, [fp, #4]
    a9b4:	eb000dcc 	bl	e0ec <strcpy>
    a9b8:	e59b0004 	ldr	r0, [fp, #4]
    a9bc:	e3500000 	cmp	r0, #0
    a9c0:	0a000000 	beq	a9c8 <CString::FormatV(char const*, std::__va_list)+0x944>
    a9c4:	eb0005ca 	bl	c0f4 <operator delete[](void*)>
    a9c8:	e0860007 	add	r0, r6, r7
    a9cc:	e58b000c 	str	r0, [fp, #12]
    a9d0:	e58b6004 	str	r6, [fp, #4]
    a9d4:	e58b5008 	str	r5, [fp, #8]
    a9d8:	eafffea6 	b	a478 <CString::FormatV(char const*, std::__va_list)+0x3f4>
    a9dc:	e2448001 	sub	r8, r4, #1
    a9e0:	e0888003 	add	r8, r8, r3
    a9e4:	e2882001 	add	r2, r8, #1
    a9e8:	e1520001 	cmp	r2, r1
    a9ec:	8a0001de 	bhi	b16c <CString::FormatV(char const*, std::__va_list)+0x10e8>
    a9f0:	e3a02020 	mov	r2, #32
    a9f4:	e2444002 	sub	r4, r4, #2
    a9f8:	e2853001 	add	r3, r5, #1
    a9fc:	e2444001 	sub	r4, r4, #1
    aa00:	e58b300c 	str	r3, [fp, #12]
    aa04:	e3740001 	cmn	r4, #1
    aa08:	e5c52000 	strb	r2, [r5]
    aa0c:	e59b500c 	ldr	r5, [fp, #12]
    aa10:	1afffff8 	bne	a9f8 <CString::FormatV(char const*, std::__va_list)+0x974>
    aa14:	e59b3004 	ldr	r3, [fp, #4]
    aa18:	e59b1008 	ldr	r1, [fp, #8]
    aa1c:	e0453003 	sub	r3, r5, r3
    aa20:	eaffff1a 	b	a690 <CString::FormatV(char const*, std::__va_list)+0x60c>
    aa24:	e59b3004 	ldr	r3, [fp, #4]
    aa28:	e59b2008 	ldr	r2, [fp, #8]
    aa2c:	e0408003 	sub	r8, r0, r3
    aa30:	e0856008 	add	r6, r5, r8
    aa34:	e2861001 	add	r1, r6, #1
    aa38:	e1510002 	cmp	r1, r2
    aa3c:	9affff80 	bls	a844 <CString::FormatV(char const*, std::__va_list)+0x7c0>
    aa40:	e2866041 	add	r6, r6, #65	; 0x41
    aa44:	e1a00006 	mov	r0, r6
    aa48:	eb0005a7 	bl	c0ec <operator new[](unsigned int)>
    aa4c:	e3a03000 	mov	r3, #0
    aa50:	e59b200c 	ldr	r2, [fp, #12]
    aa54:	e1a07000 	mov	r7, r0
    aa58:	e5c23000 	strb	r3, [r2]
    aa5c:	e59b1004 	ldr	r1, [fp, #4]
    aa60:	eb000da1 	bl	e0ec <strcpy>
    aa64:	e59b0004 	ldr	r0, [fp, #4]
    aa68:	e3500000 	cmp	r0, #0
    aa6c:	0a000000 	beq	aa74 <CString::FormatV(char const*, std::__va_list)+0x9f0>
    aa70:	eb00059f 	bl	c0f4 <operator delete[](void*)>
    aa74:	e0870008 	add	r0, r7, r8
    aa78:	e58b000c 	str	r0, [fp, #12]
    aa7c:	e58b7004 	str	r7, [fp, #4]
    aa80:	e58b6008 	str	r6, [fp, #8]
    aa84:	eaffff6e 	b	a844 <CString::FormatV(char const*, std::__va_list)+0x7c0>
    aa88:	e1a09005 	mov	r9, r5
    aa8c:	e3a08001 	mov	r8, #1
    aa90:	eafffe26 	b	a330 <CString::FormatV(char const*, std::__va_list)+0x2ac>
    aa94:	e2857042 	add	r7, r5, #66	; 0x42
    aa98:	e1a00007 	mov	r0, r7
    aa9c:	eb000592 	bl	c0ec <operator new[](unsigned int)>
    aaa0:	e3a02000 	mov	r2, #0
    aaa4:	e59b300c 	ldr	r3, [fp, #12]
    aaa8:	e1a04000 	mov	r4, r0
    aaac:	e5c32000 	strb	r2, [r3]
    aab0:	e59b1004 	ldr	r1, [fp, #4]
    aab4:	eb000d8c 	bl	e0ec <strcpy>
    aab8:	e59b0004 	ldr	r0, [fp, #4]
    aabc:	e3500000 	cmp	r0, #0
    aac0:	0a000000 	beq	aac8 <CString::FormatV(char const*, std::__va_list)+0xa44>
    aac4:	eb00058a 	bl	c0f4 <operator delete[](void*)>
    aac8:	e98b0090 	stmib	fp, {r4, r7}
    aacc:	e0843005 	add	r3, r4, r5
    aad0:	eaffff05 	b	a6ec <CString::FormatV(char const*, std::__va_list)+0x668>
    aad4:	e2856042 	add	r6, r5, #66	; 0x42
    aad8:	e1a00006 	mov	r0, r6
    aadc:	eb000582 	bl	c0ec <operator new[](unsigned int)>
    aae0:	e3a02000 	mov	r2, #0
    aae4:	e59b300c 	ldr	r3, [fp, #12]
    aae8:	e1a04000 	mov	r4, r0
    aaec:	e5c32000 	strb	r2, [r3]
    aaf0:	e59b1004 	ldr	r1, [fp, #4]
    aaf4:	eb000d7c 	bl	e0ec <strcpy>
    aaf8:	e59b0004 	ldr	r0, [fp, #4]
    aafc:	e3500000 	cmp	r0, #0
    ab00:	0a000000 	beq	ab08 <CString::FormatV(char const*, std::__va_list)+0xa84>
    ab04:	eb00057a 	bl	c0f4 <operator delete[](void*)>
    ab08:	e98b0050 	stmib	fp, {r4, r6}
    ab0c:	e0843005 	add	r3, r4, r5
    ab10:	eafffefe 	b	a710 <CString::FormatV(char const*, std::__va_list)+0x68c>
    ab14:	e2857042 	add	r7, r5, #66	; 0x42
    ab18:	e1a00007 	mov	r0, r7
    ab1c:	eb000572 	bl	c0ec <operator new[](unsigned int)>
    ab20:	e3a02000 	mov	r2, #0
    ab24:	e59b300c 	ldr	r3, [fp, #12]
    ab28:	e1a04000 	mov	r4, r0
    ab2c:	e5c32000 	strb	r2, [r3]
    ab30:	e59b1004 	ldr	r1, [fp, #4]
    ab34:	eb000d6c 	bl	e0ec <strcpy>
    ab38:	e59b0004 	ldr	r0, [fp, #4]
    ab3c:	e3500000 	cmp	r0, #0
    ab40:	0a000000 	beq	ab48 <CString::FormatV(char const*, std::__va_list)+0xac4>
    ab44:	eb00056a 	bl	c0f4 <operator delete[](void*)>
    ab48:	e98b0090 	stmib	fp, {r4, r7}
    ab4c:	e0843005 	add	r3, r4, r5
    ab50:	eafffedb 	b	a6c4 <CString::FormatV(char const*, std::__va_list)+0x640>
    ab54:	e59b7004 	ldr	r7, [fp, #4]
    ab58:	e59b3008 	ldr	r3, [fp, #8]
    ab5c:	e0407007 	sub	r7, r0, r7
    ab60:	e0869007 	add	r9, r6, r7
    ab64:	e2892001 	add	r2, r9, #1
    ab68:	e1520003 	cmp	r2, r3
    ab6c:	9afffef2 	bls	a73c <CString::FormatV(char const*, std::__va_list)+0x6b8>
    ab70:	e2899041 	add	r9, r9, #65	; 0x41
    ab74:	e1a00009 	mov	r0, r9
    ab78:	eb00055b 	bl	c0ec <operator new[](unsigned int)>
    ab7c:	e3a03000 	mov	r3, #0
    ab80:	e59b200c 	ldr	r2, [fp, #12]
    ab84:	e58d0008 	str	r0, [sp, #8]
    ab88:	e5c23000 	strb	r3, [r2]
    ab8c:	e59b1004 	ldr	r1, [fp, #4]
    ab90:	eb000d55 	bl	e0ec <strcpy>
    ab94:	e59b0004 	ldr	r0, [fp, #4]
    ab98:	e59d3008 	ldr	r3, [sp, #8]
    ab9c:	e3500000 	cmp	r0, #0
    aba0:	0a000001 	beq	abac <CString::FormatV(char const*, std::__va_list)+0xb28>
    aba4:	eb000552 	bl	c0f4 <operator delete[](void*)>
    aba8:	e59d3008 	ldr	r3, [sp, #8]
    abac:	e0830007 	add	r0, r3, r7
    abb0:	e58b000c 	str	r0, [fp, #12]
    abb4:	e98b0208 	stmib	fp, {r3, r9}
    abb8:	eafffedf 	b	a73c <CString::FormatV(char const*, std::__va_list)+0x6b8>
    abbc:	e59d0004 	ldr	r0, [sp, #4]
    abc0:	eb000cdf 	bl	df44 <strlen>
    abc4:	e2505000 	subs	r5, r0, #0
    abc8:	e59b000c 	ldr	r0, [fp, #12]
    abcc:	1a000093 	bne	ae20 <CString::FormatV(char const*, std::__va_list)+0xd9c>
    abd0:	e59d1004 	ldr	r1, [sp, #4]
    abd4:	eb000d44 	bl	e0ec <strcpy>
    abd8:	e59b200c 	ldr	r2, [fp, #12]
    abdc:	e1580004 	cmp	r8, r4
    abe0:	e0825005 	add	r5, r2, r5
    abe4:	e58b500c 	str	r5, [fp, #12]
    abe8:	2afffd33 	bcs	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    abec:	e59b7004 	ldr	r7, [fp, #4]
    abf0:	e0444008 	sub	r4, r4, r8
    abf4:	e0457007 	sub	r7, r5, r7
    abf8:	e0846007 	add	r6, r4, r7
    abfc:	e59b3008 	ldr	r3, [fp, #8]
    ac00:	e2862001 	add	r2, r6, #1
    ac04:	e1520003 	cmp	r2, r3
    ac08:	8a0001bb 	bhi	b2fc <CString::FormatV(char const*, std::__va_list)+0x1278>
    ac0c:	e2443001 	sub	r3, r4, #1
    ac10:	e3a01020 	mov	r1, #32
    ac14:	ea000000 	b	ac1c <CString::FormatV(char const*, std::__va_list)+0xb98>
    ac18:	e59b500c 	ldr	r5, [fp, #12]
    ac1c:	e2433001 	sub	r3, r3, #1
    ac20:	e2852001 	add	r2, r5, #1
    ac24:	e3730001 	cmn	r3, #1
    ac28:	e58b200c 	str	r2, [fp, #12]
    ac2c:	e5c51000 	strb	r1, [r5]
    ac30:	1afffff8 	bne	ac18 <CString::FormatV(char const*, std::__va_list)+0xb94>
    ac34:	eafffd20 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    ac38:	e2832002 	add	r2, r3, #2
    ac3c:	e1520001 	cmp	r2, r1
    ac40:	8a000063 	bhi	add4 <CString::FormatV(char const*, std::__va_list)+0xd50>
    ac44:	e2853001 	add	r3, r5, #1
    ac48:	e3540001 	cmp	r4, #1
    ac4c:	e58b300c 	str	r3, [fp, #12]
    ac50:	e5c56000 	strb	r6, [r5]
    ac54:	8a00011f 	bhi	b0d8 <CString::FormatV(char const*, std::__va_list)+0x1054>
    ac58:	e1a09007 	mov	r9, r7
    ac5c:	eafffd16 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    ac60:	e1a00005 	mov	r0, r5
    ac64:	eb000cb6 	bl	df44 <strlen>
    ac68:	e2506000 	subs	r6, r0, #0
    ac6c:	e59b000c 	ldr	r0, [fp, #12]
    ac70:	1a000083 	bne	ae84 <CString::FormatV(char const*, std::__va_list)+0xe00>
    ac74:	e1a01005 	mov	r1, r5
    ac78:	eb000d1b 	bl	e0ec <strcpy>
    ac7c:	e59b200c 	ldr	r2, [fp, #12]
    ac80:	e1580004 	cmp	r8, r4
    ac84:	e0826006 	add	r6, r2, r6
    ac88:	e58b600c 	str	r6, [fp, #12]
    ac8c:	2afffd0a 	bcs	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    ac90:	e59b7004 	ldr	r7, [fp, #4]
    ac94:	e0444008 	sub	r4, r4, r8
    ac98:	e0467007 	sub	r7, r6, r7
    ac9c:	e0845007 	add	r5, r4, r7
    aca0:	e59b3008 	ldr	r3, [fp, #8]
    aca4:	e2852001 	add	r2, r5, #1
    aca8:	e1520003 	cmp	r2, r3
    acac:	8a000181 	bhi	b2b8 <CString::FormatV(char const*, std::__va_list)+0x1234>
    acb0:	e2443001 	sub	r3, r4, #1
    acb4:	e3a01020 	mov	r1, #32
    acb8:	ea000000 	b	acc0 <CString::FormatV(char const*, std::__va_list)+0xc3c>
    acbc:	e59b600c 	ldr	r6, [fp, #12]
    acc0:	e2433001 	sub	r3, r3, #1
    acc4:	e2862001 	add	r2, r6, #1
    acc8:	e3730001 	cmn	r3, #1
    accc:	e58b200c 	str	r2, [fp, #12]
    acd0:	e5c61000 	strb	r1, [r6]
    acd4:	1afffff8 	bne	acbc <CString::FormatV(char const*, std::__va_list)+0xc38>
    acd8:	eafffcf7 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    acdc:	e59b2004 	ldr	r2, [fp, #4]
    ace0:	e0444005 	sub	r4, r4, r5
    ace4:	e0435002 	sub	r5, r3, r2
    ace8:	e0842005 	add	r2, r4, r5
    acec:	e59b1008 	ldr	r1, [fp, #8]
    acf0:	e2820001 	add	r0, r2, #1
    acf4:	e1500001 	cmp	r0, r1
    acf8:	8a00010a 	bhi	b128 <CString::FormatV(char const*, std::__va_list)+0x10a4>
    acfc:	e2442001 	sub	r2, r4, #1
    ad00:	e3a00020 	mov	r0, #32
    ad04:	ea000000 	b	ad0c <CString::FormatV(char const*, std::__va_list)+0xc88>
    ad08:	e59b300c 	ldr	r3, [fp, #12]
    ad0c:	e2422001 	sub	r2, r2, #1
    ad10:	e2831001 	add	r1, r3, #1
    ad14:	e3720001 	cmn	r2, #1
    ad18:	e58b100c 	str	r1, [fp, #12]
    ad1c:	e5c30000 	strb	r0, [r3]
    ad20:	1afffff8 	bne	ad08 <CString::FormatV(char const*, std::__va_list)+0xc84>
    ad24:	eafffe8b 	b	a758 <CString::FormatV(char const*, std::__va_list)+0x6d4>
    ad28:	e1a08006 	mov	r8, r6
    ad2c:	e3a09001 	mov	r9, #1
    ad30:	eafffde9 	b	a4dc <CString::FormatV(char const*, std::__va_list)+0x458>
    ad34:	e59b000c 	ldr	r0, [fp, #12]
    ad38:	e59b7004 	ldr	r7, [fp, #4]
    ad3c:	e0444008 	sub	r4, r4, r8
    ad40:	e0407007 	sub	r7, r0, r7
    ad44:	e0846007 	add	r6, r4, r7
    ad48:	e59b3008 	ldr	r3, [fp, #8]
    ad4c:	e2862001 	add	r2, r6, #1
    ad50:	e1520003 	cmp	r2, r3
    ad54:	8a000096 	bhi	afb4 <CString::FormatV(char const*, std::__va_list)+0xf30>
    ad58:	e2443001 	sub	r3, r4, #1
    ad5c:	e3a01020 	mov	r1, #32
    ad60:	ea000000 	b	ad68 <CString::FormatV(char const*, std::__va_list)+0xce4>
    ad64:	e59b000c 	ldr	r0, [fp, #12]
    ad68:	e2433001 	sub	r3, r3, #1
    ad6c:	e2802001 	add	r2, r0, #1
    ad70:	e3730001 	cmn	r3, #1
    ad74:	e58b200c 	str	r2, [fp, #12]
    ad78:	e5c01000 	strb	r1, [r0]
    ad7c:	1afffff8 	bne	ad64 <CString::FormatV(char const*, std::__va_list)+0xce0>
    ad80:	eafffdb7 	b	a464 <CString::FormatV(char const*, std::__va_list)+0x3e0>
    ad84:	e59b3004 	ldr	r3, [fp, #4]
    ad88:	e59b000c 	ldr	r0, [fp, #12]
    ad8c:	e0444008 	sub	r4, r4, r8
    ad90:	e0408003 	sub	r8, r0, r3
    ad94:	e0847008 	add	r7, r4, r8
    ad98:	e59b3008 	ldr	r3, [fp, #8]
    ad9c:	e2872001 	add	r2, r7, #1
    ada0:	e1520003 	cmp	r2, r3
    ada4:	8a000092 	bhi	aff4 <CString::FormatV(char const*, std::__va_list)+0xf70>
    ada8:	e2443001 	sub	r3, r4, #1
    adac:	e3a01020 	mov	r1, #32
    adb0:	ea000000 	b	adb8 <CString::FormatV(char const*, std::__va_list)+0xd34>
    adb4:	e59b000c 	ldr	r0, [fp, #12]
    adb8:	e2433001 	sub	r3, r3, #1
    adbc:	e2802001 	add	r2, r0, #1
    adc0:	e3730001 	cmn	r3, #1
    adc4:	e58b200c 	str	r2, [fp, #12]
    adc8:	e5c01000 	strb	r1, [r0]
    adcc:	1afffff8 	bne	adb4 <CString::FormatV(char const*, std::__va_list)+0xd30>
    add0:	eafffe16 	b	a630 <CString::FormatV(char const*, std::__va_list)+0x5ac>
    add4:	e2838042 	add	r8, r3, #66	; 0x42
    add8:	e1a00008 	mov	r0, r8
    addc:	e58d3004 	str	r3, [sp, #4]
    ade0:	eb0004c1 	bl	c0ec <operator new[](unsigned int)>
    ade4:	e3a03000 	mov	r3, #0
    ade8:	e59b200c 	ldr	r2, [fp, #12]
    adec:	e1a05000 	mov	r5, r0
    adf0:	e5c23000 	strb	r3, [r2]
    adf4:	e59b1004 	ldr	r1, [fp, #4]
    adf8:	eb000cbb 	bl	e0ec <strcpy>
    adfc:	e59b0004 	ldr	r0, [fp, #4]
    ae00:	e59d3004 	ldr	r3, [sp, #4]
    ae04:	e3500000 	cmp	r0, #0
    ae08:	0a000001 	beq	ae14 <CString::FormatV(char const*, std::__va_list)+0xd90>
    ae0c:	eb0004b8 	bl	c0f4 <operator delete[](void*)>
    ae10:	e59d3004 	ldr	r3, [sp, #4]
    ae14:	e98b0120 	stmib	fp, {r5, r8}
    ae18:	e0855003 	add	r5, r5, r3
    ae1c:	eaffff88 	b	ac44 <CString::FormatV(char const*, std::__va_list)+0xbc0>
    ae20:	e59b2004 	ldr	r2, [fp, #4]
    ae24:	e59b1008 	ldr	r1, [fp, #8]
    ae28:	e0407002 	sub	r7, r0, r2
    ae2c:	e0856007 	add	r6, r5, r7
    ae30:	e286c001 	add	ip, r6, #1
    ae34:	e15c0001 	cmp	ip, r1
    ae38:	9affff64 	bls	abd0 <CString::FormatV(char const*, std::__va_list)+0xb4c>
    ae3c:	e2866041 	add	r6, r6, #65	; 0x41
    ae40:	e1a00006 	mov	r0, r6
    ae44:	eb0004a8 	bl	c0ec <operator new[](unsigned int)>
    ae48:	e3a03000 	mov	r3, #0
    ae4c:	e59b100c 	ldr	r1, [fp, #12]
    ae50:	e58d0008 	str	r0, [sp, #8]
    ae54:	e5c13000 	strb	r3, [r1]
    ae58:	e59b1004 	ldr	r1, [fp, #4]
    ae5c:	eb000ca2 	bl	e0ec <strcpy>
    ae60:	e59b0004 	ldr	r0, [fp, #4]
    ae64:	e3500000 	cmp	r0, #0
    ae68:	0a000000 	beq	ae70 <CString::FormatV(char const*, std::__va_list)+0xdec>
    ae6c:	eb0004a0 	bl	c0f4 <operator delete[](void*)>
    ae70:	e59d3008 	ldr	r3, [sp, #8]
    ae74:	e0830007 	add	r0, r3, r7
    ae78:	e58b000c 	str	r0, [fp, #12]
    ae7c:	e98b0048 	stmib	fp, {r3, r6}
    ae80:	eaffff52 	b	abd0 <CString::FormatV(char const*, std::__va_list)+0xb4c>
    ae84:	e59b2004 	ldr	r2, [fp, #4]
    ae88:	e59b1008 	ldr	r1, [fp, #8]
    ae8c:	e0402002 	sub	r2, r0, r2
    ae90:	e0867002 	add	r7, r6, r2
    ae94:	e287c001 	add	ip, r7, #1
    ae98:	e15c0001 	cmp	ip, r1
    ae9c:	9affff74 	bls	ac74 <CString::FormatV(char const*, std::__va_list)+0xbf0>
    aea0:	e2877041 	add	r7, r7, #65	; 0x41
    aea4:	e1a00007 	mov	r0, r7
    aea8:	e58d2008 	str	r2, [sp, #8]
    aeac:	eb00048e 	bl	c0ec <operator new[](unsigned int)>
    aeb0:	e3a03000 	mov	r3, #0
    aeb4:	e59b100c 	ldr	r1, [fp, #12]
    aeb8:	e58d0004 	str	r0, [sp, #4]
    aebc:	e5c13000 	strb	r3, [r1]
    aec0:	e59b1004 	ldr	r1, [fp, #4]
    aec4:	eb000c88 	bl	e0ec <strcpy>
    aec8:	e59b0004 	ldr	r0, [fp, #4]
    aecc:	e59d2008 	ldr	r2, [sp, #8]
    aed0:	e3500000 	cmp	r0, #0
    aed4:	0a000001 	beq	aee0 <CString::FormatV(char const*, std::__va_list)+0xe5c>
    aed8:	eb000485 	bl	c0f4 <operator delete[](void*)>
    aedc:	e59d2008 	ldr	r2, [sp, #8]
    aee0:	e59d3004 	ldr	r3, [sp, #4]
    aee4:	e0830002 	add	r0, r3, r2
    aee8:	e58b000c 	str	r0, [fp, #12]
    aeec:	e98b0088 	stmib	fp, {r3, r7}
    aef0:	eaffff5f 	b	ac74 <CString::FormatV(char const*, std::__va_list)+0xbf0>
    aef4:	e59d300c 	ldr	r3, [sp, #12]
    aef8:	e3530000 	cmp	r3, #0
    aefc:	0a00014e 	beq	b43c <CString::FormatV(char const*, std::__va_list)+0x13b8>
    af00:	e1590004 	cmp	r9, r4
    af04:	3a0000d7 	bcc	b268 <CString::FormatV(char const*, std::__va_list)+0x11e4>
    af08:	e59d0004 	ldr	r0, [sp, #4]
    af0c:	eb000c0c 	bl	df44 <strlen>
    af10:	e2504000 	subs	r4, r0, #0
    af14:	e59b000c 	ldr	r0, [fp, #12]
    af18:	1a000055 	bne	b074 <CString::FormatV(char const*, std::__va_list)+0xff0>
    af1c:	e59d1004 	ldr	r1, [sp, #4]
    af20:	eb000c71 	bl	e0ec <strcpy>
    af24:	e59b300c 	ldr	r3, [fp, #12]
    af28:	e59d9010 	ldr	r9, [sp, #16]
    af2c:	e0833004 	add	r3, r3, r4
    af30:	e58b300c 	str	r3, [fp, #12]
    af34:	eafffc60 	b	a0bc <CString::FormatV(char const*, std::__va_list)+0x38>
    af38:	e59b300c 	ldr	r3, [fp, #12]
    af3c:	e59b7004 	ldr	r7, [fp, #4]
    af40:	e59b2008 	ldr	r2, [fp, #8]
    af44:	e0437007 	sub	r7, r3, r7
    af48:	e2871002 	add	r1, r7, #2
    af4c:	e1510002 	cmp	r1, r2
    af50:	8a0000a4 	bhi	b1e8 <CString::FormatV(char const*, std::__va_list)+0x1164>
    af54:	e3a0202d 	mov	r2, #45	; 0x2d
    af58:	e2831001 	add	r1, r3, #1
    af5c:	e58b100c 	str	r1, [fp, #12]
    af60:	e5c32000 	strb	r2, [r3]
    af64:	eafffe31 	b	a830 <CString::FormatV(char const*, std::__va_list)+0x7ac>
    af68:	e59b7004 	ldr	r7, [fp, #4]
    af6c:	e0444009 	sub	r4, r4, r9
    af70:	e0457007 	sub	r7, r5, r7
    af74:	e0876004 	add	r6, r7, r4
    af78:	e59b3008 	ldr	r3, [fp, #8]
    af7c:	e2862001 	add	r2, r6, #1
    af80:	e1520003 	cmp	r2, r3
    af84:	8a0000ec 	bhi	b33c <CString::FormatV(char const*, std::__va_list)+0x12b8>
    af88:	e2443001 	sub	r3, r4, #1
    af8c:	e3a01020 	mov	r1, #32
    af90:	ea000000 	b	af98 <CString::FormatV(char const*, std::__va_list)+0xf14>
    af94:	e59b500c 	ldr	r5, [fp, #12]
    af98:	e2433001 	sub	r3, r3, #1
    af9c:	e2852001 	add	r2, r5, #1
    afa0:	e3730001 	cmn	r3, #1
    afa4:	e58b200c 	str	r2, [fp, #12]
    afa8:	e5c51000 	strb	r1, [r5]
    afac:	1afffff8 	bne	af94 <CString::FormatV(char const*, std::__va_list)+0xf10>
    afb0:	eafffe2a 	b	a860 <CString::FormatV(char const*, std::__va_list)+0x7dc>
    afb4:	e2866041 	add	r6, r6, #65	; 0x41
    afb8:	e1a00006 	mov	r0, r6
    afbc:	eb00044a 	bl	c0ec <operator new[](unsigned int)>
    afc0:	e59b300c 	ldr	r3, [fp, #12]
    afc4:	e5dd2008 	ldrb	r2, [sp, #8]
    afc8:	e1a05000 	mov	r5, r0
    afcc:	e5c32000 	strb	r2, [r3]
    afd0:	e59b1004 	ldr	r1, [fp, #4]
    afd4:	eb000c44 	bl	e0ec <strcpy>
    afd8:	e59b0004 	ldr	r0, [fp, #4]
    afdc:	e3500000 	cmp	r0, #0
    afe0:	0a000000 	beq	afe8 <CString::FormatV(char const*, std::__va_list)+0xf64>
    afe4:	eb000442 	bl	c0f4 <operator delete[](void*)>
    afe8:	e98b0060 	stmib	fp, {r5, r6}
    afec:	e0850007 	add	r0, r5, r7
    aff0:	eaffff58 	b	ad58 <CString::FormatV(char const*, std::__va_list)+0xcd4>
    aff4:	e2877041 	add	r7, r7, #65	; 0x41
    aff8:	e1a00007 	mov	r0, r7
    affc:	eb00043a 	bl	c0ec <operator new[](unsigned int)>
    b000:	e59b300c 	ldr	r3, [fp, #12]
    b004:	e5dd2008 	ldrb	r2, [sp, #8]
    b008:	e1a06000 	mov	r6, r0
    b00c:	e5c32000 	strb	r2, [r3]
    b010:	e59b1004 	ldr	r1, [fp, #4]
    b014:	eb000c34 	bl	e0ec <strcpy>
    b018:	e59b0004 	ldr	r0, [fp, #4]
    b01c:	e3500000 	cmp	r0, #0
    b020:	0a000000 	beq	b028 <CString::FormatV(char const*, std::__va_list)+0xfa4>
    b024:	eb000432 	bl	c0f4 <operator delete[](void*)>
    b028:	e1cb60f4 	strd	r6, [fp, #4]
    b02c:	e0860008 	add	r0, r6, r8
    b030:	eaffff5c 	b	ada8 <CString::FormatV(char const*, std::__va_list)+0xd24>
    b034:	e2866041 	add	r6, r6, #65	; 0x41
    b038:	e1a00006 	mov	r0, r6
    b03c:	eb00042a 	bl	c0ec <operator new[](unsigned int)>
    b040:	e3a02000 	mov	r2, #0
    b044:	e59b300c 	ldr	r3, [fp, #12]
    b048:	e1a05000 	mov	r5, r0
    b04c:	e5c32000 	strb	r2, [r3]
    b050:	e59b1004 	ldr	r1, [fp, #4]
    b054:	eb000c24 	bl	e0ec <strcpy>
    b058:	e59b0004 	ldr	r0, [fp, #4]
    b05c:	e3500000 	cmp	r0, #0
    b060:	0a000000 	beq	b068 <CString::FormatV(char const*, std::__va_list)+0xfe4>
    b064:	eb000422 	bl	c0f4 <operator delete[](void*)>
    b068:	e98b0060 	stmib	fp, {r5, r6}
    b06c:	e0855009 	add	r5, r5, r9
    b070:	eafffd4c 	b	a5a8 <CString::FormatV(char const*, std::__va_list)+0x524>
    b074:	e59b7004 	ldr	r7, [fp, #4]
    b078:	e59b2008 	ldr	r2, [fp, #8]
    b07c:	e0407007 	sub	r7, r0, r7
    b080:	e0843007 	add	r3, r4, r7
    b084:	e2831001 	add	r1, r3, #1
    b088:	e1510002 	cmp	r1, r2
    b08c:	9affffa2 	bls	af1c <CString::FormatV(char const*, std::__va_list)+0xe98>
    b090:	e2835041 	add	r5, r3, #65	; 0x41
    b094:	e1a00005 	mov	r0, r5
    b098:	eb000413 	bl	c0ec <operator new[](unsigned int)>
    b09c:	e3a02000 	mov	r2, #0
    b0a0:	e59b300c 	ldr	r3, [fp, #12]
    b0a4:	e1a06000 	mov	r6, r0
    b0a8:	e5c32000 	strb	r2, [r3]
    b0ac:	e59b1004 	ldr	r1, [fp, #4]
    b0b0:	eb000c0d 	bl	e0ec <strcpy>
    b0b4:	e59b0004 	ldr	r0, [fp, #4]
    b0b8:	e3500000 	cmp	r0, #0
    b0bc:	0a000000 	beq	b0c4 <CString::FormatV(char const*, std::__va_list)+0x1040>
    b0c0:	eb00040b 	bl	c0f4 <operator delete[](void*)>
    b0c4:	e0860007 	add	r0, r6, r7
    b0c8:	e58b000c 	str	r0, [fp, #12]
    b0cc:	e58b6004 	str	r6, [fp, #4]
    b0d0:	e58b5008 	str	r5, [fp, #8]
    b0d4:	eaffff90 	b	af1c <CString::FormatV(char const*, std::__va_list)+0xe98>
    b0d8:	e59b300c 	ldr	r3, [fp, #12]
    b0dc:	e59b8004 	ldr	r8, [fp, #4]
    b0e0:	e2446001 	sub	r6, r4, #1
    b0e4:	e0438008 	sub	r8, r3, r8
    b0e8:	e0866008 	add	r6, r6, r8
    b0ec:	e59b2008 	ldr	r2, [fp, #8]
    b0f0:	e2861001 	add	r1, r6, #1
    b0f4:	e1510002 	cmp	r1, r2
    b0f8:	8a00004a 	bhi	b228 <CString::FormatV(char const*, std::__va_list)+0x11a4>
    b0fc:	e2444002 	sub	r4, r4, #2
    b100:	e3a01020 	mov	r1, #32
    b104:	ea000000 	b	b10c <CString::FormatV(char const*, std::__va_list)+0x1088>
    b108:	e59b300c 	ldr	r3, [fp, #12]
    b10c:	e2444001 	sub	r4, r4, #1
    b110:	e2832001 	add	r2, r3, #1
    b114:	e3740001 	cmn	r4, #1
    b118:	e58b200c 	str	r2, [fp, #12]
    b11c:	e5c31000 	strb	r1, [r3]
    b120:	1afffff8 	bne	b108 <CString::FormatV(char const*, std::__va_list)+0x1084>
    b124:	eafffecb 	b	ac58 <CString::FormatV(char const*, std::__va_list)+0xbd4>
    b128:	e2826041 	add	r6, r2, #65	; 0x41
    b12c:	e1a00006 	mov	r0, r6
    b130:	eb0003ed 	bl	c0ec <operator new[](unsigned int)>
    b134:	e3a02000 	mov	r2, #0
    b138:	e59b300c 	ldr	r3, [fp, #12]
    b13c:	e1a07000 	mov	r7, r0
    b140:	e5c32000 	strb	r2, [r3]
    b144:	e59b1004 	ldr	r1, [fp, #4]
    b148:	eb000be7 	bl	e0ec <strcpy>
    b14c:	e59b0004 	ldr	r0, [fp, #4]
    b150:	e3500000 	cmp	r0, #0
    b154:	0a000000 	beq	b15c <CString::FormatV(char const*, std::__va_list)+0x10d8>
    b158:	eb0003e5 	bl	c0f4 <operator delete[](void*)>
    b15c:	e58b7004 	str	r7, [fp, #4]
    b160:	e58b6008 	str	r6, [fp, #8]
    b164:	e0873005 	add	r3, r7, r5
    b168:	eafffee3 	b	acfc <CString::FormatV(char const*, std::__va_list)+0xc78>
    b16c:	e2888041 	add	r8, r8, #65	; 0x41
    b170:	e1a00008 	mov	r0, r8
    b174:	e58d3004 	str	r3, [sp, #4]
    b178:	eb0003db 	bl	c0ec <operator new[](unsigned int)>
    b17c:	e5dd3008 	ldrb	r3, [sp, #8]
    b180:	e59b200c 	ldr	r2, [fp, #12]
    b184:	e1a05000 	mov	r5, r0
    b188:	e5c23000 	strb	r3, [r2]
    b18c:	e59b1004 	ldr	r1, [fp, #4]
    b190:	eb000bd5 	bl	e0ec <strcpy>
    b194:	e59b0004 	ldr	r0, [fp, #4]
    b198:	e59d3004 	ldr	r3, [sp, #4]
    b19c:	e3500000 	cmp	r0, #0
    b1a0:	0a000001 	beq	b1ac <CString::FormatV(char const*, std::__va_list)+0x1128>
    b1a4:	eb0003d2 	bl	c0f4 <operator delete[](void*)>
    b1a8:	e59d3004 	ldr	r3, [sp, #4]
    b1ac:	e98b0120 	stmib	fp, {r5, r8}
    b1b0:	e0855003 	add	r5, r5, r3
    b1b4:	eafffe0d 	b	a9f0 <CString::FormatV(char const*, std::__va_list)+0x96c>
    b1b8:	e59b500c 	ldr	r5, [fp, #12]
    b1bc:	e59b7004 	ldr	r7, [fp, #4]
    b1c0:	e59b3008 	ldr	r3, [fp, #8]
    b1c4:	e0457007 	sub	r7, r5, r7
    b1c8:	e2872002 	add	r2, r7, #2
    b1cc:	e1520003 	cmp	r2, r3
    b1d0:	8a000069 	bhi	b37c <CString::FormatV(char const*, std::__va_list)+0x12f8>
    b1d4:	e3a0302d 	mov	r3, #45	; 0x2d
    b1d8:	e2852001 	add	r2, r5, #1
    b1dc:	e58b200c 	str	r2, [fp, #12]
    b1e0:	e5c53000 	strb	r3, [r5]
    b1e4:	eaffff45 	b	af00 <CString::FormatV(char const*, std::__va_list)+0xe7c>
    b1e8:	e2876042 	add	r6, r7, #66	; 0x42
    b1ec:	e1a00006 	mov	r0, r6
    b1f0:	eb0003bd 	bl	c0ec <operator new[](unsigned int)>
    b1f4:	e3a02000 	mov	r2, #0
    b1f8:	e59b300c 	ldr	r3, [fp, #12]
    b1fc:	e1a05000 	mov	r5, r0
    b200:	e5c32000 	strb	r2, [r3]
    b204:	e59b1004 	ldr	r1, [fp, #4]
    b208:	eb000bb7 	bl	e0ec <strcpy>
    b20c:	e59b0004 	ldr	r0, [fp, #4]
    b210:	e3500000 	cmp	r0, #0
    b214:	0a000000 	beq	b21c <CString::FormatV(char const*, std::__va_list)+0x1198>
    b218:	eb0003b5 	bl	c0f4 <operator delete[](void*)>
    b21c:	e98b0060 	stmib	fp, {r5, r6}
    b220:	e0853007 	add	r3, r5, r7
    b224:	eaffff4a 	b	af54 <CString::FormatV(char const*, std::__va_list)+0xed0>
    b228:	e2866041 	add	r6, r6, #65	; 0x41
    b22c:	e1a00006 	mov	r0, r6
    b230:	eb0003ad 	bl	c0ec <operator new[](unsigned int)>
    b234:	e3a02000 	mov	r2, #0
    b238:	e59b300c 	ldr	r3, [fp, #12]
    b23c:	e1a05000 	mov	r5, r0
    b240:	e5c32000 	strb	r2, [r3]
    b244:	e59b1004 	ldr	r1, [fp, #4]
    b248:	eb000ba7 	bl	e0ec <strcpy>
    b24c:	e59b0004 	ldr	r0, [fp, #4]
    b250:	e3500000 	cmp	r0, #0
    b254:	0a000000 	beq	b25c <CString::FormatV(char const*, std::__va_list)+0x11d8>
    b258:	eb0003a5 	bl	c0f4 <operator delete[](void*)>
    b25c:	e98b0060 	stmib	fp, {r5, r6}
    b260:	e0853008 	add	r3, r5, r8
    b264:	eaffffa4 	b	b0fc <CString::FormatV(char const*, std::__va_list)+0x1078>
    b268:	e59b500c 	ldr	r5, [fp, #12]
    b26c:	e59b7004 	ldr	r7, [fp, #4]
    b270:	e0444009 	sub	r4, r4, r9
    b274:	e0457007 	sub	r7, r5, r7
    b278:	e0876004 	add	r6, r7, r4
    b27c:	e59b3008 	ldr	r3, [fp, #8]
    b280:	e2862001 	add	r2, r6, #1
    b284:	e1520003 	cmp	r2, r3
    b288:	8a00005b 	bhi	b3fc <CString::FormatV(char const*, std::__va_list)+0x1378>
    b28c:	e2443001 	sub	r3, r4, #1
    b290:	e3a01030 	mov	r1, #48	; 0x30
    b294:	ea000000 	b	b29c <CString::FormatV(char const*, std::__va_list)+0x1218>
    b298:	e59b500c 	ldr	r5, [fp, #12]
    b29c:	e2433001 	sub	r3, r3, #1
    b2a0:	e2852001 	add	r2, r5, #1
    b2a4:	e3730001 	cmn	r3, #1
    b2a8:	e58b200c 	str	r2, [fp, #12]
    b2ac:	e5c51000 	strb	r1, [r5]
    b2b0:	1afffff8 	bne	b298 <CString::FormatV(char const*, std::__va_list)+0x1214>
    b2b4:	eaffff13 	b	af08 <CString::FormatV(char const*, std::__va_list)+0xe84>
    b2b8:	e2855041 	add	r5, r5, #65	; 0x41
    b2bc:	e1a00005 	mov	r0, r5
    b2c0:	eb000389 	bl	c0ec <operator new[](unsigned int)>
    b2c4:	e3a02000 	mov	r2, #0
    b2c8:	e59b300c 	ldr	r3, [fp, #12]
    b2cc:	e1a06000 	mov	r6, r0
    b2d0:	e5c32000 	strb	r2, [r3]
    b2d4:	e59b1004 	ldr	r1, [fp, #4]
    b2d8:	eb000b83 	bl	e0ec <strcpy>
    b2dc:	e59b0004 	ldr	r0, [fp, #4]
    b2e0:	e3500000 	cmp	r0, #0
    b2e4:	0a000000 	beq	b2ec <CString::FormatV(char const*, std::__va_list)+0x1268>
    b2e8:	eb000381 	bl	c0f4 <operator delete[](void*)>
    b2ec:	e58b6004 	str	r6, [fp, #4]
    b2f0:	e58b5008 	str	r5, [fp, #8]
    b2f4:	e0866007 	add	r6, r6, r7
    b2f8:	eafffe6c 	b	acb0 <CString::FormatV(char const*, std::__va_list)+0xc2c>
    b2fc:	e2866041 	add	r6, r6, #65	; 0x41
    b300:	e1a00006 	mov	r0, r6
    b304:	eb000378 	bl	c0ec <operator new[](unsigned int)>
    b308:	e3a02000 	mov	r2, #0
    b30c:	e59b300c 	ldr	r3, [fp, #12]
    b310:	e1a05000 	mov	r5, r0
    b314:	e5c32000 	strb	r2, [r3]
    b318:	e59b1004 	ldr	r1, [fp, #4]
    b31c:	eb000b72 	bl	e0ec <strcpy>
    b320:	e59b0004 	ldr	r0, [fp, #4]
    b324:	e3500000 	cmp	r0, #0
    b328:	0a000000 	beq	b330 <CString::FormatV(char const*, std::__va_list)+0x12ac>
    b32c:	eb000370 	bl	c0f4 <operator delete[](void*)>
    b330:	e98b0060 	stmib	fp, {r5, r6}
    b334:	e0855007 	add	r5, r5, r7
    b338:	eafffe33 	b	ac0c <CString::FormatV(char const*, std::__va_list)+0xb88>
    b33c:	e2866041 	add	r6, r6, #65	; 0x41
    b340:	e1a00006 	mov	r0, r6
    b344:	eb000368 	bl	c0ec <operator new[](unsigned int)>
    b348:	e3a02000 	mov	r2, #0
    b34c:	e59b300c 	ldr	r3, [fp, #12]
    b350:	e1a05000 	mov	r5, r0
    b354:	e5c32000 	strb	r2, [r3]
    b358:	e59b1004 	ldr	r1, [fp, #4]
    b35c:	eb000b62 	bl	e0ec <strcpy>
    b360:	e59b0004 	ldr	r0, [fp, #4]
    b364:	e3500000 	cmp	r0, #0
    b368:	0a000000 	beq	b370 <CString::FormatV(char const*, std::__va_list)+0x12ec>
    b36c:	eb000360 	bl	c0f4 <operator delete[](void*)>
    b370:	e98b0060 	stmib	fp, {r5, r6}
    b374:	e0855007 	add	r5, r5, r7
    b378:	eaffff02 	b	af88 <CString::FormatV(char const*, std::__va_list)+0xf04>
    b37c:	e2876042 	add	r6, r7, #66	; 0x42
    b380:	e1a00006 	mov	r0, r6
    b384:	eb000358 	bl	c0ec <operator new[](unsigned int)>
    b388:	e59b300c 	ldr	r3, [fp, #12]
    b38c:	e5dd2008 	ldrb	r2, [sp, #8]
    b390:	e1a05000 	mov	r5, r0
    b394:	e5c32000 	strb	r2, [r3]
    b398:	e59b1004 	ldr	r1, [fp, #4]
    b39c:	eb000b52 	bl	e0ec <strcpy>
    b3a0:	e59b0004 	ldr	r0, [fp, #4]
    b3a4:	e3500000 	cmp	r0, #0
    b3a8:	0a000000 	beq	b3b0 <CString::FormatV(char const*, std::__va_list)+0x132c>
    b3ac:	eb000350 	bl	c0f4 <operator delete[](void*)>
    b3b0:	e98b0060 	stmib	fp, {r5, r6}
    b3b4:	e0855007 	add	r5, r5, r7
    b3b8:	eaffff85 	b	b1d4 <CString::FormatV(char const*, std::__va_list)+0x1150>
    b3bc:	e2856042 	add	r6, r5, #66	; 0x42
    b3c0:	e1a00006 	mov	r0, r6
    b3c4:	eb000348 	bl	c0ec <operator new[](unsigned int)>
    b3c8:	e3a02000 	mov	r2, #0
    b3cc:	e59b300c 	ldr	r3, [fp, #12]
    b3d0:	e1a04000 	mov	r4, r0
    b3d4:	e5c32000 	strb	r2, [r3]
    b3d8:	e59b1004 	ldr	r1, [fp, #4]
    b3dc:	eb000b42 	bl	e0ec <strcpy>
    b3e0:	e59b0004 	ldr	r0, [fp, #4]
    b3e4:	e3500000 	cmp	r0, #0
    b3e8:	0a000000 	beq	b3f0 <CString::FormatV(char const*, std::__va_list)+0x136c>
    b3ec:	eb000340 	bl	c0f4 <operator delete[](void*)>
    b3f0:	e98b0050 	stmib	fp, {r4, r6}
    b3f4:	e0843005 	add	r3, r4, r5
    b3f8:	eafffc7d 	b	a5f4 <CString::FormatV(char const*, std::__va_list)+0x570>
    b3fc:	e2866041 	add	r6, r6, #65	; 0x41
    b400:	e1a00006 	mov	r0, r6
    b404:	eb000338 	bl	c0ec <operator new[](unsigned int)>
    b408:	e3a02000 	mov	r2, #0
    b40c:	e59b300c 	ldr	r3, [fp, #12]
    b410:	e1a05000 	mov	r5, r0
    b414:	e5c32000 	strb	r2, [r3]
    b418:	e59b1004 	ldr	r1, [fp, #4]
    b41c:	eb000b32 	bl	e0ec <strcpy>
    b420:	e59b0004 	ldr	r0, [fp, #4]
    b424:	e3500000 	cmp	r0, #0
    b428:	0a000000 	beq	b430 <CString::FormatV(char const*, std::__va_list)+0x13ac>
    b42c:	eb000330 	bl	c0f4 <operator delete[](void*)>
    b430:	e98b0060 	stmib	fp, {r5, r6}
    b434:	e0855007 	add	r5, r5, r7
    b438:	eaffff93 	b	b28c <CString::FormatV(char const*, std::__va_list)+0x1208>
    b43c:	e1500004 	cmp	r0, r4
    b440:	2afffeb0 	bcs	af08 <CString::FormatV(char const*, std::__va_list)+0xe84>
    b444:	eafffc4e 	b	a584 <CString::FormatV(char const*, std::__va_list)+0x500>
    b448:	cccccccd 	.word	0xcccccccd

0000b44c <CString::Format(char const*, ...)>:
    b44c:	e92d000e 	push	{r1, r2, r3}
    b450:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b454:	e24dd008 	sub	sp, sp, #8
    b458:	e28d3010 	add	r3, sp, #16
    b45c:	e1a02003 	mov	r2, r3
    b460:	e59d100c 	ldr	r1, [sp, #12]
    b464:	e58d3004 	str	r3, [sp, #4]
    b468:	ebfffb05 	bl	a084 <CString::FormatV(char const*, std::__va_list)>
    b46c:	e28dd008 	add	sp, sp, #8
    b470:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b474:	e28dd00c 	add	sp, sp, #12
    b478:	e12fff1e 	bx	lr

0000b47c <CInterruptSystem::CInterruptSystem()>:
    b47c:	e1a0c000 	mov	ip, r0
    b480:	e2802f47 	add	r2, r0, #284	; 0x11c
    b484:	e1a00002 	mov	r0, r2
    b488:	e3a01000 	mov	r1, #0
    b48c:	e24c3004 	sub	r3, ip, #4
    b490:	e5a31004 	str	r1, [r3, #4]!
    b494:	e1530000 	cmp	r3, r0
    b498:	e5a21004 	str	r1, [r2, #4]!
    b49c:	1afffffb 	bne	b490 <CInterruptSystem::CInterruptSystem()+0x14>
    b4a0:	e59f3008 	ldr	r3, [pc, #8]	; b4b0 <CInterruptSystem::CInterruptSystem()+0x34>
    b4a4:	e1a0000c 	mov	r0, ip
    b4a8:	e583c000 	str	ip, [r3]
    b4ac:	e12fff1e 	bx	lr
    b4b0:	00013d60 	.word	0x00013d60

0000b4b4 <CInterruptSystem::~CInterruptSystem()>:
    b4b4:	e3a02000 	mov	r2, #0
    b4b8:	e59f3004 	ldr	r3, [pc, #4]	; b4c4 <CInterruptSystem::~CInterruptSystem()+0x10>
    b4bc:	e5832000 	str	r2, [r3]
    b4c0:	e12fff1e 	bx	lr
    b4c4:	00013d60 	.word	0x00013d60

0000b4c8 <CInterruptSystem::Initialize()>:
    b4c8:	e92d4010 	push	{r4, lr}
    b4cc:	e3a04000 	mov	r4, #0
    b4d0:	e59f204c 	ldr	r2, [pc, #76]	; b524 <CInterruptSystem::Initialize()+0x5c>
    b4d4:	e59f304c 	ldr	r3, [pc, #76]	; b528 <CInterruptSystem::Initialize()+0x60>
    b4d8:	e1a02142 	asr	r2, r2, #2
    b4dc:	e1a03143 	asr	r3, r3, #2
    b4e0:	e2422002 	sub	r2, r2, #2
    b4e4:	e2433002 	sub	r3, r3, #2
    b4e8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    b4ec:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    b4f0:	e1c421f8 	strd	r2, [r4, #24]
    b4f4:	eb000669 	bl	cea0 <SyncDataAndInstructionCache>
    b4f8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    b4fc:	e3e02000 	mvn	r2, #0
    b500:	e59f3024 	ldr	r3, [pc, #36]	; b52c <CInterruptSystem::Initialize()+0x64>
    b504:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b508:	e583221c 	str	r2, [r3, #540]	; 0x21c
    b50c:	e5832220 	str	r2, [r3, #544]	; 0x220
    b510:	e5832224 	str	r2, [r3, #548]	; 0x224
    b514:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    b518:	f1080080 	cpsie	i
    b51c:	e3a00001 	mov	r0, #1
    b520:	e8bd8010 	pop	{r4, pc}
    b524:	0000e558 	.word	0x0000e558
    b528:	0000e564 	.word	0x0000e564
    b52c:	2000b000 	.word	0x2000b000

0000b530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    b530:	e3510047 	cmp	r1, #71	; 0x47
    b534:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b538:	e1a04001 	mov	r4, r1
    b53c:	e1a05000 	mov	r5, r0
    b540:	e1a08002 	mov	r8, r2
    b544:	e1a07003 	mov	r7, r3
    b548:	8a000021 	bhi	b5d4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xa4>
    b54c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b550:	e0856104 	add	r6, r5, r4, lsl #2
    b554:	e3530000 	cmp	r3, #0
    b558:	0a000003 	beq	b56c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
    b55c:	e3a02060 	mov	r2, #96	; 0x60
    b560:	e59f1080 	ldr	r1, [pc, #128]	; b5e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb8>
    b564:	e59f0080 	ldr	r0, [pc, #128]	; b5ec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xbc>
    b568:	ebfff51c 	bl	89e0 <assertion_failed>
    b56c:	e7858104 	str	r8, [r5, r4, lsl #2]
    b570:	e3a02000 	mov	r2, #0
    b574:	e5867120 	str	r7, [r6, #288]	; 0x120
    b578:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    b57c:	e3540047 	cmp	r4, #71	; 0x47
    b580:	8a00000d 	bhi	b5bc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x8c>
    b584:	e354001f 	cmp	r4, #31
    b588:	959f2060 	ldrls	r2, [pc, #96]	; b5f0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xc0>
    b58c:	8a000006 	bhi	b5ac <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x7c>
    b590:	e3a03001 	mov	r3, #1
    b594:	e204401f 	and	r4, r4, #31
    b598:	e1a04413 	lsl	r4, r3, r4
    b59c:	e5824000 	str	r4, [r2]
    b5a0:	e3a03000 	mov	r3, #0
    b5a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b5a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b5ac:	e354003f 	cmp	r4, #63	; 0x3f
    b5b0:	959f203c 	ldrls	r2, [pc, #60]	; b5f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xc4>
    b5b4:	9afffff5 	bls	b590 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x60>
    b5b8:	ea000003 	b	b5cc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
    b5bc:	e3a02090 	mov	r2, #144	; 0x90
    b5c0:	e59f1020 	ldr	r1, [pc, #32]	; b5e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb8>
    b5c4:	e59f002c 	ldr	r0, [pc, #44]	; b5f8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xc8>
    b5c8:	ebfff504 	bl	89e0 <assertion_failed>
    b5cc:	e59f2028 	ldr	r2, [pc, #40]	; b5fc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xcc>
    b5d0:	eaffffee 	b	b590 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x60>
    b5d4:	e3a0205f 	mov	r2, #95	; 0x5f
    b5d8:	e59f1008 	ldr	r1, [pc, #8]	; b5e8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb8>
    b5dc:	e59f0014 	ldr	r0, [pc, #20]	; b5f8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xc8>
    b5e0:	ebfff4fe 	bl	89e0 <assertion_failed>
    b5e4:	eaffffd8 	b	b54c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
    b5e8:	00013304 	.word	0x00013304
    b5ec:	00013328 	.word	0x00013328
    b5f0:	2000b210 	.word	0x2000b210
    b5f4:	2000b214 	.word	0x2000b214
    b5f8:	00013314 	.word	0x00013314
    b5fc:	2000b218 	.word	0x2000b218

0000b600 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    b600:	e3510047 	cmp	r1, #71	; 0x47
    b604:	e92d4070 	push	{r4, r5, r6, lr}
    b608:	e1a04001 	mov	r4, r1
    b60c:	e1a05000 	mov	r5, r0
    b610:	8a00001d 	bhi	b68c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x8c>
    b614:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b618:	e0856104 	add	r6, r5, r4, lsl #2
    b61c:	e3530000 	cmp	r3, #0
    b620:	0a000021 	beq	b6ac <CInterruptSystem::DisconnectIRQ(unsigned int)+0xac>
    b624:	e3a03000 	mov	r3, #0
    b628:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b62c:	e3540047 	cmp	r4, #71	; 0x47
    b630:	8a00000f 	bhi	b674 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
    b634:	e354001f 	cmp	r4, #31
    b638:	959f1080 	ldrls	r1, [pc, #128]	; b6c0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc0>
    b63c:	8a000008 	bhi	b664 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    b640:	e3a03001 	mov	r3, #1
    b644:	e204201f 	and	r2, r4, #31
    b648:	e1a03213 	lsl	r3, r3, r2
    b64c:	e5813000 	str	r3, [r1]
    b650:	e3a03000 	mov	r3, #0
    b654:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b658:	e7853104 	str	r3, [r5, r4, lsl #2]
    b65c:	e5863120 	str	r3, [r6, #288]	; 0x120
    b660:	e8bd8070 	pop	{r4, r5, r6, pc}
    b664:	e354003f 	cmp	r4, #63	; 0x3f
    b668:	959f1054 	ldrls	r1, [pc, #84]	; b6c4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc4>
    b66c:	9afffff3 	bls	b640 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x40>
    b670:	ea000003 	b	b684 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x84>
    b674:	e3a0209b 	mov	r2, #155	; 0x9b
    b678:	e59f1048 	ldr	r1, [pc, #72]	; b6c8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc8>
    b67c:	e59f0048 	ldr	r0, [pc, #72]	; b6cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0xcc>
    b680:	ebfff4d6 	bl	89e0 <assertion_failed>
    b684:	e59f1044 	ldr	r1, [pc, #68]	; b6d0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xd0>
    b688:	eaffffec 	b	b640 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x40>
    b68c:	e3a0206a 	mov	r2, #106	; 0x6a
    b690:	e59f1030 	ldr	r1, [pc, #48]	; b6c8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc8>
    b694:	e59f0030 	ldr	r0, [pc, #48]	; b6cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0xcc>
    b698:	ebfff4d0 	bl	89e0 <assertion_failed>
    b69c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    b6a0:	e0856104 	add	r6, r5, r4, lsl #2
    b6a4:	e3530000 	cmp	r3, #0
    b6a8:	1affffdd 	bne	b624 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    b6ac:	e3a0206b 	mov	r2, #107	; 0x6b
    b6b0:	e59f1010 	ldr	r1, [pc, #16]	; b6c8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xc8>
    b6b4:	e59f0018 	ldr	r0, [pc, #24]	; b6d4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xd4>
    b6b8:	ebfff4c8 	bl	89e0 <assertion_failed>
    b6bc:	eaffffd8 	b	b624 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    b6c0:	2000b21c 	.word	0x2000b21c
    b6c4:	2000b220 	.word	0x2000b220
    b6c8:	00013304 	.word	0x00013304
    b6cc:	00013314 	.word	0x00013314
    b6d0:	2000b224 	.word	0x2000b224
    b6d4:	00013344 	.word	0x00013344

0000b6d8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
    b6d8:	e3510047 	cmp	r1, #71	; 0x47
    b6dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6e0:	e1a04001 	mov	r4, r1
    b6e4:	e1a06002 	mov	r6, r2
    b6e8:	e1a07003 	mov	r7, r3
    b6ec:	8a000018 	bhi	b754 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x7c>
    b6f0:	e3560000 	cmp	r6, #0
    b6f4:	0a00001c 	beq	b76c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x94>
    b6f8:	e59f5080 	ldr	r5, [pc, #128]	; b780 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
    b6fc:	e5953000 	ldr	r3, [r5]
    b700:	e3530000 	cmp	r3, #0
    b704:	0a000003 	beq	b718 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x40>
    b708:	e3a0207a 	mov	r2, #122	; 0x7a
    b70c:	e59f1070 	ldr	r1, [pc, #112]	; b784 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b710:	e59f0070 	ldr	r0, [pc, #112]	; b788 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb0>
    b714:	ebfff4b1 	bl	89e0 <assertion_failed>
    b718:	e1c560f0 	strd	r6, [r5]
    b71c:	e3a03000 	mov	r3, #0
    b720:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b724:	e3540047 	cmp	r4, #71	; 0x47
    b728:	9a000003 	bls	b73c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x64>
    b72c:	e3a020a6 	mov	r2, #166	; 0xa6
    b730:	e59f104c 	ldr	r1, [pc, #76]	; b784 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b734:	e59f0050 	ldr	r0, [pc, #80]	; b78c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb4>
    b738:	ebfff4a8 	bl	89e0 <assertion_failed>
    b73c:	e59f304c 	ldr	r3, [pc, #76]	; b790 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
    b740:	e3844080 	orr	r4, r4, #128	; 0x80
    b744:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b748:	e3a03000 	mov	r3, #0
    b74c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b754:	e3a02078 	mov	r2, #120	; 0x78
    b758:	e59f1024 	ldr	r1, [pc, #36]	; b784 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b75c:	e59f0028 	ldr	r0, [pc, #40]	; b78c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb4>
    b760:	ebfff49e 	bl	89e0 <assertion_failed>
    b764:	e3560000 	cmp	r6, #0
    b768:	1affffe2 	bne	b6f8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    b76c:	e3a02079 	mov	r2, #121	; 0x79
    b770:	e59f100c 	ldr	r1, [pc, #12]	; b784 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xac>
    b774:	e59f0018 	ldr	r0, [pc, #24]	; b794 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
    b778:	ebfff498 	bl	89e0 <assertion_failed>
    b77c:	eaffffdd 	b	b6f8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
    b780:	00013d28 	.word	0x00013d28
    b784:	00013304 	.word	0x00013304
    b788:	00013374 	.word	0x00013374
    b78c:	00013360 	.word	0x00013360
    b790:	2000b000 	.word	0x2000b000
    b794:	00013394 	.word	0x00013394

0000b798 <CInterruptSystem::DisconnectFIQ()>:
    b798:	e92d4010 	push	{r4, lr}
    b79c:	e59f403c 	ldr	r4, [pc, #60]	; b7e0 <CInterruptSystem::DisconnectFIQ()+0x48>
    b7a0:	e5943000 	ldr	r3, [r4]
    b7a4:	e3530000 	cmp	r3, #0
    b7a8:	0a000007 	beq	b7cc <CInterruptSystem::DisconnectFIQ()+0x34>
    b7ac:	e3a03000 	mov	r3, #0
    b7b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b7b4:	e59f2028 	ldr	r2, [pc, #40]	; b7e4 <CInterruptSystem::DisconnectFIQ()+0x4c>
    b7b8:	e582320c 	str	r3, [r2, #524]	; 0x20c
    b7bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b7c0:	e5843000 	str	r3, [r4]
    b7c4:	e5843004 	str	r3, [r4, #4]
    b7c8:	e8bd8010 	pop	{r4, pc}
    b7cc:	e3a02084 	mov	r2, #132	; 0x84
    b7d0:	e59f1010 	ldr	r1, [pc, #16]	; b7e8 <CInterruptSystem::DisconnectFIQ()+0x50>
    b7d4:	e59f0010 	ldr	r0, [pc, #16]	; b7ec <CInterruptSystem::DisconnectFIQ()+0x54>
    b7d8:	ebfff480 	bl	89e0 <assertion_failed>
    b7dc:	eafffff2 	b	b7ac <CInterruptSystem::DisconnectFIQ()+0x14>
    b7e0:	00013d28 	.word	0x00013d28
    b7e4:	2000b000 	.word	0x2000b000
    b7e8:	00013304 	.word	0x00013304
    b7ec:	0001338c 	.word	0x0001338c

0000b7f0 <CInterruptSystem::EnableIRQ(unsigned int)>:
    b7f0:	e92d4010 	push	{r4, lr}
    b7f4:	e3a03000 	mov	r3, #0
    b7f8:	e1a04000 	mov	r4, r0
    b7fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b800:	e3500047 	cmp	r0, #71	; 0x47
    b804:	8a00000d 	bhi	b840 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
    b808:	e350001f 	cmp	r0, #31
    b80c:	959f2044 	ldrls	r2, [pc, #68]	; b858 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
    b810:	8a000006 	bhi	b830 <CInterruptSystem::EnableIRQ(unsigned int)+0x40>
    b814:	e3a03001 	mov	r3, #1
    b818:	e204401f 	and	r4, r4, #31
    b81c:	e1a04413 	lsl	r4, r3, r4
    b820:	e5824000 	str	r4, [r2]
    b824:	e3a03000 	mov	r3, #0
    b828:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b82c:	e8bd8010 	pop	{r4, pc}
    b830:	e350003f 	cmp	r0, #63	; 0x3f
    b834:	959f2020 	ldrls	r2, [pc, #32]	; b85c <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
    b838:	9afffff5 	bls	b814 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    b83c:	ea000003 	b	b850 <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
    b840:	e3a02090 	mov	r2, #144	; 0x90
    b844:	e59f1014 	ldr	r1, [pc, #20]	; b860 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
    b848:	e59f0014 	ldr	r0, [pc, #20]	; b864 <CInterruptSystem::EnableIRQ(unsigned int)+0x74>
    b84c:	ebfff463 	bl	89e0 <assertion_failed>
    b850:	e59f2010 	ldr	r2, [pc, #16]	; b868 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>
    b854:	eaffffee 	b	b814 <CInterruptSystem::EnableIRQ(unsigned int)+0x24>
    b858:	2000b210 	.word	0x2000b210
    b85c:	2000b214 	.word	0x2000b214
    b860:	00013304 	.word	0x00013304
    b864:	00013314 	.word	0x00013314
    b868:	2000b218 	.word	0x2000b218

0000b86c <CInterruptSystem::DisableIRQ(unsigned int)>:
    b86c:	e92d4010 	push	{r4, lr}
    b870:	e3a03000 	mov	r3, #0
    b874:	e1a04000 	mov	r4, r0
    b878:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b87c:	e3500047 	cmp	r0, #71	; 0x47
    b880:	8a00000d 	bhi	b8bc <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
    b884:	e350001f 	cmp	r0, #31
    b888:	959f2044 	ldrls	r2, [pc, #68]	; b8d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
    b88c:	8a000006 	bhi	b8ac <CInterruptSystem::DisableIRQ(unsigned int)+0x40>
    b890:	e3a03001 	mov	r3, #1
    b894:	e204401f 	and	r4, r4, #31
    b898:	e1a04413 	lsl	r4, r3, r4
    b89c:	e5824000 	str	r4, [r2]
    b8a0:	e3a03000 	mov	r3, #0
    b8a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b8a8:	e8bd8010 	pop	{r4, pc}
    b8ac:	e350003f 	cmp	r0, #63	; 0x3f
    b8b0:	959f2020 	ldrls	r2, [pc, #32]	; b8d8 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
    b8b4:	9afffff5 	bls	b890 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    b8b8:	ea000003 	b	b8cc <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
    b8bc:	e3a0209b 	mov	r2, #155	; 0x9b
    b8c0:	e59f1014 	ldr	r1, [pc, #20]	; b8dc <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
    b8c4:	e59f0014 	ldr	r0, [pc, #20]	; b8e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x74>
    b8c8:	ebfff444 	bl	89e0 <assertion_failed>
    b8cc:	e59f2010 	ldr	r2, [pc, #16]	; b8e4 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>
    b8d0:	eaffffee 	b	b890 <CInterruptSystem::DisableIRQ(unsigned int)+0x24>
    b8d4:	2000b21c 	.word	0x2000b21c
    b8d8:	2000b220 	.word	0x2000b220
    b8dc:	00013304 	.word	0x00013304
    b8e0:	00013314 	.word	0x00013314
    b8e4:	2000b224 	.word	0x2000b224

0000b8e8 <CInterruptSystem::EnableFIQ(unsigned int)>:
    b8e8:	e92d4010 	push	{r4, lr}
    b8ec:	e3a03000 	mov	r3, #0
    b8f0:	e1a04000 	mov	r4, r0
    b8f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b8f8:	e3500047 	cmp	r0, #71	; 0x47
    b8fc:	9a000003 	bls	b910 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
    b900:	e3a020a6 	mov	r2, #166	; 0xa6
    b904:	e59f101c 	ldr	r1, [pc, #28]	; b928 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
    b908:	e59f001c 	ldr	r0, [pc, #28]	; b92c <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
    b90c:	ebfff433 	bl	89e0 <assertion_failed>
    b910:	e59f3018 	ldr	r3, [pc, #24]	; b930 <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
    b914:	e3844080 	orr	r4, r4, #128	; 0x80
    b918:	e583420c 	str	r4, [r3, #524]	; 0x20c
    b91c:	e3a03000 	mov	r3, #0
    b920:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b924:	e8bd8010 	pop	{r4, pc}
    b928:	00013304 	.word	0x00013304
    b92c:	00013360 	.word	0x00013360
    b930:	2000b000 	.word	0x2000b000

0000b934 <CInterruptSystem::DisableFIQ()>:
    b934:	e3a03000 	mov	r3, #0
    b938:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b93c:	e59f2008 	ldr	r2, [pc, #8]	; b94c <CInterruptSystem::DisableFIQ()+0x18>
    b940:	e582320c 	str	r3, [r2, #524]	; 0x20c
    b944:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b948:	e12fff1e 	bx	lr
    b94c:	2000b000 	.word	0x2000b000

0000b950 <CInterruptSystem::Get()>:
    b950:	e92d4010 	push	{r4, lr}
    b954:	e59f4020 	ldr	r4, [pc, #32]	; b97c <CInterruptSystem::Get()+0x2c>
    b958:	e5940000 	ldr	r0, [r4]
    b95c:	e3500000 	cmp	r0, #0
    b960:	18bd8010 	popne	{r4, pc}
    b964:	e3a020b8 	mov	r2, #184	; 0xb8
    b968:	e59f1010 	ldr	r1, [pc, #16]	; b980 <CInterruptSystem::Get()+0x30>
    b96c:	e59f0010 	ldr	r0, [pc, #16]	; b984 <CInterruptSystem::Get()+0x34>
    b970:	ebfff41a 	bl	89e0 <assertion_failed>
    b974:	e5940000 	ldr	r0, [r4]
    b978:	e8bd8010 	pop	{r4, pc}
    b97c:	00013d60 	.word	0x00013d60
    b980:	00013304 	.word	0x00013304
    b984:	0001311c 	.word	0x0001311c

0000b988 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    b988:	e3510047 	cmp	r1, #71	; 0x47
    b98c:	e92d4070 	push	{r4, r5, r6, lr}
    b990:	e1a05001 	mov	r5, r1
    b994:	e1a04000 	mov	r4, r0
    b998:	8a000007 	bhi	b9bc <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    b99c:	e7943105 	ldr	r3, [r4, r5, lsl #2]
    b9a0:	e0844105 	add	r4, r4, r5, lsl #2
    b9a4:	e3530000 	cmp	r3, #0
    b9a8:	0a000008 	beq	b9d0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x48>
    b9ac:	e5940120 	ldr	r0, [r4, #288]	; 0x120
    b9b0:	e12fff33 	blx	r3
    b9b4:	e3a00001 	mov	r0, #1
    b9b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9bc:	e3a020be 	mov	r2, #190	; 0xbe
    b9c0:	e59f1064 	ldr	r1, [pc, #100]	; ba2c <CInterruptSystem::CallIRQHandler(unsigned int)+0xa4>
    b9c4:	e59f0064 	ldr	r0, [pc, #100]	; ba30 <CInterruptSystem::CallIRQHandler(unsigned int)+0xa8>
    b9c8:	ebfff404 	bl	89e0 <assertion_failed>
    b9cc:	eafffff2 	b	b99c <CInterruptSystem::CallIRQHandler(unsigned int)+0x14>
    b9d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b9d4:	e3550047 	cmp	r5, #71	; 0x47
    b9d8:	8a000009 	bhi	ba04 <CInterruptSystem::CallIRQHandler(unsigned int)+0x7c>
    b9dc:	e355001f 	cmp	r5, #31
    b9e0:	959f204c 	ldrls	r2, [pc, #76]	; ba34 <CInterruptSystem::CallIRQHandler(unsigned int)+0xac>
    b9e4:	8a00000c 	bhi	ba1c <CInterruptSystem::CallIRQHandler(unsigned int)+0x94>
    b9e8:	e3a03001 	mov	r3, #1
    b9ec:	e205501f 	and	r5, r5, #31
    b9f0:	e1a05513 	lsl	r5, r3, r5
    b9f4:	e5825000 	str	r5, [r2]
    b9f8:	e3a00000 	mov	r0, #0
    b9fc:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
    ba00:	e8bd8070 	pop	{r4, r5, r6, pc}
    ba04:	e3a0209b 	mov	r2, #155	; 0x9b
    ba08:	e59f101c 	ldr	r1, [pc, #28]	; ba2c <CInterruptSystem::CallIRQHandler(unsigned int)+0xa4>
    ba0c:	e59f001c 	ldr	r0, [pc, #28]	; ba30 <CInterruptSystem::CallIRQHandler(unsigned int)+0xa8>
    ba10:	ebfff3f2 	bl	89e0 <assertion_failed>
    ba14:	e59f201c 	ldr	r2, [pc, #28]	; ba38 <CInterruptSystem::CallIRQHandler(unsigned int)+0xb0>
    ba18:	eafffff2 	b	b9e8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x60>
    ba1c:	e355003f 	cmp	r5, #63	; 0x3f
    ba20:	959f2014 	ldrls	r2, [pc, #20]	; ba3c <CInterruptSystem::CallIRQHandler(unsigned int)+0xb4>
    ba24:	9affffef 	bls	b9e8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x60>
    ba28:	eafffff9 	b	ba14 <CInterruptSystem::CallIRQHandler(unsigned int)+0x8c>
    ba2c:	00013304 	.word	0x00013304
    ba30:	00013314 	.word	0x00013314
    ba34:	2000b21c 	.word	0x2000b21c
    ba38:	2000b224 	.word	0x2000b224
    ba3c:	2000b220 	.word	0x2000b220

0000ba40 <CInterruptSystem::InterruptHandler()>:
    ba40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba44:	e59f8138 	ldr	r8, [pc, #312]	; bb84 <CInterruptSystem::InterruptHandler()+0x144>
    ba48:	e24dd014 	sub	sp, sp, #20
    ba4c:	e5983000 	ldr	r3, [r8]
    ba50:	e3530000 	cmp	r3, #0
    ba54:	0a00003b 	beq	bb48 <CInterruptSystem::InterruptHandler()+0x108>
    ba58:	e3a06000 	mov	r6, #0
    ba5c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    ba60:	e59f3120 	ldr	r3, [pc, #288]	; bb88 <CInterruptSystem::InterruptHandler()+0x148>
    ba64:	e5932204 	ldr	r2, [r3, #516]	; 0x204
    ba68:	e58d2004 	str	r2, [sp, #4]
    ba6c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    ba70:	e58d2008 	str	r2, [sp, #8]
    ba74:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    ba78:	e6ef3073 	uxtb	r3, r3
    ba7c:	e58d300c 	str	r3, [sp, #12]
    ba80:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    ba84:	e59fb100 	ldr	fp, [pc, #256]	; bb8c <CInterruptSystem::InterruptHandler()+0x14c>
    ba88:	e28d9004 	add	r9, sp, #4
    ba8c:	e7994106 	ldr	r4, [r9, r6, lsl #2]
    ba90:	e3540000 	cmp	r4, #0
    ba94:	1a000004 	bne	baac <CInterruptSystem::InterruptHandler()+0x6c>
    ba98:	e2866001 	add	r6, r6, #1
    ba9c:	e3560003 	cmp	r6, #3
    baa0:	1afffff9 	bne	ba8c <CInterruptSystem::InterruptHandler()+0x4c>
    baa4:	e28dd014 	add	sp, sp, #20
    baa8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    baac:	e59fa0dc 	ldr	sl, [pc, #220]	; bb90 <CInterruptSystem::InterruptHandler()+0x150>
    bab0:	e1a05286 	lsl	r5, r6, #5
    bab4:	ea000002 	b	bac4 <CInterruptSystem::InterruptHandler()+0x84>
    bab8:	e1b040a4 	lsrs	r4, r4, #1
    babc:	e2855001 	add	r5, r5, #1
    bac0:	0afffff4 	beq	ba98 <CInterruptSystem::InterruptHandler()+0x58>
    bac4:	e3140001 	tst	r4, #1
    bac8:	0afffffa 	beq	bab8 <CInterruptSystem::InterruptHandler()+0x78>
    bacc:	e3550047 	cmp	r5, #71	; 0x47
    bad0:	e5987000 	ldr	r7, [r8]
    bad4:	8a000007 	bhi	baf8 <CInterruptSystem::InterruptHandler()+0xb8>
    bad8:	e7972105 	ldr	r2, [r7, r5, lsl #2]
    badc:	e3520000 	cmp	r2, #0
    bae0:	0a00000b 	beq	bb14 <CInterruptSystem::InterruptHandler()+0xd4>
    bae4:	e2855048 	add	r5, r5, #72	; 0x48
    bae8:	e7970105 	ldr	r0, [r7, r5, lsl #2]
    baec:	e28dd014 	add	sp, sp, #20
    baf0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    baf4:	e12fff12 	bx	r2
    baf8:	e3a020be 	mov	r2, #190	; 0xbe
    bafc:	e1a0100b 	mov	r1, fp
    bb00:	e1a0000a 	mov	r0, sl
    bb04:	ebfff3b5 	bl	89e0 <assertion_failed>
    bb08:	e7972105 	ldr	r2, [r7, r5, lsl #2]
    bb0c:	e3520000 	cmp	r2, #0
    bb10:	1afffff3 	bne	bae4 <CInterruptSystem::InterruptHandler()+0xa4>
    bb14:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    bb18:	e3550047 	cmp	r5, #71	; 0x47
    bb1c:	8a000013 	bhi	bb70 <CInterruptSystem::InterruptHandler()+0x130>
    bb20:	e355001f 	cmp	r5, #31
    bb24:	959f2068 	ldrls	r2, [pc, #104]	; bb94 <CInterruptSystem::InterruptHandler()+0x154>
    bb28:	8a00000b 	bhi	bb5c <CInterruptSystem::InterruptHandler()+0x11c>
    bb2c:	e3a01001 	mov	r1, #1
    bb30:	e205301f 	and	r3, r5, #31
    bb34:	e1a03311 	lsl	r3, r1, r3
    bb38:	e5823000 	str	r3, [r2]
    bb3c:	e3a03000 	mov	r3, #0
    bb40:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bb44:	eaffffdb 	b	bab8 <CInterruptSystem::InterruptHandler()+0x78>
    bb48:	e3a020d1 	mov	r2, #209	; 0xd1
    bb4c:	e59f1038 	ldr	r1, [pc, #56]	; bb8c <CInterruptSystem::InterruptHandler()+0x14c>
    bb50:	e59f0040 	ldr	r0, [pc, #64]	; bb98 <CInterruptSystem::InterruptHandler()+0x158>
    bb54:	ebfff3a1 	bl	89e0 <assertion_failed>
    bb58:	eaffffbe 	b	ba58 <CInterruptSystem::InterruptHandler()+0x18>
    bb5c:	e355003f 	cmp	r5, #63	; 0x3f
    bb60:	959f2034 	ldrls	r2, [pc, #52]	; bb9c <CInterruptSystem::InterruptHandler()+0x15c>
    bb64:	9afffff0 	bls	bb2c <CInterruptSystem::InterruptHandler()+0xec>
    bb68:	e59f2030 	ldr	r2, [pc, #48]	; bba0 <CInterruptSystem::InterruptHandler()+0x160>
    bb6c:	eaffffee 	b	bb2c <CInterruptSystem::InterruptHandler()+0xec>
    bb70:	e3a0209b 	mov	r2, #155	; 0x9b
    bb74:	e1a0100b 	mov	r1, fp
    bb78:	e1a0000a 	mov	r0, sl
    bb7c:	ebfff397 	bl	89e0 <assertion_failed>
    bb80:	eafffff8 	b	bb68 <CInterruptSystem::InterruptHandler()+0x128>
    bb84:	00013d60 	.word	0x00013d60
    bb88:	2000b000 	.word	0x2000b000
    bb8c:	00013304 	.word	0x00013304
    bb90:	00013314 	.word	0x00013314
    bb94:	2000b21c 	.word	0x2000b21c
    bb98:	0001311c 	.word	0x0001311c
    bb9c:	2000b220 	.word	0x2000b220
    bba0:	2000b224 	.word	0x2000b224

0000bba4 <InterruptHandler>:
    bba4:	e92d4010 	push	{r4, lr}
    bba8:	e3a04000 	mov	r4, #0
    bbac:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    bbb0:	ebffffa2 	bl	ba40 <CInterruptSystem::InterruptHandler()>
    bbb4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    bbb8:	e8bd8010 	pop	{r4, pc}

0000bbbc <CMachineInfo::CMachineInfo()>:
    bbbc:	e3a03000 	mov	r3, #0
    bbc0:	e92d4070 	push	{r4, r5, r6, lr}
    bbc4:	e3a0100c 	mov	r1, #12
    bbc8:	e3a06003 	mov	r6, #3
    bbcc:	e59f22cc 	ldr	r2, [pc, #716]	; bea0 <CMachineInfo::CMachineInfo()+0x2e4>
    bbd0:	e24dd020 	sub	sp, sp, #32
    bbd4:	e5925000 	ldr	r5, [r2]
    bbd8:	e1a04000 	mov	r4, r0
    bbdc:	e1550003 	cmp	r5, r3
    bbe0:	e5c01004 	strb	r1, [r0, #4]
    bbe4:	e5803000 	str	r3, [r0]
    bbe8:	e5803008 	str	r3, [r0, #8]
    bbec:	e580300c 	str	r3, [r0, #12]
    bbf0:	e5803014 	str	r3, [r0, #20]
    bbf4:	e5c06010 	strb	r6, [r0, #16]
    bbf8:	0a00000c 	beq	bc30 <CMachineInfo::CMachineInfo()+0x74>
    bbfc:	e1c500d8 	ldrd	r0, [r5, #8]
    bc00:	e5953000 	ldr	r3, [r5]
    bc04:	e5d5c004 	ldrb	ip, [r5, #4]
    bc08:	e5d52010 	ldrb	r2, [r5, #16]
    bc0c:	e5843000 	str	r3, [r4]
    bc10:	e5953014 	ldr	r3, [r5, #20]
    bc14:	e1c400f8 	strd	r0, [r4, #8]
    bc18:	e1a00004 	mov	r0, r4
    bc1c:	e5c4c004 	strb	ip, [r4, #4]
    bc20:	e5c42010 	strb	r2, [r4, #16]
    bc24:	e5843014 	str	r3, [r4, #20]
    bc28:	e28dd020 	add	sp, sp, #32
    bc2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc30:	e28d000c 	add	r0, sp, #12
    bc34:	e5824000 	str	r4, [r2]
    bc38:	eb0003aa 	bl	cae8 <CBcmPropertyTags::CBcmPropertyTags()>
    bc3c:	e3a03010 	mov	r3, #16
    bc40:	e58d5000 	str	r5, [sp]
    bc44:	e28d000c 	add	r0, sp, #12
    bc48:	e08d2003 	add	r2, sp, r3
    bc4c:	e59f1250 	ldr	r1, [pc, #592]	; bea4 <CMachineInfo::CMachineInfo()+0x2e8>
    bc50:	eb0003af 	bl	cb14 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bc54:	e3500000 	cmp	r0, #0
    bc58:	0a000035 	beq	bd34 <CMachineInfo::CMachineInfo()+0x178>
    bc5c:	e59d301c 	ldr	r3, [sp, #28]
    bc60:	e2132502 	ands	r2, r3, #8388608	; 0x800000
    bc64:	e5843000 	str	r3, [r4]
    bc68:	0a000036 	beq	bd48 <CMachineInfo::CMachineInfo()+0x18c>
    bc6c:	e1a02223 	lsr	r2, r3, #4
    bc70:	e21220ff 	ands	r2, r2, #255	; 0xff
    bc74:	0a000012 	beq	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    bc78:	e3520001 	cmp	r2, #1
    bc7c:	0a000010 	beq	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    bc80:	e3520002 	cmp	r2, #2
    bc84:	0a00000e 	beq	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    bc88:	e3520003 	cmp	r2, #3
    bc8c:	0a00000c 	beq	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    bc90:	e3520004 	cmp	r2, #4
    bc94:	0a00000a 	beq	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    bc98:	e3520006 	cmp	r2, #6
    bc9c:	0a000063 	beq	be30 <CMachineInfo::CMachineInfo()+0x274>
    bca0:	e3520008 	cmp	r2, #8
    bca4:	0a000063 	beq	be38 <CMachineInfo::CMachineInfo()+0x27c>
    bca8:	e3520009 	cmp	r2, #9
    bcac:	0a000065 	beq	be48 <CMachineInfo::CMachineInfo()+0x28c>
    bcb0:	e352000a 	cmp	r2, #10
    bcb4:	0a000069 	beq	be60 <CMachineInfo::CMachineInfo()+0x2a4>
    bcb8:	e352000c 	cmp	r2, #12
    bcbc:	1a00001c 	bne	bd34 <CMachineInfo::CMachineInfo()+0x178>
    bcc0:	e3a02009 	mov	r2, #9
    bcc4:	e59f11dc 	ldr	r1, [pc, #476]	; bea8 <CMachineInfo::CMachineInfo()+0x2ec>
    bcc8:	e0822082 	add	r2, r2, r2, lsl #1
    bccc:	e0811102 	add	r1, r1, r2, lsl #2
    bcd0:	e5d1c004 	ldrb	ip, [r1, #4]
    bcd4:	e591e008 	ldr	lr, [r1, #8]
    bcd8:	e1a01623 	lsr	r1, r3, #12
    bcdc:	e201100f 	and	r1, r1, #15
    bce0:	e3510002 	cmp	r1, #2
    bce4:	e5c41010 	strb	r1, [r4, #16]
    bce8:	83a01003 	movhi	r1, #3
    bcec:	e1a02a23 	lsr	r2, r3, #20
    bcf0:	e2022007 	and	r2, r2, #7
    bcf4:	e3a00c01 	mov	r0, #256	; 0x100
    bcf8:	85c41010 	strbhi	r1, [r4, #16]
    bcfc:	e35c0003 	cmp	ip, #3
    bd00:	03520000 	cmpeq	r2, #0
    bd04:	e203300f 	and	r3, r3, #15
    bd08:	e1a00210 	lsl	r0, r0, r2
    bd0c:	e2833001 	add	r3, r3, #1
    bd10:	e5c4c004 	strb	ip, [r4, #4]
    bd14:	e584e008 	str	lr, [r4, #8]
    bd18:	e5840014 	str	r0, [r4, #20]
    bd1c:	e584300c 	str	r3, [r4, #12]
    bd20:	1a000003 	bne	bd34 <CMachineInfo::CMachineInfo()+0x178>
    bd24:	e3530001 	cmp	r3, #1
    bd28:	03a03001 	moveq	r3, #1
    bd2c:	13a03002 	movne	r3, #2
    bd30:	e5c43004 	strb	r3, [r4, #4]
    bd34:	e28d000c 	add	r0, sp, #12
    bd38:	eb000370 	bl	cb00 <CBcmPropertyTags::~CBcmPropertyTags()>
    bd3c:	e1a00004 	mov	r0, r4
    bd40:	e28dd020 	add	sp, sp, #32
    bd44:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd48:	e3530002 	cmp	r3, #2
    bd4c:	0a000020 	beq	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    bd50:	e3530003 	cmp	r3, #3
    bd54:	0a00002d 	beq	be10 <CMachineInfo::CMachineInfo()+0x254>
    bd58:	e3530004 	cmp	r3, #4
    bd5c:	0a000029 	beq	be08 <CMachineInfo::CMachineInfo()+0x24c>
    bd60:	e3530005 	cmp	r3, #5
    bd64:	0a00002b 	beq	be18 <CMachineInfo::CMachineInfo()+0x25c>
    bd68:	e3530006 	cmp	r3, #6
    bd6c:	0a00002b 	beq	be20 <CMachineInfo::CMachineInfo()+0x264>
    bd70:	e3530007 	cmp	r3, #7
    bd74:	0a00002b 	beq	be28 <CMachineInfo::CMachineInfo()+0x26c>
    bd78:	e3530008 	cmp	r3, #8
    bd7c:	0a00002f 	beq	be40 <CMachineInfo::CMachineInfo()+0x284>
    bd80:	e3530009 	cmp	r3, #9
    bd84:	0a000031 	beq	be50 <CMachineInfo::CMachineInfo()+0x294>
    bd88:	e353000d 	cmp	r3, #13
    bd8c:	0a000031 	beq	be58 <CMachineInfo::CMachineInfo()+0x29c>
    bd90:	e353000e 	cmp	r3, #14
    bd94:	0a000033 	beq	be68 <CMachineInfo::CMachineInfo()+0x2ac>
    bd98:	e353000f 	cmp	r3, #15
    bd9c:	0a000033 	beq	be70 <CMachineInfo::CMachineInfo()+0x2b4>
    bda0:	e3530010 	cmp	r3, #16
    bda4:	0a000033 	beq	be78 <CMachineInfo::CMachineInfo()+0x2bc>
    bda8:	e3530011 	cmp	r3, #17
    bdac:	0a000033 	beq	be80 <CMachineInfo::CMachineInfo()+0x2c4>
    bdb0:	e3530012 	cmp	r3, #18
    bdb4:	0a000033 	beq	be88 <CMachineInfo::CMachineInfo()+0x2cc>
    bdb8:	e3530013 	cmp	r3, #19
    bdbc:	0a000033 	beq	be90 <CMachineInfo::CMachineInfo()+0x2d4>
    bdc0:	e3530014 	cmp	r3, #20
    bdc4:	0a000033 	beq	be98 <CMachineInfo::CMachineInfo()+0x2dc>
    bdc8:	e3530015 	cmp	r3, #21
    bdcc:	1affffd8 	bne	bd34 <CMachineInfo::CMachineInfo()+0x178>
    bdd0:	e3a02010 	mov	r2, #16
    bdd4:	e3a01001 	mov	r1, #1
    bdd8:	e3a03000 	mov	r3, #0
    bddc:	e59f60c4 	ldr	r6, [pc, #196]	; bea8 <CMachineInfo::CMachineInfo()+0x2ec>
    bde0:	e5841008 	str	r1, [r4, #8]
    bde4:	e0866202 	add	r6, r6, r2, lsl #4
    bde8:	e5d6007c 	ldrb	r0, [r6, #124]	; 0x7c
    bdec:	e5961080 	ldr	r1, [r6, #128]	; 0x80
    bdf0:	e5962084 	ldr	r2, [r6, #132]	; 0x84
    bdf4:	e5c40004 	strb	r0, [r4, #4]
    bdf8:	e584100c 	str	r1, [r4, #12]
    bdfc:	e5842014 	str	r2, [r4, #20]
    be00:	e5c43010 	strb	r3, [r4, #16]
    be04:	eaffffca 	b	bd34 <CMachineInfo::CMachineInfo()+0x178>
    be08:	e3a02002 	mov	r2, #2
    be0c:	eafffff0 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be10:	e3a02001 	mov	r2, #1
    be14:	eaffffee 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be18:	e1a02006 	mov	r2, r6
    be1c:	eaffffec 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be20:	e3a02004 	mov	r2, #4
    be24:	eaffffea 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be28:	e3a02005 	mov	r2, #5
    be2c:	eaffffe8 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be30:	e3a02005 	mov	r2, #5
    be34:	eaffffa2 	b	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    be38:	e3a02006 	mov	r2, #6
    be3c:	eaffffa0 	b	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    be40:	e3a02006 	mov	r2, #6
    be44:	eaffffe2 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be48:	e3a02007 	mov	r2, #7
    be4c:	eaffff9c 	b	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    be50:	e3a02007 	mov	r2, #7
    be54:	eaffffde 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be58:	e3a02008 	mov	r2, #8
    be5c:	eaffffdc 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be60:	e3a02008 	mov	r2, #8
    be64:	eaffff96 	b	bcc4 <CMachineInfo::CMachineInfo()+0x108>
    be68:	e3a02009 	mov	r2, #9
    be6c:	eaffffd8 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be70:	e3a0200a 	mov	r2, #10
    be74:	eaffffd6 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be78:	e3a0200b 	mov	r2, #11
    be7c:	eaffffd4 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be80:	e3a0200c 	mov	r2, #12
    be84:	eaffffd2 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be88:	e3a0200d 	mov	r2, #13
    be8c:	eaffffd0 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be90:	e3a0200e 	mov	r2, #14
    be94:	eaffffce 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    be98:	e3a0200f 	mov	r2, #15
    be9c:	eaffffcc 	b	bdd4 <CMachineInfo::CMachineInfo()+0x218>
    bea0:	00013d64 	.word	0x00013d64
    bea4:	00010002 	.word	0x00010002
    bea8:	000133a4 	.word	0x000133a4

0000beac <CMachineInfo::~CMachineInfo()>:
    beac:	e3a0200c 	mov	r2, #12
    beb0:	e59f3014 	ldr	r3, [pc, #20]	; becc <CMachineInfo::~CMachineInfo()+0x20>
    beb4:	e5c02004 	strb	r2, [r0, #4]
    beb8:	e5932000 	ldr	r2, [r3]
    bebc:	e1520000 	cmp	r2, r0
    bec0:	03a02000 	moveq	r2, #0
    bec4:	05832000 	streq	r2, [r3]
    bec8:	e12fff1e 	bx	lr
    becc:	00013d64 	.word	0x00013d64

0000bed0 <CMachineInfo::GetMachineModel() const>:
    bed0:	e5d00004 	ldrb	r0, [r0, #4]
    bed4:	e12fff1e 	bx	lr

0000bed8 <CMachineInfo::GetMachineName() const>:
    bed8:	e5d02004 	ldrb	r2, [r0, #4]
    bedc:	e59f3008 	ldr	r3, [pc, #8]	; beec <CMachineInfo::GetMachineName() const+0x14>
    bee0:	e0833102 	add	r3, r3, r2, lsl #2
    bee4:	e5930188 	ldr	r0, [r3, #392]	; 0x188
    bee8:	e12fff1e 	bx	lr
    beec:	000133a4 	.word	0x000133a4

0000bef0 <CMachineInfo::GetModelMajor() const>:
    bef0:	e5900008 	ldr	r0, [r0, #8]
    bef4:	e12fff1e 	bx	lr

0000bef8 <CMachineInfo::GetModelRevision() const>:
    bef8:	e590000c 	ldr	r0, [r0, #12]
    befc:	e12fff1e 	bx	lr

0000bf00 <CMachineInfo::GetSoCType() const>:
    bf00:	e5d00010 	ldrb	r0, [r0, #16]
    bf04:	e12fff1e 	bx	lr

0000bf08 <CMachineInfo::GetRAMSize() const>:
    bf08:	e5900014 	ldr	r0, [r0, #20]
    bf0c:	e12fff1e 	bx	lr

0000bf10 <CMachineInfo::GetSoCName() const>:
    bf10:	e5d02010 	ldrb	r2, [r0, #16]
    bf14:	e59f3008 	ldr	r3, [pc, #8]	; bf24 <CMachineInfo::GetSoCName() const+0x14>
    bf18:	e0833102 	add	r3, r3, r2, lsl #2
    bf1c:	e59301bc 	ldr	r0, [r3, #444]	; 0x1bc
    bf20:	e12fff1e 	bx	lr
    bf24:	000133a4 	.word	0x000133a4

0000bf28 <CMachineInfo::GetRevisionRaw() const>:
    bf28:	e5900000 	ldr	r0, [r0]
    bf2c:	e12fff1e 	bx	lr

0000bf30 <CMachineInfo::GetClockRate(unsigned int) const>:
    bf30:	e92d4070 	push	{r4, r5, r6, lr}
    bf34:	e24dd020 	sub	sp, sp, #32
    bf38:	e1a06000 	mov	r6, r0
    bf3c:	e28d0008 	add	r0, sp, #8
    bf40:	e1a05001 	mov	r5, r1
    bf44:	eb0002e7 	bl	cae8 <CBcmPropertyTags::CBcmPropertyTags()>
    bf48:	e3a03004 	mov	r3, #4
    bf4c:	e28d0008 	add	r0, sp, #8
    bf50:	e58d3000 	str	r3, [sp]
    bf54:	e28d200c 	add	r2, sp, #12
    bf58:	e3a03014 	mov	r3, #20
    bf5c:	e59f1078 	ldr	r1, [pc, #120]	; bfdc <CMachineInfo::GetClockRate(unsigned int) const+0xac>
    bf60:	e58d5018 	str	r5, [sp, #24]
    bf64:	eb0002ea 	bl	cb14 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bf68:	e2504000 	subs	r4, r0, #0
    bf6c:	1a00000a 	bne	bf9c <CMachineInfo::GetClockRate(unsigned int) const+0x6c>
    bf70:	e3550002 	cmp	r5, #2
    bf74:	0a00000e 	beq	bfb4 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    bf78:	e3550004 	cmp	r5, #4
    bf7c:	0a000010 	beq	bfc4 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
    bf80:	e3550001 	cmp	r5, #1
    bf84:	0a00000c 	beq	bfbc <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    bf88:	e59f2050 	ldr	r2, [pc, #80]	; bfe0 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    bf8c:	e59f1050 	ldr	r1, [pc, #80]	; bfe4 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    bf90:	e59f0050 	ldr	r0, [pc, #80]	; bfe8 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    bf94:	ebfff291 	bl	89e0 <assertion_failed>
    bf98:	ea000000 	b	bfa0 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    bf9c:	e59d401c 	ldr	r4, [sp, #28]
    bfa0:	e28d0008 	add	r0, sp, #8
    bfa4:	eb0002d5 	bl	cb00 <CBcmPropertyTags::~CBcmPropertyTags()>
    bfa8:	e1a00004 	mov	r0, r4
    bfac:	e28dd020 	add	sp, sp, #32
    bfb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bfb4:	e59f4030 	ldr	r4, [pc, #48]	; bfec <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    bfb8:	eafffff8 	b	bfa0 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    bfbc:	e59f402c 	ldr	r4, [pc, #44]	; bff0 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    bfc0:	eafffff6 	b	bfa0 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    bfc4:	e5962008 	ldr	r2, [r6, #8]
    bfc8:	e59f3024 	ldr	r3, [pc, #36]	; bff4 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    bfcc:	e3520002 	cmp	r2, #2
    bfd0:	e59f4020 	ldr	r4, [pc, #32]	; bff8 <CMachineInfo::GetClockRate(unsigned int) const+0xc8>
    bfd4:	81a04003 	movhi	r4, r3
    bfd8:	eafffff0 	b	bfa0 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    bfdc:	00030002 	.word	0x00030002
    bfe0:	00000111 	.word	0x00000111
    bfe4:	00013570 	.word	0x00013570
    bfe8:	0001335c 	.word	0x0001335c
    bfec:	02dc6c00 	.word	0x02dc6c00
    bff0:	05f5e100 	.word	0x05f5e100
    bff4:	11e1a300 	.word	0x11e1a300
    bff8:	0ee6b280 	.word	0x0ee6b280

0000bffc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    bffc:	e3510036 	cmp	r1, #54	; 0x36
    c000:	0a00000d 	beq	c03c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    c004:	e3510037 	cmp	r1, #55	; 0x37
    c008:	1a000004 	bne	c020 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    c00c:	e5d03004 	ldrb	r3, [r0, #4]
    c010:	e3530003 	cmp	r3, #3
    c014:	83a00028 	movhi	r0, #40	; 0x28
    c018:	93a0002d 	movls	r0, #45	; 0x2d
    c01c:	e12fff1e 	bx	lr
    c020:	e92d4010 	push	{r4, lr}
    c024:	e59f2038 	ldr	r2, [pc, #56]	; c064 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    c028:	e59f1038 	ldr	r1, [pc, #56]	; c068 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    c02c:	e59f0038 	ldr	r0, [pc, #56]	; c06c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x70>
    c030:	ebfff26a 	bl	89e0 <assertion_failed>
    c034:	e3a00000 	mov	r0, #0
    c038:	e8bd8010 	pop	{r4, pc}
    c03c:	e5d03004 	ldrb	r3, [r0, #4]
    c040:	e3530003 	cmp	r3, #3
    c044:	9a000004 	bls	c05c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    c048:	e5903008 	ldr	r3, [r0, #8]
    c04c:	e3530003 	cmp	r3, #3
    c050:	33a0002d 	movcc	r0, #45	; 0x2d
    c054:	23a00029 	movcs	r0, #41	; 0x29
    c058:	e12fff1e 	bx	lr
    c05c:	e3a00028 	mov	r0, #40	; 0x28
    c060:	e12fff1e 	bx	lr
    c064:	0000014a 	.word	0x0000014a
    c068:	00013570 	.word	0x00013570
    c06c:	0001335c 	.word	0x0001335c

0000c070 <CMachineInfo::GetDevice(TDeviceId) const>:
    c070:	e3510000 	cmp	r1, #0
    c074:	1a000003 	bne	c088 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    c078:	e5d00004 	ldrb	r0, [r0, #4]
    c07c:	e2500001 	subs	r0, r0, #1
    c080:	13a00001 	movne	r0, #1
    c084:	e12fff1e 	bx	lr
    c088:	e92d4010 	push	{r4, lr}
    c08c:	e59f2010 	ldr	r2, [pc, #16]	; c0a4 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    c090:	e59f1010 	ldr	r1, [pc, #16]	; c0a8 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    c094:	e59f0010 	ldr	r0, [pc, #16]	; c0ac <CMachineInfo::GetDevice(TDeviceId) const+0x3c>
    c098:	ebfff250 	bl	89e0 <assertion_failed>
    c09c:	e3a00000 	mov	r0, #0
    c0a0:	e8bd8010 	pop	{r4, pc}
    c0a4:	00000163 	.word	0x00000163
    c0a8:	00013570 	.word	0x00013570
    c0ac:	0001335c 	.word	0x0001335c

0000c0b0 <CMachineInfo::Get()>:
    c0b0:	e92d4010 	push	{r4, lr}
    c0b4:	e59f4020 	ldr	r4, [pc, #32]	; c0dc <CMachineInfo::Get()+0x2c>
    c0b8:	e5940000 	ldr	r0, [r4]
    c0bc:	e3500000 	cmp	r0, #0
    c0c0:	18bd8010 	popne	{r4, pc}
    c0c4:	e3a02f5b 	mov	r2, #364	; 0x16c
    c0c8:	e59f1010 	ldr	r1, [pc, #16]	; c0e0 <CMachineInfo::Get()+0x30>
    c0cc:	e59f0010 	ldr	r0, [pc, #16]	; c0e4 <CMachineInfo::Get()+0x34>
    c0d0:	ebfff242 	bl	89e0 <assertion_failed>
    c0d4:	e5940000 	ldr	r0, [r4]
    c0d8:	e8bd8010 	pop	{r4, pc}
    c0dc:	00013d64 	.word	0x00013d64
    c0e0:	00013570 	.word	0x00013570
    c0e4:	0001311c 	.word	0x0001311c

0000c0e8 <operator new(unsigned int)>:
    c0e8:	ea00001d 	b	c164 <malloc>

0000c0ec <operator new[](unsigned int)>:
    c0ec:	ea00001c 	b	c164 <malloc>

0000c0f0 <operator delete(void*)>:
    c0f0:	ea00009b 	b	c364 <free>

0000c0f4 <operator delete[](void*)>:
    c0f4:	ea00009a 	b	c364 <free>

0000c0f8 <operator delete(void*, unsigned int)>:
    c0f8:	ea000099 	b	c364 <free>

0000c0fc <operator delete[](void*, unsigned int)>:
    c0fc:	ea000098 	b	c364 <free>

0000c100 <mem_init>:
    c100:	e3500605 	cmp	r0, #5242880	; 0x500000
    c104:	21a0c000 	movcs	ip, r0
    c108:	33a0c605 	movcc	ip, #5242880	; 0x500000
    c10c:	e0801001 	add	r1, r0, r1
    c110:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    c114:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    c118:	e59f2018 	ldr	r2, [pc, #24]	; c138 <mem_init+0x38>
    c11c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    c120:	e2410501 	sub	r0, r1, #4194304	; 0x400000
    c124:	e3c3300f 	bic	r3, r3, #15
    c128:	e582c000 	str	ip, [r2]
    c12c:	e582100c 	str	r1, [r2, #12]
    c130:	e9820009 	stmib	r2, {r0, r3}
    c134:	e12fff1e 	bx	lr
    c138:	00013d68 	.word	0x00013d68

0000c13c <mem_get_size>:
    c13c:	e59f301c 	ldr	r3, [pc, #28]	; c160 <mem_get_size+0x24>
    c140:	e5930004 	ldr	r0, [r3, #4]
    c144:	e5931000 	ldr	r1, [r3]
    c148:	e593200c 	ldr	r2, [r3, #12]
    c14c:	e5933008 	ldr	r3, [r3, #8]
    c150:	e0400001 	sub	r0, r0, r1
    c154:	e0423003 	sub	r3, r2, r3
    c158:	e0800003 	add	r0, r0, r3
    c15c:	e12fff1e 	bx	lr
    c160:	00013d68 	.word	0x00013d68

0000c164 <malloc>:
    c164:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c168:	e59f71d0 	ldr	r7, [pc, #464]	; c340 <malloc+0x1dc>
    c16c:	e1a06000 	mov	r6, r0
    c170:	e5973000 	ldr	r3, [r7]
    c174:	e3530000 	cmp	r3, #0
    c178:	0a00005d 	beq	c2f4 <malloc+0x190>
    c17c:	e5970010 	ldr	r0, [r7, #16]
    c180:	e3500000 	cmp	r0, #0
    c184:	1a000053 	bne	c2d8 <malloc+0x174>
    c188:	e59f21b4 	ldr	r2, [pc, #436]	; c344 <malloc+0x1e0>
    c18c:	e5923000 	ldr	r3, [r2]
    c190:	e3530000 	cmp	r3, #0
    c194:	0a000008 	beq	c1bc <malloc+0x58>
    c198:	e1560003 	cmp	r6, r3
    c19c:	e1a05002 	mov	r5, r2
    c1a0:	8a000002 	bhi	c1b0 <malloc+0x4c>
    c1a4:	ea000030 	b	c26c <malloc+0x108>
    c1a8:	e1530006 	cmp	r3, r6
    c1ac:	2a00002e 	bcs	c26c <malloc+0x108>
    c1b0:	e5b53008 	ldr	r3, [r5, #8]!
    c1b4:	e3530000 	cmp	r3, #0
    c1b8:	1afffffa 	bne	c1a8 <malloc+0x44>
    c1bc:	e5974000 	ldr	r4, [r7]
    c1c0:	e286301f 	add	r3, r6, #31
    c1c4:	e3c3300f 	bic	r3, r3, #15
    c1c8:	e0843003 	add	r3, r4, r3
    c1cc:	e1540003 	cmp	r4, r3
    c1d0:	2a00004c 	bcs	c308 <malloc+0x1a4>
    c1d4:	e5971004 	ldr	r1, [r7, #4]
    c1d8:	e5920040 	ldr	r0, [r2, #64]	; 0x40
    c1dc:	e0411000 	sub	r1, r1, r0
    c1e0:	e1530001 	cmp	r3, r1
    c1e4:	8a000047 	bhi	c308 <malloc+0x1a4>
    c1e8:	e3a0204d 	mov	r2, #77	; 0x4d
    c1ec:	e3a0c043 	mov	ip, #67	; 0x43
    c1f0:	e3a0004c 	mov	r0, #76	; 0x4c
    c1f4:	e3a01042 	mov	r1, #66	; 0x42
    c1f8:	e5873000 	str	r3, [r7]
    c1fc:	e1a03826 	lsr	r3, r6, #16
    c200:	e5c43006 	strb	r3, [r4, #6]
    c204:	e5973010 	ldr	r3, [r7, #16]
    c208:	e5c46004 	strb	r6, [r4, #4]
    c20c:	e5c42001 	strb	r2, [r4, #1]
    c210:	e3530000 	cmp	r3, #0
    c214:	e1a02426 	lsr	r2, r6, #8
    c218:	e1a06c26 	lsr	r6, r6, #24
    c21c:	e5c4c000 	strb	ip, [r4]
    c220:	e5c40002 	strb	r0, [r4, #2]
    c224:	e5c41003 	strb	r1, [r4, #3]
    c228:	e5c42005 	strb	r2, [r4, #5]
    c22c:	e5c46007 	strb	r6, [r4, #7]
    c230:	1a000026 	bne	c2d0 <malloc+0x16c>
    c234:	e3a03000 	mov	r3, #0
    c238:	e2845010 	add	r5, r4, #16
    c23c:	e315000f 	tst	r5, #15
    c240:	e5c43008 	strb	r3, [r4, #8]
    c244:	e5c43009 	strb	r3, [r4, #9]
    c248:	e5c4300a 	strb	r3, [r4, #10]
    c24c:	e5c4300b 	strb	r3, [r4, #11]
    c250:	0a000003 	beq	c264 <malloc+0x100>
    c254:	e3a020b0 	mov	r2, #176	; 0xb0
    c258:	e59f10e8 	ldr	r1, [pc, #232]	; c348 <malloc+0x1e4>
    c25c:	e59f00e8 	ldr	r0, [pc, #232]	; c34c <malloc+0x1e8>
    c260:	ebfff1de 	bl	89e0 <assertion_failed>
    c264:	e1a00005 	mov	r0, r5
    c268:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c26c:	e5954004 	ldr	r4, [r5, #4]
    c270:	e3540000 	cmp	r4, #0
    c274:	01a06003 	moveq	r6, r3
    c278:	0affffcf 	beq	c1bc <malloc+0x58>
    c27c:	e5d41001 	ldrb	r1, [r4, #1]
    c280:	e5d43000 	ldrb	r3, [r4]
    c284:	e5d42002 	ldrb	r2, [r4, #2]
    c288:	e1833401 	orr	r3, r3, r1, lsl #8
    c28c:	e5d41003 	ldrb	r1, [r4, #3]
    c290:	e1833802 	orr	r3, r3, r2, lsl #16
    c294:	e59f20b4 	ldr	r2, [pc, #180]	; c350 <malloc+0x1ec>
    c298:	e1833c01 	orr	r3, r3, r1, lsl #24
    c29c:	e1530002 	cmp	r3, r2
    c2a0:	1a00000e 	bne	c2e0 <malloc+0x17c>
    c2a4:	e5d42009 	ldrb	r2, [r4, #9]
    c2a8:	e5d43008 	ldrb	r3, [r4, #8]
    c2ac:	e5d4100a 	ldrb	r1, [r4, #10]
    c2b0:	e1833402 	orr	r3, r3, r2, lsl #8
    c2b4:	e5d4200b 	ldrb	r2, [r4, #11]
    c2b8:	e1833801 	orr	r3, r3, r1, lsl #16
    c2bc:	e1833c02 	orr	r3, r3, r2, lsl #24
    c2c0:	e5853004 	str	r3, [r5, #4]
    c2c4:	e5973010 	ldr	r3, [r7, #16]
    c2c8:	e3530000 	cmp	r3, #0
    c2cc:	0affffd8 	beq	c234 <malloc+0xd0>
    c2d0:	eb0002ce 	bl	ce10 <LeaveCritical>
    c2d4:	eaffffd6 	b	c234 <malloc+0xd0>
    c2d8:	eb0002a0 	bl	cd60 <EnterCritical>
    c2dc:	eaffffa9 	b	c188 <malloc+0x24>
    c2e0:	e3a02087 	mov	r2, #135	; 0x87
    c2e4:	e59f105c 	ldr	r1, [pc, #92]	; c348 <malloc+0x1e4>
    c2e8:	e59f0064 	ldr	r0, [pc, #100]	; c354 <malloc+0x1f0>
    c2ec:	ebfff1bb 	bl	89e0 <assertion_failed>
    c2f0:	eaffffeb 	b	c2a4 <malloc+0x140>
    c2f4:	e3a0206d 	mov	r2, #109	; 0x6d
    c2f8:	e59f1048 	ldr	r1, [pc, #72]	; c348 <malloc+0x1e4>
    c2fc:	e59f0054 	ldr	r0, [pc, #84]	; c358 <malloc+0x1f4>
    c300:	ebfff1b6 	bl	89e0 <assertion_failed>
    c304:	eaffff9c 	b	c17c <malloc+0x18>
    c308:	e3a01000 	mov	r1, #0
    c30c:	e5973010 	ldr	r3, [r7, #16]
    c310:	e5821040 	str	r1, [r2, #64]	; 0x40
    c314:	e1530001 	cmp	r3, r1
    c318:	0a000000 	beq	c320 <malloc+0x1bc>
    c31c:	eb0002bb 	bl	ce10 <LeaveCritical>
    c320:	e3a05000 	mov	r5, #0
    c324:	ebfff2c3 	bl	8e38 <CLogger::Get()>
    c328:	e59f302c 	ldr	r3, [pc, #44]	; c35c <malloc+0x1f8>
    c32c:	e3a02000 	mov	r2, #0
    c330:	e59f1028 	ldr	r1, [pc, #40]	; c360 <malloc+0x1fc>
    c334:	ebfff451 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c338:	e1a00005 	mov	r0, r5
    c33c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c340:	00013d68 	.word	0x00013d68
    c344:	00013cb4 	.word	0x00013cb4
    c348:	00013694 	.word	0x00013694
    c34c:	000136f0 	.word	0x000136f0
    c350:	424c4d43 	.word	0x424c4d43
    c354:	000136b4 	.word	0x000136b4
    c358:	000136a0 	.word	0x000136a0
    c35c:	000136d8 	.word	0x000136d8
    c360:	000136e8 	.word	0x000136e8

0000c364 <free>:
    c364:	e3500000 	cmp	r0, #0
    c368:	012fff1e 	bxeq	lr
    c36c:	e92d4070 	push	{r4, r5, r6, lr}
    c370:	e2405010 	sub	r5, r0, #16
    c374:	e5d51001 	ldrb	r1, [r5, #1]
    c378:	e5503010 	ldrb	r3, [r0, #-16]
    c37c:	e5d52002 	ldrb	r2, [r5, #2]
    c380:	e1833401 	orr	r3, r3, r1, lsl #8
    c384:	e5d51003 	ldrb	r1, [r5, #3]
    c388:	e1833802 	orr	r3, r3, r2, lsl #16
    c38c:	e59f20d8 	ldr	r2, [pc, #216]	; c46c <free+0x108>
    c390:	e1833c01 	orr	r3, r3, r1, lsl #24
    c394:	e1530002 	cmp	r3, r2
    c398:	1a00001f 	bne	c41c <free+0xb8>
    c39c:	e59f40cc 	ldr	r4, [pc, #204]	; c470 <free+0x10c>
    c3a0:	e5943000 	ldr	r3, [r4]
    c3a4:	e3530000 	cmp	r3, #0
    c3a8:	08bd8070 	popeq	{r4, r5, r6, pc}
    c3ac:	e5d51005 	ldrb	r1, [r5, #5]
    c3b0:	e5d52004 	ldrb	r2, [r5, #4]
    c3b4:	e5d50006 	ldrb	r0, [r5, #6]
    c3b8:	e1822401 	orr	r2, r2, r1, lsl #8
    c3bc:	e5d51007 	ldrb	r1, [r5, #7]
    c3c0:	e1822800 	orr	r2, r2, r0, lsl #16
    c3c4:	e1822c01 	orr	r2, r2, r1, lsl #24
    c3c8:	e1530002 	cmp	r3, r2
    c3cc:	0a000004 	beq	c3e4 <free+0x80>
    c3d0:	e5b43008 	ldr	r3, [r4, #8]!
    c3d4:	e3530000 	cmp	r3, #0
    c3d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    c3dc:	e1530002 	cmp	r3, r2
    c3e0:	1afffffa 	bne	c3d0 <free+0x6c>
    c3e4:	e59f6088 	ldr	r6, [pc, #136]	; c474 <free+0x110>
    c3e8:	e5960010 	ldr	r0, [r6, #16]
    c3ec:	e3500000 	cmp	r0, #0
    c3f0:	1a00000e 	bne	c430 <free+0xcc>
    c3f4:	e5943004 	ldr	r3, [r4, #4]
    c3f8:	e1a00423 	lsr	r0, r3, #8
    c3fc:	e1a01823 	lsr	r1, r3, #16
    c400:	e1a02c23 	lsr	r2, r3, #24
    c404:	e5c53008 	strb	r3, [r5, #8]
    c408:	e5c50009 	strb	r0, [r5, #9]
    c40c:	e5c5100a 	strb	r1, [r5, #10]
    c410:	e5c5200b 	strb	r2, [r5, #11]
    c414:	e5845004 	str	r5, [r4, #4]
    c418:	e8bd8070 	pop	{r4, r5, r6, pc}
    c41c:	e3a020bd 	mov	r2, #189	; 0xbd
    c420:	e59f1050 	ldr	r1, [pc, #80]	; c478 <free+0x114>
    c424:	e59f0050 	ldr	r0, [pc, #80]	; c47c <free+0x118>
    c428:	ebfff16c 	bl	89e0 <assertion_failed>
    c42c:	eaffffda 	b	c39c <free+0x38>
    c430:	eb00024a 	bl	cd60 <EnterCritical>
    c434:	e5943004 	ldr	r3, [r4, #4]
    c438:	e5962010 	ldr	r2, [r6, #16]
    c43c:	e1a00423 	lsr	r0, r3, #8
    c440:	e3520000 	cmp	r2, #0
    c444:	e1a01823 	lsr	r1, r3, #16
    c448:	e1a02c23 	lsr	r2, r3, #24
    c44c:	e5c53008 	strb	r3, [r5, #8]
    c450:	e5c50009 	strb	r0, [r5, #9]
    c454:	e5c5100a 	strb	r1, [r5, #10]
    c458:	e5c5200b 	strb	r2, [r5, #11]
    c45c:	e5845004 	str	r5, [r4, #4]
    c460:	08bd8070 	popeq	{r4, r5, r6, pc}
    c464:	e8bd4070 	pop	{r4, r5, r6, lr}
    c468:	ea000268 	b	ce10 <LeaveCritical>
    c46c:	424c4d43 	.word	0x424c4d43
    c470:	00013cb4 	.word	0x00013cb4
    c474:	00013d68 	.word	0x00013d68
    c478:	00013694 	.word	0x00013694
    c47c:	000136b4 	.word	0x000136b4

0000c480 <calloc>:
    c480:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c484:	e0060190 	mul	r6, r0, r1
    c488:	e1500006 	cmp	r0, r6
    c48c:	8a000060 	bhi	c614 <calloc+0x194>
    c490:	e3560000 	cmp	r6, #0
    c494:	0a000064 	beq	c62c <calloc+0x1ac>
    c498:	e59f71f8 	ldr	r7, [pc, #504]	; c698 <calloc+0x218>
    c49c:	e5973000 	ldr	r3, [r7]
    c4a0:	e3530000 	cmp	r3, #0
    c4a4:	0a00006a 	beq	c654 <calloc+0x1d4>
    c4a8:	e5970010 	ldr	r0, [r7, #16]
    c4ac:	e3500000 	cmp	r0, #0
    c4b0:	1a000060 	bne	c638 <calloc+0x1b8>
    c4b4:	e59f11e0 	ldr	r1, [pc, #480]	; c69c <calloc+0x21c>
    c4b8:	e5913000 	ldr	r3, [r1]
    c4bc:	e3530000 	cmp	r3, #0
    c4c0:	0a000008 	beq	c4e8 <calloc+0x68>
    c4c4:	e1560003 	cmp	r6, r3
    c4c8:	e1a05001 	mov	r5, r1
    c4cc:	8a000002 	bhi	c4dc <calloc+0x5c>
    c4d0:	ea000035 	b	c5ac <calloc+0x12c>
    c4d4:	e1560003 	cmp	r6, r3
    c4d8:	9a000033 	bls	c5ac <calloc+0x12c>
    c4dc:	e5b53008 	ldr	r3, [r5, #8]!
    c4e0:	e3530000 	cmp	r3, #0
    c4e4:	1afffffa 	bne	c4d4 <calloc+0x54>
    c4e8:	e1a03006 	mov	r3, r6
    c4ec:	e5974000 	ldr	r4, [r7]
    c4f0:	e283201f 	add	r2, r3, #31
    c4f4:	e3c2200f 	bic	r2, r2, #15
    c4f8:	e0842002 	add	r2, r4, r2
    c4fc:	e1540002 	cmp	r4, r2
    c500:	2a000058 	bcs	c668 <calloc+0x1e8>
    c504:	e5970004 	ldr	r0, [r7, #4]
    c508:	e591c040 	ldr	ip, [r1, #64]	; 0x40
    c50c:	e040000c 	sub	r0, r0, ip
    c510:	e1520000 	cmp	r2, r0
    c514:	8a000053 	bhi	c668 <calloc+0x1e8>
    c518:	e3a0104c 	mov	r1, #76	; 0x4c
    c51c:	e3a0e043 	mov	lr, #67	; 0x43
    c520:	e3a0c04d 	mov	ip, #77	; 0x4d
    c524:	e3a00042 	mov	r0, #66	; 0x42
    c528:	e5872000 	str	r2, [r7]
    c52c:	e5c43004 	strb	r3, [r4, #4]
    c530:	e1a02823 	lsr	r2, r3, #16
    c534:	e5c41002 	strb	r1, [r4, #2]
    c538:	e1a01423 	lsr	r1, r3, #8
    c53c:	e1a03c23 	lsr	r3, r3, #24
    c540:	e5c43007 	strb	r3, [r4, #7]
    c544:	e5973010 	ldr	r3, [r7, #16]
    c548:	e5c4e000 	strb	lr, [r4]
    c54c:	e3530000 	cmp	r3, #0
    c550:	e5c4c001 	strb	ip, [r4, #1]
    c554:	e5c40003 	strb	r0, [r4, #3]
    c558:	e5c41005 	strb	r1, [r4, #5]
    c55c:	e5c42006 	strb	r2, [r4, #6]
    c560:	1a000029 	bne	c60c <calloc+0x18c>
    c564:	e3a03000 	mov	r3, #0
    c568:	e2845010 	add	r5, r4, #16
    c56c:	e315000f 	tst	r5, #15
    c570:	e5c43008 	strb	r3, [r4, #8]
    c574:	e5c43009 	strb	r3, [r4, #9]
    c578:	e5c4300a 	strb	r3, [r4, #10]
    c57c:	e5c4300b 	strb	r3, [r4, #11]
    c580:	0a000003 	beq	c594 <calloc+0x114>
    c584:	e3a020b0 	mov	r2, #176	; 0xb0
    c588:	e59f1110 	ldr	r1, [pc, #272]	; c6a0 <calloc+0x220>
    c58c:	e59f0110 	ldr	r0, [pc, #272]	; c6a4 <calloc+0x224>
    c590:	ebfff112 	bl	89e0 <assertion_failed>
    c594:	e1a02006 	mov	r2, r6
    c598:	e3a01000 	mov	r1, #0
    c59c:	e1a00005 	mov	r0, r5
    c5a0:	eb000612 	bl	ddf0 <memset>
    c5a4:	e1a00005 	mov	r0, r5
    c5a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c5ac:	e5954004 	ldr	r4, [r5, #4]
    c5b0:	e3540000 	cmp	r4, #0
    c5b4:	0affffcc 	beq	c4ec <calloc+0x6c>
    c5b8:	e5d41001 	ldrb	r1, [r4, #1]
    c5bc:	e5d43000 	ldrb	r3, [r4]
    c5c0:	e5d42002 	ldrb	r2, [r4, #2]
    c5c4:	e1833401 	orr	r3, r3, r1, lsl #8
    c5c8:	e5d41003 	ldrb	r1, [r4, #3]
    c5cc:	e1833802 	orr	r3, r3, r2, lsl #16
    c5d0:	e59f20d0 	ldr	r2, [pc, #208]	; c6a8 <calloc+0x228>
    c5d4:	e1833c01 	orr	r3, r3, r1, lsl #24
    c5d8:	e1530002 	cmp	r3, r2
    c5dc:	1a000017 	bne	c640 <calloc+0x1c0>
    c5e0:	e5d42009 	ldrb	r2, [r4, #9]
    c5e4:	e5d43008 	ldrb	r3, [r4, #8]
    c5e8:	e5d4100a 	ldrb	r1, [r4, #10]
    c5ec:	e1833402 	orr	r3, r3, r2, lsl #8
    c5f0:	e5d4200b 	ldrb	r2, [r4, #11]
    c5f4:	e1833801 	orr	r3, r3, r1, lsl #16
    c5f8:	e1833c02 	orr	r3, r3, r2, lsl #24
    c5fc:	e5853004 	str	r3, [r5, #4]
    c600:	e5973010 	ldr	r3, [r7, #16]
    c604:	e3530000 	cmp	r3, #0
    c608:	0affffd5 	beq	c564 <calloc+0xe4>
    c60c:	eb0001ff 	bl	ce10 <LeaveCritical>
    c610:	eaffffd3 	b	c564 <calloc+0xe4>
    c614:	e3a020db 	mov	r2, #219	; 0xdb
    c618:	e59f1080 	ldr	r1, [pc, #128]	; c6a0 <calloc+0x220>
    c61c:	e59f0088 	ldr	r0, [pc, #136]	; c6ac <calloc+0x22c>
    c620:	ebfff0ee 	bl	89e0 <assertion_failed>
    c624:	e3560000 	cmp	r6, #0
    c628:	1affff9a 	bne	c498 <calloc+0x18>
    c62c:	e3a05000 	mov	r5, #0
    c630:	e1a00005 	mov	r0, r5
    c634:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c638:	eb0001c8 	bl	cd60 <EnterCritical>
    c63c:	eaffff9c 	b	c4b4 <calloc+0x34>
    c640:	e3a02087 	mov	r2, #135	; 0x87
    c644:	e59f1054 	ldr	r1, [pc, #84]	; c6a0 <calloc+0x220>
    c648:	e59f0060 	ldr	r0, [pc, #96]	; c6b0 <calloc+0x230>
    c64c:	ebfff0e3 	bl	89e0 <assertion_failed>
    c650:	eaffffe2 	b	c5e0 <calloc+0x160>
    c654:	e3a0206d 	mov	r2, #109	; 0x6d
    c658:	e59f1040 	ldr	r1, [pc, #64]	; c6a0 <calloc+0x220>
    c65c:	e59f0050 	ldr	r0, [pc, #80]	; c6b4 <calloc+0x234>
    c660:	ebfff0de 	bl	89e0 <assertion_failed>
    c664:	eaffff8f 	b	c4a8 <calloc+0x28>
    c668:	e3a02000 	mov	r2, #0
    c66c:	e5973010 	ldr	r3, [r7, #16]
    c670:	e5812040 	str	r2, [r1, #64]	; 0x40
    c674:	e1530002 	cmp	r3, r2
    c678:	0a000000 	beq	c680 <calloc+0x200>
    c67c:	eb0001e3 	bl	ce10 <LeaveCritical>
    c680:	ebfff1ec 	bl	8e38 <CLogger::Get()>
    c684:	e59f302c 	ldr	r3, [pc, #44]	; c6b8 <calloc+0x238>
    c688:	e3a02000 	mov	r2, #0
    c68c:	e59f1028 	ldr	r1, [pc, #40]	; c6bc <calloc+0x23c>
    c690:	ebfff37a 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c694:	eaffffe4 	b	c62c <calloc+0x1ac>
    c698:	00013d68 	.word	0x00013d68
    c69c:	00013cb4 	.word	0x00013cb4
    c6a0:	00013694 	.word	0x00013694
    c6a4:	000136f0 	.word	0x000136f0
    c6a8:	424c4d43 	.word	0x424c4d43
    c6ac:	0001371c 	.word	0x0001371c
    c6b0:	000136b4 	.word	0x000136b4
    c6b4:	000136a0 	.word	0x000136a0
    c6b8:	000136d8 	.word	0x000136d8
    c6bc:	000136e8 	.word	0x000136e8

0000c6c0 <realloc>:
    c6c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c6c4:	e2505000 	subs	r5, r0, #0
    c6c8:	e1a06001 	mov	r6, r1
    c6cc:	0a00004e 	beq	c80c <realloc+0x14c>
    c6d0:	e2454010 	sub	r4, r5, #16
    c6d4:	e5d42001 	ldrb	r2, [r4, #1]
    c6d8:	e5553010 	ldrb	r3, [r5, #-16]
    c6dc:	e5d41002 	ldrb	r1, [r4, #2]
    c6e0:	e1833402 	orr	r3, r3, r2, lsl #8
    c6e4:	e5d42003 	ldrb	r2, [r4, #3]
    c6e8:	e1833801 	orr	r3, r3, r1, lsl #16
    c6ec:	e3560000 	cmp	r6, #0
    c6f0:	e1833c02 	orr	r3, r3, r2, lsl #24
    c6f4:	e59f2278 	ldr	r2, [pc, #632]	; c974 <realloc+0x2b4>
    c6f8:	0a000075 	beq	c8d4 <realloc+0x214>
    c6fc:	e1530002 	cmp	r3, r2
    c700:	1a00000a 	bne	c730 <realloc+0x70>
    c704:	e5d42005 	ldrb	r2, [r4, #5]
    c708:	e5d43004 	ldrb	r3, [r4, #4]
    c70c:	e5d41006 	ldrb	r1, [r4, #6]
    c710:	e1833402 	orr	r3, r3, r2, lsl #8
    c714:	e5d42007 	ldrb	r2, [r4, #7]
    c718:	e1833801 	orr	r3, r3, r1, lsl #16
    c71c:	e1833c02 	orr	r3, r3, r2, lsl #24
    c720:	e1530006 	cmp	r3, r6
    c724:	3a000006 	bcc	c744 <realloc+0x84>
    c728:	e1a00005 	mov	r0, r5
    c72c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c730:	e3a020f9 	mov	r2, #249	; 0xf9
    c734:	e59f123c 	ldr	r1, [pc, #572]	; c978 <realloc+0x2b8>
    c738:	e59f023c 	ldr	r0, [pc, #572]	; c97c <realloc+0x2bc>
    c73c:	ebfff0a7 	bl	89e0 <assertion_failed>
    c740:	eaffffef 	b	c704 <realloc+0x44>
    c744:	e1a00006 	mov	r0, r6
    c748:	ebfffe85 	bl	c164 <malloc>
    c74c:	e2506000 	subs	r6, r0, #0
    c750:	0a00004d 	beq	c88c <realloc+0x1cc>
    c754:	e5d42005 	ldrb	r2, [r4, #5]
    c758:	e5d43004 	ldrb	r3, [r4, #4]
    c75c:	e5d41006 	ldrb	r1, [r4, #6]
    c760:	e1833402 	orr	r3, r3, r2, lsl #8
    c764:	e5d42007 	ldrb	r2, [r4, #7]
    c768:	e1833801 	orr	r3, r3, r1, lsl #16
    c76c:	e1832c02 	orr	r2, r3, r2, lsl #24
    c770:	e1a01005 	mov	r1, r5
    c774:	eb00072c 	bl	e42c <memcpy>
    c778:	e5d41001 	ldrb	r1, [r4, #1]
    c77c:	e5d43000 	ldrb	r3, [r4]
    c780:	e5d42002 	ldrb	r2, [r4, #2]
    c784:	e1833401 	orr	r3, r3, r1, lsl #8
    c788:	e5d41003 	ldrb	r1, [r4, #3]
    c78c:	e1833802 	orr	r3, r3, r2, lsl #16
    c790:	e59f21dc 	ldr	r2, [pc, #476]	; c974 <realloc+0x2b4>
    c794:	e1833c01 	orr	r3, r3, r1, lsl #24
    c798:	e1530002 	cmp	r3, r2
    c79c:	1a000015 	bne	c7f8 <realloc+0x138>
    c7a0:	e59f71d8 	ldr	r7, [pc, #472]	; c980 <realloc+0x2c0>
    c7a4:	e5973000 	ldr	r3, [r7]
    c7a8:	e3530000 	cmp	r3, #0
    c7ac:	0a00000e 	beq	c7ec <realloc+0x12c>
    c7b0:	e5d41005 	ldrb	r1, [r4, #5]
    c7b4:	e5d42004 	ldrb	r2, [r4, #4]
    c7b8:	e5d40006 	ldrb	r0, [r4, #6]
    c7bc:	e1822401 	orr	r2, r2, r1, lsl #8
    c7c0:	e5d41007 	ldrb	r1, [r4, #7]
    c7c4:	e1822800 	orr	r2, r2, r0, lsl #16
    c7c8:	e1822c01 	orr	r2, r2, r1, lsl #24
    c7cc:	e1530002 	cmp	r3, r2
    c7d0:	1a000002 	bne	c7e0 <realloc+0x120>
    c7d4:	ea00000f 	b	c818 <realloc+0x158>
    c7d8:	e1530002 	cmp	r3, r2
    c7dc:	0a00000d 	beq	c818 <realloc+0x158>
    c7e0:	e5b73008 	ldr	r3, [r7, #8]!
    c7e4:	e3530000 	cmp	r3, #0
    c7e8:	1afffffa 	bne	c7d8 <realloc+0x118>
    c7ec:	e1a05006 	mov	r5, r6
    c7f0:	e1a00005 	mov	r0, r5
    c7f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c7f8:	e3a020bd 	mov	r2, #189	; 0xbd
    c7fc:	e59f1174 	ldr	r1, [pc, #372]	; c978 <realloc+0x2b8>
    c800:	e59f0174 	ldr	r0, [pc, #372]	; c97c <realloc+0x2bc>
    c804:	ebfff075 	bl	89e0 <assertion_failed>
    c808:	eaffffe4 	b	c7a0 <realloc+0xe0>
    c80c:	e1a00001 	mov	r0, r1
    c810:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c814:	eafffe52 	b	c164 <malloc>
    c818:	e59f5164 	ldr	r5, [pc, #356]	; c984 <realloc+0x2c4>
    c81c:	e5950010 	ldr	r0, [r5, #16]
    c820:	e3500000 	cmp	r0, #0
    c824:	1a00001a 	bne	c894 <realloc+0x1d4>
    c828:	e5973004 	ldr	r3, [r7, #4]
    c82c:	e1a05006 	mov	r5, r6
    c830:	e1a01423 	lsr	r1, r3, #8
    c834:	e1a02823 	lsr	r2, r3, #16
    c838:	e5c43008 	strb	r3, [r4, #8]
    c83c:	e1a03c23 	lsr	r3, r3, #24
    c840:	e5c41009 	strb	r1, [r4, #9]
    c844:	e5c4200a 	strb	r2, [r4, #10]
    c848:	e5c4300b 	strb	r3, [r4, #11]
    c84c:	e5874004 	str	r4, [r7, #4]
    c850:	eaffffb4 	b	c728 <realloc+0x68>
    c854:	eb000141 	bl	cd60 <EnterCritical>
    c858:	e5973004 	ldr	r3, [r7, #4]
    c85c:	e5952010 	ldr	r2, [r5, #16]
    c860:	e1a00423 	lsr	r0, r3, #8
    c864:	e3520000 	cmp	r2, #0
    c868:	e1a01823 	lsr	r1, r3, #16
    c86c:	e1a02c23 	lsr	r2, r3, #24
    c870:	e5c43008 	strb	r3, [r4, #8]
    c874:	e5c40009 	strb	r0, [r4, #9]
    c878:	e5c4100a 	strb	r1, [r4, #10]
    c87c:	e5c4200b 	strb	r2, [r4, #11]
    c880:	e5874004 	str	r4, [r7, #4]
    c884:	0a000000 	beq	c88c <realloc+0x1cc>
    c888:	eb000160 	bl	ce10 <LeaveCritical>
    c88c:	e3a05000 	mov	r5, #0
    c890:	eaffffa4 	b	c728 <realloc+0x68>
    c894:	eb000131 	bl	cd60 <EnterCritical>
    c898:	e5973004 	ldr	r3, [r7, #4]
    c89c:	e5952010 	ldr	r2, [r5, #16]
    c8a0:	e1a01423 	lsr	r1, r3, #8
    c8a4:	e5c43008 	strb	r3, [r4, #8]
    c8a8:	e3520000 	cmp	r2, #0
    c8ac:	e1a02823 	lsr	r2, r3, #16
    c8b0:	e1a03c23 	lsr	r3, r3, #24
    c8b4:	e5c41009 	strb	r1, [r4, #9]
    c8b8:	e5c4200a 	strb	r2, [r4, #10]
    c8bc:	e5c4300b 	strb	r3, [r4, #11]
    c8c0:	e5874004 	str	r4, [r7, #4]
    c8c4:	0affffc8 	beq	c7ec <realloc+0x12c>
    c8c8:	eb000150 	bl	ce10 <LeaveCritical>
    c8cc:	e1a05006 	mov	r5, r6
    c8d0:	eaffff94 	b	c728 <realloc+0x68>
    c8d4:	e1530002 	cmp	r3, r2
    c8d8:	0a000003 	beq	c8ec <realloc+0x22c>
    c8dc:	e3a020bd 	mov	r2, #189	; 0xbd
    c8e0:	e59f1090 	ldr	r1, [pc, #144]	; c978 <realloc+0x2b8>
    c8e4:	e59f0090 	ldr	r0, [pc, #144]	; c97c <realloc+0x2bc>
    c8e8:	ebfff03c 	bl	89e0 <assertion_failed>
    c8ec:	e59f708c 	ldr	r7, [pc, #140]	; c980 <realloc+0x2c0>
    c8f0:	e5973000 	ldr	r3, [r7]
    c8f4:	e3530000 	cmp	r3, #0
    c8f8:	0affffe3 	beq	c88c <realloc+0x1cc>
    c8fc:	e5d41005 	ldrb	r1, [r4, #5]
    c900:	e5d42004 	ldrb	r2, [r4, #4]
    c904:	e5d40006 	ldrb	r0, [r4, #6]
    c908:	e1822401 	orr	r2, r2, r1, lsl #8
    c90c:	e5d41007 	ldrb	r1, [r4, #7]
    c910:	e1822800 	orr	r2, r2, r0, lsl #16
    c914:	e1822c01 	orr	r2, r2, r1, lsl #24
    c918:	e1520003 	cmp	r2, r3
    c91c:	1a000002 	bne	c92c <realloc+0x26c>
    c920:	ea000005 	b	c93c <realloc+0x27c>
    c924:	e1530002 	cmp	r3, r2
    c928:	0a000003 	beq	c93c <realloc+0x27c>
    c92c:	e5b73008 	ldr	r3, [r7, #8]!
    c930:	e3530000 	cmp	r3, #0
    c934:	1afffffa 	bne	c924 <realloc+0x264>
    c938:	eaffffd3 	b	c88c <realloc+0x1cc>
    c93c:	e59f5040 	ldr	r5, [pc, #64]	; c984 <realloc+0x2c4>
    c940:	e5950010 	ldr	r0, [r5, #16]
    c944:	e3500000 	cmp	r0, #0
    c948:	1affffc1 	bne	c854 <realloc+0x194>
    c94c:	e5973004 	ldr	r3, [r7, #4]
    c950:	e1a00423 	lsr	r0, r3, #8
    c954:	e1a01823 	lsr	r1, r3, #16
    c958:	e1a02c23 	lsr	r2, r3, #24
    c95c:	e5c43008 	strb	r3, [r4, #8]
    c960:	e5c40009 	strb	r0, [r4, #9]
    c964:	e5c4100a 	strb	r1, [r4, #10]
    c968:	e5c4200b 	strb	r2, [r4, #11]
    c96c:	e5874004 	str	r4, [r7, #4]
    c970:	eaffffc5 	b	c88c <realloc+0x1cc>
    c974:	424c4d43 	.word	0x424c4d43
    c978:	00013694 	.word	0x00013694
    c97c:	000136b4 	.word	0x000136b4
    c980:	00013cb4 	.word	0x00013cb4
    c984:	00013d68 	.word	0x00013d68

0000c988 <palloc>:
    c988:	e92d4070 	push	{r4, r5, r6, lr}
    c98c:	e59f40c4 	ldr	r4, [pc, #196]	; ca58 <palloc+0xd0>
    c990:	e5943008 	ldr	r3, [r4, #8]
    c994:	e3530000 	cmp	r3, #0
    c998:	0a000029 	beq	ca44 <palloc+0xbc>
    c99c:	e5940014 	ldr	r0, [r4, #20]
    c9a0:	e3500000 	cmp	r0, #0
    c9a4:	1a000015 	bne	ca00 <palloc+0x78>
    c9a8:	e5945018 	ldr	r5, [r4, #24]
    c9ac:	e3550000 	cmp	r5, #0
    c9b0:	0a000016 	beq	ca10 <palloc+0x88>
    c9b4:	e59f30a0 	ldr	r3, [pc, #160]	; ca5c <palloc+0xd4>
    c9b8:	e5952000 	ldr	r2, [r5]
    c9bc:	e1520003 	cmp	r2, r3
    c9c0:	1a000009 	bne	c9ec <palloc+0x64>
    c9c4:	e3a02000 	mov	r2, #0
    c9c8:	e5953004 	ldr	r3, [r5, #4]
    c9cc:	e5852000 	str	r2, [r5]
    c9d0:	e5843018 	str	r3, [r4, #24]
    c9d4:	e5943014 	ldr	r3, [r4, #20]
    c9d8:	e3530000 	cmp	r3, #0
    c9dc:	0a000000 	beq	c9e4 <palloc+0x5c>
    c9e0:	eb00010a 	bl	ce10 <LeaveCritical>
    c9e4:	e1a00005 	mov	r0, r5
    c9e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c9ec:	e3a02f47 	mov	r2, #284	; 0x11c
    c9f0:	e59f1068 	ldr	r1, [pc, #104]	; ca60 <palloc+0xd8>
    c9f4:	e59f0068 	ldr	r0, [pc, #104]	; ca64 <palloc+0xdc>
    c9f8:	ebffeff8 	bl	89e0 <assertion_failed>
    c9fc:	eafffff0 	b	c9c4 <palloc+0x3c>
    ca00:	eb0000d6 	bl	cd60 <EnterCritical>
    ca04:	e5945018 	ldr	r5, [r4, #24]
    ca08:	e3550000 	cmp	r5, #0
    ca0c:	1affffe8 	bne	c9b4 <palloc+0x2c>
    ca10:	e5945008 	ldr	r5, [r4, #8]
    ca14:	e594200c 	ldr	r2, [r4, #12]
    ca18:	e2853a01 	add	r3, r5, #4096	; 0x1000
    ca1c:	e1530002 	cmp	r3, r2
    ca20:	e5843008 	str	r3, [r4, #8]
    ca24:	e5943014 	ldr	r3, [r4, #20]
    ca28:	9affffea 	bls	c9d8 <palloc+0x50>
    ca2c:	e3530000 	cmp	r3, #0
    ca30:	01a05003 	moveq	r5, r3
    ca34:	0affffea 	beq	c9e4 <palloc+0x5c>
    ca38:	eb0000f4 	bl	ce10 <LeaveCritical>
    ca3c:	e3a05000 	mov	r5, #0
    ca40:	eaffffe7 	b	c9e4 <palloc+0x5c>
    ca44:	e59f201c 	ldr	r2, [pc, #28]	; ca68 <palloc+0xe0>
    ca48:	e59f1010 	ldr	r1, [pc, #16]	; ca60 <palloc+0xd8>
    ca4c:	e59f0018 	ldr	r0, [pc, #24]	; ca6c <palloc+0xe4>
    ca50:	ebffefe2 	bl	89e0 <assertion_failed>
    ca54:	eaffffd0 	b	c99c <palloc+0x14>
    ca58:	00013d68 	.word	0x00013d68
    ca5c:	50474d43 	.word	0x50474d43
    ca60:	00013694 	.word	0x00013694
    ca64:	00013744 	.word	0x00013744
    ca68:	0000010e 	.word	0x0000010e
    ca6c:	00013730 	.word	0x00013730

0000ca70 <pfree>:
    ca70:	e92d4070 	push	{r4, r5, r6, lr}
    ca74:	e2504000 	subs	r4, r0, #0
    ca78:	08bd8070 	popeq	{r4, r5, r6, pc}
    ca7c:	e59f5044 	ldr	r5, [pc, #68]	; cac8 <pfree+0x58>
    ca80:	e5950014 	ldr	r0, [r5, #20]
    ca84:	e3500000 	cmp	r0, #0
    ca88:	1a000004 	bne	caa0 <pfree+0x30>
    ca8c:	e5952018 	ldr	r2, [r5, #24]
    ca90:	e59f1034 	ldr	r1, [pc, #52]	; cacc <pfree+0x5c>
    ca94:	e5854018 	str	r4, [r5, #24]
    ca98:	e8840006 	stm	r4, {r1, r2}
    ca9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    caa0:	eb0000ae 	bl	cd60 <EnterCritical>
    caa4:	e5951014 	ldr	r1, [r5, #20]
    caa8:	e5953018 	ldr	r3, [r5, #24]
    caac:	e59f2018 	ldr	r2, [pc, #24]	; cacc <pfree+0x5c>
    cab0:	e3510000 	cmp	r1, #0
    cab4:	e1c420f0 	strd	r2, [r4]
    cab8:	e5854018 	str	r4, [r5, #24]
    cabc:	08bd8070 	popeq	{r4, r5, r6, pc}
    cac0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cac4:	ea0000d1 	b	ce10 <LeaveCritical>
    cac8:	00013d68 	.word	0x00013d68
    cacc:	50474d43 	.word	0x50474d43

0000cad0 <_GLOBAL__sub_I_mem_init>:
    cad0:	e3a02001 	mov	r2, #1
    cad4:	e59f3008 	ldr	r3, [pc, #8]	; cae4 <_GLOBAL__sub_I_mem_init+0x14>
    cad8:	e5832010 	str	r2, [r3, #16]
    cadc:	e5832014 	str	r2, [r3, #20]
    cae0:	e12fff1e 	bx	lr
    cae4:	00013d68 	.word	0x00013d68

0000cae8 <CBcmPropertyTags::CBcmPropertyTags()>:
    cae8:	e92d4010 	push	{r4, lr}
    caec:	e1a04000 	mov	r4, r0
    caf0:	e3a01008 	mov	r1, #8
    caf4:	eb0007eb 	bl	eaa8 <CBcmMailBox::CBcmMailBox(unsigned int)>
    caf8:	e1a00004 	mov	r0, r4
    cafc:	e8bd8010 	pop	{r4, pc}

0000cb00 <CBcmPropertyTags::~CBcmPropertyTags()>:
    cb00:	e92d4010 	push	{r4, lr}
    cb04:	e1a04000 	mov	r4, r0
    cb08:	eb0007e8 	bl	eab0 <CBcmMailBox::~CBcmMailBox()>
    cb0c:	e1a00004 	mov	r0, r4
    cb10:	e8bd8010 	pop	{r4, pc}

0000cb14 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    cb14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb18:	e2525000 	subs	r5, r2, #0
    cb1c:	e1a09000 	mov	r9, r0
    cb20:	e1a08001 	mov	r8, r1
    cb24:	e1a04003 	mov	r4, r3
    cb28:	e59d6020 	ldr	r6, [sp, #32]
    cb2c:	0a00003f 	beq	cc30 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
    cb30:	e354000f 	cmp	r4, #15
    cb34:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    cb38:	e244700c 	sub	r7, r4, #12
    cb3c:	85858000 	strhi	r8, [r5]
    cb40:	85857004 	strhi	r7, [r5, #4]
    cb44:	85856008 	strhi	r6, [r5, #8]
    cb48:	9a00002c 	bls	cc00 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
    cb4c:	e284a00c 	add	sl, r4, #12
    cb50:	e31a0003 	tst	sl, #3
    cb54:	1a000024 	bne	cbec <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd8>
    cb58:	e3a00000 	mov	r0, #0
    cb5c:	ebffeeac 	bl	8614 <CMemorySystem::GetCoherentPage(unsigned int)>
    cb60:	e3a07000 	mov	r7, #0
    cb64:	e1a06000 	mov	r6, r0
    cb68:	e2808008 	add	r8, r0, #8
    cb6c:	e580a000 	str	sl, [r0]
    cb70:	e1a02004 	mov	r2, r4
    cb74:	e1a00008 	mov	r0, r8
    cb78:	e5867004 	str	r7, [r6, #4]
    cb7c:	e1a01005 	mov	r1, r5
    cb80:	eb000629 	bl	e42c <memcpy>
    cb84:	e7887004 	str	r7, [r8, r4]
    cb88:	ee077f9a 	mcr	15, 0, r7, cr7, cr10, {4}
    cb8c:	e286a101 	add	sl, r6, #1073741824	; 0x40000000
    cb90:	e1a00009 	mov	r0, r9
    cb94:	e1a0100a 	mov	r1, sl
    cb98:	eb0007c5 	bl	eab4 <CBcmMailBox::WriteRead(unsigned int)>
    cb9c:	e15a0000 	cmp	sl, r0
    cba0:	0a000001 	beq	cbac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x98>
    cba4:	e3a00000 	mov	r0, #0
    cba8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cbac:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
    cbb0:	e5963004 	ldr	r3, [r6, #4]
    cbb4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    cbb8:	1afffff9 	bne	cba4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x90>
    cbbc:	e1a02004 	mov	r2, r4
    cbc0:	e1a01008 	mov	r1, r8
    cbc4:	e1a00005 	mov	r0, r5
    cbc8:	eb000617 	bl	e42c <memcpy>
    cbcc:	e5950008 	ldr	r0, [r5, #8]
    cbd0:	e3500000 	cmp	r0, #0
    cbd4:	aafffff2 	bge	cba4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x90>
    cbd8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    cbdc:	e5850008 	str	r0, [r5, #8]
    cbe0:	e2900000 	adds	r0, r0, #0
    cbe4:	13a00001 	movne	r0, #1
    cbe8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cbec:	e3a02052 	mov	r2, #82	; 0x52
    cbf0:	e59f104c 	ldr	r1, [pc, #76]	; cc44 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x130>
    cbf4:	e59f004c 	ldr	r0, [pc, #76]	; cc48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x134>
    cbf8:	ebffef78 	bl	89e0 <assertion_failed>
    cbfc:	eaffffd5 	b	cb58 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x44>
    cc00:	e3a02033 	mov	r2, #51	; 0x33
    cc04:	e59f1038 	ldr	r1, [pc, #56]	; cc44 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x130>
    cc08:	e59f003c 	ldr	r0, [pc, #60]	; cc4c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x138>
    cc0c:	ebffef73 	bl	89e0 <assertion_failed>
    cc10:	e5858000 	str	r8, [r5]
    cc14:	e5857004 	str	r7, [r5, #4]
    cc18:	e5856008 	str	r6, [r5, #8]
    cc1c:	e3a02050 	mov	r2, #80	; 0x50
    cc20:	e59f101c 	ldr	r1, [pc, #28]	; cc44 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x130>
    cc24:	e59f0024 	ldr	r0, [pc, #36]	; cc50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x13c>
    cc28:	ebffef6c 	bl	89e0 <assertion_failed>
    cc2c:	eaffffc6 	b	cb4c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x38>
    cc30:	e3a02032 	mov	r2, #50	; 0x32
    cc34:	e59f1008 	ldr	r1, [pc, #8]	; cc44 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x130>
    cc38:	e59f0014 	ldr	r0, [pc, #20]	; cc54 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x140>
    cc3c:	ebffef67 	bl	89e0 <assertion_failed>
    cc40:	eaffffba 	b	cb30 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
    cc44:	00013768 	.word	0x00013768
    cc48:	000137dc 	.word	0x000137dc
    cc4c:	00013788 	.word	0x00013788
    cc50:	000137b0 	.word	0x000137b0
    cc54:	0001377c 	.word	0x0001377c

0000cc58 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    cc58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cc5c:	e2519000 	subs	r9, r1, #0
    cc60:	e1a0a000 	mov	sl, r0
    cc64:	e1a05002 	mov	r5, r2
    cc68:	0a00002d 	beq	cd24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xcc>
    cc6c:	e355000f 	cmp	r5, #15
    cc70:	9a000026 	bls	cd10 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xb8>
    cc74:	e285800c 	add	r8, r5, #12
    cc78:	e3180003 	tst	r8, #3
    cc7c:	1a00001e 	bne	ccfc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
    cc80:	e3a00000 	mov	r0, #0
    cc84:	ebffee62 	bl	8614 <CMemorySystem::GetCoherentPage(unsigned int)>
    cc88:	e3a06000 	mov	r6, #0
    cc8c:	e1a04000 	mov	r4, r0
    cc90:	e2807008 	add	r7, r0, #8
    cc94:	e5808000 	str	r8, [r0]
    cc98:	e1a02005 	mov	r2, r5
    cc9c:	e1a00007 	mov	r0, r7
    cca0:	e5846004 	str	r6, [r4, #4]
    cca4:	e1a01009 	mov	r1, r9
    cca8:	eb0005df 	bl	e42c <memcpy>
    ccac:	e7876005 	str	r6, [r7, r5]
    ccb0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    ccb4:	e2848101 	add	r8, r4, #1073741824	; 0x40000000
    ccb8:	e1a0000a 	mov	r0, sl
    ccbc:	e1a01008 	mov	r1, r8
    ccc0:	eb00077b 	bl	eab4 <CBcmMailBox::WriteRead(unsigned int)>
    ccc4:	e1500008 	cmp	r0, r8
    ccc8:	0a000001 	beq	ccd4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
    cccc:	e3a00000 	mov	r0, #0
    ccd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ccd4:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    ccd8:	e5943004 	ldr	r3, [r4, #4]
    ccdc:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    cce0:	1afffff9 	bne	cccc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x74>
    cce4:	e1a02005 	mov	r2, r5
    cce8:	e1a01007 	mov	r1, r7
    ccec:	e1a00009 	mov	r0, r9
    ccf0:	eb0005cd 	bl	e42c <memcpy>
    ccf4:	e3a00001 	mov	r0, #1
    ccf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ccfc:	e3a02052 	mov	r2, #82	; 0x52
    cd00:	e59f1030 	ldr	r1, [pc, #48]	; cd38 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
    cd04:	e59f0030 	ldr	r0, [pc, #48]	; cd3c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
    cd08:	ebffef34 	bl	89e0 <assertion_failed>
    cd0c:	eaffffdb 	b	cc80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    cd10:	e3a02050 	mov	r2, #80	; 0x50
    cd14:	e59f101c 	ldr	r1, [pc, #28]	; cd38 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
    cd18:	e59f0020 	ldr	r0, [pc, #32]	; cd40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
    cd1c:	ebffef2f 	bl	89e0 <assertion_failed>
    cd20:	eaffffd3 	b	cc74 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    cd24:	e3a0204f 	mov	r2, #79	; 0x4f
    cd28:	e59f1008 	ldr	r1, [pc, #8]	; cd38 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
    cd2c:	e59f0010 	ldr	r0, [pc, #16]	; cd44 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xec>
    cd30:	ebffef2a 	bl	89e0 <assertion_failed>
    cd34:	eaffffcc 	b	cc6c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
    cd38:	00013768 	.word	0x00013768
    cd3c:	000137dc 	.word	0x000137dc
    cd40:	000137b0 	.word	0x000137b0
    cd44:	000137f4 	.word	0x000137f4

0000cd48 <CurrentExecutionLevel>:
    cd48:	e10f0000 	mrs	r0, CPSR
    cd4c:	e3100040 	tst	r0, #64	; 0x40
    cd50:	01a003a0 	lsreq	r0, r0, #7
    cd54:	02000001 	andeq	r0, r0, #1
    cd58:	13a00002 	movne	r0, #2
    cd5c:	e12fff1e 	bx	lr

0000cd60 <EnterCritical>:
    cd60:	e2403001 	sub	r3, r0, #1
    cd64:	e3530001 	cmp	r3, #1
    cd68:	e92d4070 	push	{r4, r5, r6, lr}
    cd6c:	e1a04000 	mov	r4, r0
    cd70:	9a000003 	bls	cd84 <EnterCritical+0x24>
    cd74:	e3a02061 	mov	r2, #97	; 0x61
    cd78:	e59f107c 	ldr	r1, [pc, #124]	; cdfc <EnterCritical+0x9c>
    cd7c:	e59f007c 	ldr	r0, [pc, #124]	; ce00 <EnterCritical+0xa0>
    cd80:	ebffef16 	bl	89e0 <assertion_failed>
    cd84:	e10f5000 	mrs	r5, CPSR
    cd88:	e3540002 	cmp	r4, #2
    cd8c:	0a000001 	beq	cd98 <EnterCritical+0x38>
    cd90:	e3150040 	tst	r5, #64	; 0x40
    cd94:	1a000013 	bne	cde8 <EnterCritical+0x88>
    cd98:	f10c0080 	cpsid	i
    cd9c:	e3540002 	cmp	r4, #2
    cda0:	1a000000 	bne	cda8 <EnterCritical+0x48>
    cda4:	f10c0040 	cpsid	f
    cda8:	e59f4054 	ldr	r4, [pc, #84]	; ce04 <EnterCritical+0xa4>
    cdac:	e5943000 	ldr	r3, [r4]
    cdb0:	e3530013 	cmp	r3, #19
    cdb4:	9a000003 	bls	cdc8 <EnterCritical+0x68>
    cdb8:	e3a0206f 	mov	r2, #111	; 0x6f
    cdbc:	e59f1038 	ldr	r1, [pc, #56]	; cdfc <EnterCritical+0x9c>
    cdc0:	e59f0040 	ldr	r0, [pc, #64]	; ce08 <EnterCritical+0xa8>
    cdc4:	ebffef05 	bl	89e0 <assertion_failed>
    cdc8:	e5943000 	ldr	r3, [r4]
    cdcc:	e3a02000 	mov	r2, #0
    cdd0:	e2831001 	add	r1, r3, #1
    cdd4:	e0843103 	add	r3, r4, r3, lsl #2
    cdd8:	e5841000 	str	r1, [r4]
    cddc:	e5835004 	str	r5, [r3, #4]
    cde0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
    cde4:	e8bd8070 	pop	{r4, r5, r6, pc}
    cde8:	e3a02067 	mov	r2, #103	; 0x67
    cdec:	e59f1008 	ldr	r1, [pc, #8]	; cdfc <EnterCritical+0x9c>
    cdf0:	e59f0014 	ldr	r0, [pc, #20]	; ce0c <EnterCritical+0xac>
    cdf4:	ebffeef9 	bl	89e0 <assertion_failed>
    cdf8:	eaffffe6 	b	cd98 <EnterCritical+0x38>
    cdfc:	00013800 	.word	0x00013800
    ce00:	00013810 	.word	0x00013810
    ce04:	00013d84 	.word	0x00013d84
    ce08:	00013878 	.word	0x00013878
    ce0c:	00013848 	.word	0x00013848

0000ce10 <LeaveCritical>:
    ce10:	e92d4010 	push	{r4, lr}
    ce14:	e3a03000 	mov	r3, #0
    ce18:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ce1c:	e59f4034 	ldr	r4, [pc, #52]	; ce58 <LeaveCritical+0x48>
    ce20:	e5943000 	ldr	r3, [r4]
    ce24:	e3530000 	cmp	r3, #0
    ce28:	1a000003 	bne	ce3c <LeaveCritical+0x2c>
    ce2c:	e3a02079 	mov	r2, #121	; 0x79
    ce30:	e59f1024 	ldr	r1, [pc, #36]	; ce5c <LeaveCritical+0x4c>
    ce34:	e59f0024 	ldr	r0, [pc, #36]	; ce60 <LeaveCritical+0x50>
    ce38:	ebffeee8 	bl	89e0 <assertion_failed>
    ce3c:	e5943000 	ldr	r3, [r4]
    ce40:	e2433001 	sub	r3, r3, #1
    ce44:	e5843000 	str	r3, [r4]
    ce48:	e0844103 	add	r4, r4, r3, lsl #2
    ce4c:	e5943004 	ldr	r3, [r4, #4]
    ce50:	e121f003 	msr	CPSR_c, r3
    ce54:	e8bd8010 	pop	{r4, pc}
    ce58:	00013d84 	.word	0x00013d84
    ce5c:	00013800 	.word	0x00013800
    ce60:	000138a0 	.word	0x000138a0

0000ce64 <CleanAndInvalidateDataCacheRange>:
    ce64:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ce68:	e2813020 	add	r3, r1, #32
    ce6c:	e353001f 	cmp	r3, #31
    ce70:	9a000007 	bls	ce94 <CleanAndInvalidateDataCacheRange+0x30>
    ce74:	e2800020 	add	r0, r0, #32
    ce78:	e3c1101f 	bic	r1, r1, #31
    ce7c:	e0801001 	add	r1, r0, r1
    ce80:	ea000000 	b	ce88 <CleanAndInvalidateDataCacheRange+0x24>
    ce84:	e2800020 	add	r0, r0, #32
    ce88:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    ce8c:	e1510000 	cmp	r1, r0
    ce90:	1afffffb 	bne	ce84 <CleanAndInvalidateDataCacheRange+0x20>
    ce94:	e3a03000 	mov	r3, #0
    ce98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ce9c:	e12fff1e 	bx	lr

0000cea0 <SyncDataAndInstructionCache>:
    cea0:	e3a03000 	mov	r3, #0
    cea4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    cea8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ceac:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    ceb0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    ceb4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ceb8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    cebc:	e12fff1e 	bx	lr

0000cec0 <CTimer::CTimer(CInterruptSystem*)>:
    cec0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cec4:	e3a05000 	mov	r5, #0
    cec8:	e3a07001 	mov	r7, #1
    cecc:	e1a04000 	mov	r4, r0
    ced0:	e59f6058 	ldr	r6, [pc, #88]	; cf30 <CTimer::CTimer(CInterruptSystem*)+0x70>
    ced4:	e5805004 	str	r5, [r0, #4]
    ced8:	e5801000 	str	r1, [r0]
    cedc:	e5805008 	str	r5, [r0, #8]
    cee0:	e5805014 	str	r5, [r0, #20]
    cee4:	e5807010 	str	r7, [r0, #16]
    cee8:	e580500c 	str	r5, [r0, #12]
    ceec:	e2800018 	add	r0, r0, #24
    cef0:	eb0005ba 	bl	e5e0 <CPtrList::CPtrList()>
    cef4:	e5963000 	ldr	r3, [r6]
    cef8:	e59f2034 	ldr	r2, [pc, #52]	; cf34 <CTimer::CTimer(CInterruptSystem*)+0x74>
    cefc:	e1530005 	cmp	r3, r5
    cf00:	e59f3030 	ldr	r3, [pc, #48]	; cf38 <CTimer::CTimer(CInterruptSystem*)+0x78>
    cf04:	e584701c 	str	r7, [r4, #28]
    cf08:	e5845028 	str	r5, [r4, #40]	; 0x28
    cf0c:	e1c422f0 	strd	r2, [r4, #32]
    cf10:	0a000003 	beq	cf24 <CTimer::CTimer(CInterruptSystem*)+0x64>
    cf14:	e3a0203e 	mov	r2, #62	; 0x3e
    cf18:	e59f101c 	ldr	r1, [pc, #28]	; cf3c <CTimer::CTimer(CInterruptSystem*)+0x7c>
    cf1c:	e59f001c 	ldr	r0, [pc, #28]	; cf40 <CTimer::CTimer(CInterruptSystem*)+0x80>
    cf20:	ebffeeae 	bl	89e0 <assertion_failed>
    cf24:	e5864000 	str	r4, [r6]
    cf28:	e1a00004 	mov	r0, r4
    cf2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cf30:	00013dd8 	.word	0x00013dd8
    cf34:	00055730 	.word	0x00055730
    cf38:	0000015e 	.word	0x0000015e
    cf3c:	000138f0 	.word	0x000138f0
    cf40:	000138fc 	.word	0x000138fc

0000cf44 <CTimer::~CTimer()>:
    cf44:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf48:	e1a09000 	mov	r9, r0
    cf4c:	e5900000 	ldr	r0, [r0]
    cf50:	e3500000 	cmp	r0, #0
    cf54:	0a000028 	beq	cffc <CTimer::~CTimer()+0xb8>
    cf58:	e3a01003 	mov	r1, #3
    cf5c:	ebfff9a7 	bl	b600 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    cf60:	e59f80ac 	ldr	r8, [pc, #172]	; d014 <CTimer::~CTimer()+0xd0>
    cf64:	e59fb0ac 	ldr	fp, [pc, #172]	; d018 <CTimer::~CTimer()+0xd4>
    cf68:	e59f70ac 	ldr	r7, [pc, #172]	; d01c <CTimer::~CTimer()+0xd8>
    cf6c:	e59fa0ac 	ldr	sl, [pc, #172]	; d020 <CTimer::~CTimer()+0xdc>
    cf70:	e2894018 	add	r4, r9, #24
    cf74:	ea000011 	b	cfc0 <CTimer::~CTimer()+0x7c>
    cf78:	e1a01005 	mov	r1, r5
    cf7c:	e1a00004 	mov	r0, r4
    cf80:	eb0005be 	bl	e680 <CPtrList::GetPtr(TPtrListElement*)>
    cf84:	e2506000 	subs	r6, r0, #0
    cf88:	0a000016 	beq	cfe8 <CTimer::~CTimer()+0xa4>
    cf8c:	e5963000 	ldr	r3, [r6]
    cf90:	e1530007 	cmp	r3, r7
    cf94:	0a000003 	beq	cfa8 <CTimer::~CTimer()+0x64>
    cf98:	e3a0204c 	mov	r2, #76	; 0x4c
    cf9c:	e1a01008 	mov	r1, r8
    cfa0:	e1a0000a 	mov	r0, sl
    cfa4:	ebffee8d 	bl	89e0 <assertion_failed>
    cfa8:	e1a01005 	mov	r1, r5
    cfac:	e1a00004 	mov	r0, r4
    cfb0:	eb000649 	bl	e8dc <CPtrList::Remove(TPtrListElement*)>
    cfb4:	e1a00006 	mov	r0, r6
    cfb8:	e3a01014 	mov	r1, #20
    cfbc:	ebfffc4d 	bl	c0f8 <operator delete(void*, unsigned int)>
    cfc0:	e1a00004 	mov	r0, r4
    cfc4:	eb000595 	bl	e620 <CPtrList::GetFirst()>
    cfc8:	e2505000 	subs	r5, r0, #0
    cfcc:	1affffe9 	bne	cf78 <CTimer::~CTimer()+0x34>
    cfd0:	e59f304c 	ldr	r3, [pc, #76]	; d024 <CTimer::~CTimer()+0xe0>
    cfd4:	e1a00004 	mov	r0, r4
    cfd8:	e5835000 	str	r5, [r3]
    cfdc:	eb000582 	bl	e5ec <CPtrList::~CPtrList()>
    cfe0:	e1a00009 	mov	r0, r9
    cfe4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe8:	e3a0204b 	mov	r2, #75	; 0x4b
    cfec:	e1a01008 	mov	r1, r8
    cff0:	e1a0000b 	mov	r0, fp
    cff4:	ebffee79 	bl	89e0 <assertion_failed>
    cff8:	eaffffe3 	b	cf8c <CTimer::~CTimer()+0x48>
    cffc:	e59f0024 	ldr	r0, [pc, #36]	; d028 <CTimer::~CTimer()+0xe4>
    d000:	e3a02044 	mov	r2, #68	; 0x44
    d004:	e59f1008 	ldr	r1, [pc, #8]	; d014 <CTimer::~CTimer()+0xd0>
    d008:	ebffee74 	bl	89e0 <assertion_failed>
    d00c:	e5990000 	ldr	r0, [r9]
    d010:	eaffffd0 	b	cf58 <CTimer::~CTimer()+0x14>
    d014:	000138f0 	.word	0x000138f0
    d018:	00013924 	.word	0x00013924
    d01c:	4b544d43 	.word	0x4b544d43
    d020:	00013930 	.word	0x00013930
    d024:	00013dd8 	.word	0x00013dd8
    d028:	0001390c 	.word	0x0001390c

0000d02c <CTimer::Initialize()>:
    d02c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d030:	e1a04000 	mov	r4, r0
    d034:	e5900000 	ldr	r0, [r0]
    d038:	e24dd00c 	sub	sp, sp, #12
    d03c:	e3500000 	cmp	r0, #0
    d040:	0a000031 	beq	d10c <CTimer::Initialize()+0xe0>
    d044:	e1a03004 	mov	r3, r4
    d048:	e59f20d4 	ldr	r2, [pc, #212]	; d124 <CTimer::Initialize()+0xf8>
    d04c:	e3a01003 	mov	r1, #3
    d050:	ebfff936 	bl	b530 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d054:	e3a06000 	mov	r6, #0
    d058:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    d05c:	e59f20c4 	ldr	r2, [pc, #196]	; d128 <CTimer::Initialize()+0xfc>
    d060:	e59f30c4 	ldr	r3, [pc, #196]	; d12c <CTimer::Initialize()+0x100>
    d064:	e59f70c4 	ldr	r7, [pc, #196]	; d130 <CTimer::Initialize()+0x104>
    d068:	e5823004 	str	r3, [r2, #4]
    d06c:	e5923004 	ldr	r3, [r2, #4]
    d070:	e2833c27 	add	r3, r3, #9984	; 0x2700
    d074:	e2833010 	add	r3, r3, #16
    d078:	e5823018 	str	r3, [r2, #24]
    d07c:	e5940020 	ldr	r0, [r4, #32]
    d080:	e5945004 	ldr	r5, [r4, #4]
    d084:	e0603280 	rsb	r3, r0, r0, lsl #5
    d088:	e0800103 	add	r0, r0, r3, lsl #2
    d08c:	e1a00180 	lsl	r0, r0, #3
    d090:	eb0004fc 	bl	e488 <DelayLoop>
    d094:	e5941004 	ldr	r1, [r4, #4]
    d098:	e59f0094 	ldr	r0, [pc, #148]	; d134 <CTimer::Initialize()+0x108>
    d09c:	e0411005 	sub	r1, r1, r5
    d0a0:	eb0007cc 	bl	efd8 <__udivsi3>
    d0a4:	e1a05000 	mov	r5, r0
    d0a8:	e5942020 	ldr	r2, [r4, #32]
    d0ac:	e59f0084 	ldr	r0, [pc, #132]	; d138 <CTimer::Initialize()+0x10c>
    d0b0:	e0020592 	mul	r2, r2, r5
    d0b4:	e0832792 	umull	r2, r3, r2, r7
    d0b8:	e1a012a3 	lsr	r1, r3, #5
    d0bc:	e2812f7d 	add	r2, r1, #500	; 0x1f4
    d0c0:	e0832092 	umull	r2, r3, r2, r0
    d0c4:	e1a03323 	lsr	r3, r3, #6
    d0c8:	e5841020 	str	r1, [r4, #32]
    d0cc:	e5843024 	str	r3, [r4, #36]	; 0x24
    d0d0:	ebffef58 	bl	8e38 <CLogger::Get()>
    d0d4:	e0832795 	umull	r2, r3, r5, r7
    d0d8:	e1a022a3 	lsr	r2, r3, #5
    d0dc:	e0823102 	add	r3, r2, r2, lsl #2
    d0e0:	e0833103 	add	r3, r3, r3, lsl #2
    d0e4:	e0455103 	sub	r5, r5, r3, lsl #2
    d0e8:	e88d0024 	stm	sp, {r2, r5}
    d0ec:	e59f3048 	ldr	r3, [pc, #72]	; d13c <CTimer::Initialize()+0x110>
    d0f0:	e3a02003 	mov	r2, #3
    d0f4:	e59f1044 	ldr	r1, [pc, #68]	; d140 <CTimer::Initialize()+0x114>
    d0f8:	ebfff0e0 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0fc:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    d100:	e3a00001 	mov	r0, #1
    d104:	e28dd00c 	add	sp, sp, #12
    d108:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d10c:	e59f0030 	ldr	r0, [pc, #48]	; d144 <CTimer::Initialize()+0x118>
    d110:	e3a02058 	mov	r2, #88	; 0x58
    d114:	e59f102c 	ldr	r1, [pc, #44]	; d148 <CTimer::Initialize()+0x11c>
    d118:	ebffee30 	bl	89e0 <assertion_failed>
    d11c:	e5940000 	ldr	r0, [r4]
    d120:	eaffffc7 	b	d044 <CTimer::Initialize()+0x18>
    d124:	0000d914 	.word	0x0000d914
    d128:	20003000 	.word	0x20003000
    d12c:	fe363c80 	.word	0xfe363c80
    d130:	51eb851f 	.word	0x51eb851f
    d134:	00002710 	.word	0x00002710
    d138:	10624dd3 	.word	0x10624dd3
    d13c:	00013958 	.word	0x00013958
    d140:	000138b8 	.word	0x000138b8
    d144:	0001390c 	.word	0x0001390c
    d148:	000138f0 	.word	0x000138f0

0000d14c <CTimer::SetTimeZone(int)>:
    d14c:	e59f2018 	ldr	r2, [pc, #24]	; d16c <CTimer::SetTimeZone(int)+0x20>
    d150:	e2813e59 	add	r3, r1, #1424	; 0x590
    d154:	e283300f 	add	r3, r3, #15
    d158:	e1530002 	cmp	r3, r2
    d15c:	95801014 	strls	r1, [r0, #20]
    d160:	93a00001 	movls	r0, #1
    d164:	83a00000 	movhi	r0, #0
    d168:	e12fff1e 	bx	lr
    d16c:	00000b3e 	.word	0x00000b3e

0000d170 <CTimer::GetTimeZone() const>:
    d170:	e5900014 	ldr	r0, [r0, #20]
    d174:	e12fff1e 	bx	lr

0000d178 <CTimer::SetTime(unsigned int, bool)>:
    d178:	e3520000 	cmp	r2, #0
    d17c:	e92d4070 	push	{r4, r5, r6, lr}
    d180:	e1a04000 	mov	r4, r0
    d184:	e1a05001 	mov	r5, r1
    d188:	1a000004 	bne	d1a0 <CTimer::SetTime(unsigned int, bool)+0x28>
    d18c:	e5903014 	ldr	r3, [r0, #20]
    d190:	e0633203 	rsb	r3, r3, r3, lsl #4
    d194:	e1b03103 	lsls	r3, r3, #2
    d198:	4a00000e 	bmi	d1d8 <CTimer::SetTime(unsigned int, bool)+0x60>
    d19c:	e0855003 	add	r5, r5, r3
    d1a0:	e5940010 	ldr	r0, [r4, #16]
    d1a4:	e3500000 	cmp	r0, #0
    d1a8:	1a000002 	bne	d1b8 <CTimer::SetTime(unsigned int, bool)+0x40>
    d1ac:	e3a00001 	mov	r0, #1
    d1b0:	e584500c 	str	r5, [r4, #12]
    d1b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1b8:	ebfffee8 	bl	cd60 <EnterCritical>
    d1bc:	e5943010 	ldr	r3, [r4, #16]
    d1c0:	e584500c 	str	r5, [r4, #12]
    d1c4:	e3530000 	cmp	r3, #0
    d1c8:	0a000007 	beq	d1ec <CTimer::SetTime(unsigned int, bool)+0x74>
    d1cc:	ebffff0f 	bl	ce10 <LeaveCritical>
    d1d0:	e3a00001 	mov	r0, #1
    d1d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1d8:	e2631000 	rsb	r1, r3, #0
    d1dc:	e1510005 	cmp	r1, r5
    d1e0:	daffffed 	ble	d19c <CTimer::SetTime(unsigned int, bool)+0x24>
    d1e4:	e1a00002 	mov	r0, r2
    d1e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d1ec:	e3a00001 	mov	r0, #1
    d1f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d1f4 <CTimer::GetClockTicks()>:
    d1f4:	e3a03000 	mov	r3, #0
    d1f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d1fc:	e59f2008 	ldr	r2, [pc, #8]	; d20c <CTimer::GetClockTicks()+0x18>
    d200:	e5920004 	ldr	r0, [r2, #4]
    d204:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d208:	e12fff1e 	bx	lr
    d20c:	20003000 	.word	0x20003000

0000d210 <CTimer::GetTicks() const>:
    d210:	e5900004 	ldr	r0, [r0, #4]
    d214:	e12fff1e 	bx	lr

0000d218 <CTimer::GetUptime() const>:
    d218:	e5900008 	ldr	r0, [r0, #8]
    d21c:	e12fff1e 	bx	lr

0000d220 <CTimer::GetTime() const>:
    d220:	e590000c 	ldr	r0, [r0, #12]
    d224:	e12fff1e 	bx	lr

0000d228 <CTimer::GetUniversalTime() const>:
    d228:	e5903014 	ldr	r3, [r0, #20]
    d22c:	e590000c 	ldr	r0, [r0, #12]
    d230:	e0633203 	rsb	r3, r3, r3, lsl #4
    d234:	e1a03103 	lsl	r3, r3, #2
    d238:	e1500003 	cmp	r0, r3
    d23c:	a0400003 	subge	r0, r0, r3
    d240:	b3a00000 	movlt	r0, #0
    d244:	e12fff1e 	bx	lr

0000d248 <CTimer::GetTimeString()>:
    d248:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d24c:	e1a04000 	mov	r4, r0
    d250:	e5900010 	ldr	r0, [r0, #16]
    d254:	e24dd01c 	sub	sp, sp, #28
    d258:	e3500000 	cmp	r0, #0
    d25c:	1a000098 	bne	d4c4 <CTimer::GetTimeString()+0x27c>
    d260:	e594500c 	ldr	r5, [r4, #12]
    d264:	e594b004 	ldr	fp, [r4, #4]
    d268:	e195900b 	orrs	r9, r5, fp
    d26c:	0a000047 	beq	d390 <CTimer::GetTimeString()+0x148>
    d270:	e59f62f0 	ldr	r6, [pc, #752]	; d568 <CTimer::GetTimeString()+0x320>
    d274:	e59f02f0 	ldr	r0, [pc, #752]	; d56c <CTimer::GetTimeString()+0x324>
    d278:	e0832695 	umull	r2, r3, r5, r6
    d27c:	e1a072a3 	lsr	r7, r3, #5
    d280:	e1a0c007 	mov	ip, r7
    d284:	e59f22e4 	ldr	r2, [pc, #740]	; d570 <CTimer::GetTimeString()+0x328>
    d288:	e0876697 	umull	r6, r7, r7, r6
    d28c:	e0810095 	umull	r0, r1, r5, r0
    d290:	e0832295 	umull	r2, r3, r5, r2
    d294:	e1a062a7 	lsr	r6, r7, #5
    d298:	e0666206 	rsb	r6, r6, r6, lsl #4
    d29c:	e06c720c 	rsb	r7, ip, ip, lsl #4
    d2a0:	e0457107 	sub	r7, r5, r7, lsl #2
    d2a4:	e04c6106 	sub	r6, ip, r6, lsl #2
    d2a8:	e59f42c4 	ldr	r4, [pc, #708]	; d574 <CTimer::GetTimeString()+0x32c>
    d2ac:	e59f82c4 	ldr	r8, [pc, #708]	; d578 <CTimer::GetTimeString()+0x330>
    d2b0:	e59fc2c4 	ldr	ip, [pc, #708]	; d57c <CTimer::GetTimeString()+0x334>
    d2b4:	e1a0a5a1 	lsr	sl, r1, #11
    d2b8:	e59fe2c0 	ldr	lr, [pc, #704]	; d580 <CTimer::GetTimeString()+0x338>
    d2bc:	e1a05823 	lsr	r5, r3, #16
    d2c0:	ea000009 	b	d2ec <CTimer::GetTimeString()+0xa4>
    d2c4:	e1540203 	cmp	r4, r3, lsl #4
    d2c8:	03a03001 	moveq	r3, #1
    d2cc:	13a03000 	movne	r3, #0
    d2d0:	e3530000 	cmp	r3, #0
    d2d4:	0a000012 	beq	d324 <CTimer::GetTimeString()+0xdc>
    d2d8:	e155000c 	cmp	r5, ip
    d2dc:	9a000014 	bls	d334 <CTimer::GetTimeString()+0xec>
    d2e0:	e1a0300e 	mov	r3, lr
    d2e4:	e0455003 	sub	r5, r5, r3
    d2e8:	e2844001 	add	r4, r4, #1
    d2ec:	e0810894 	umull	r0, r1, r4, r8
    d2f0:	e1a032a1 	lsr	r3, r1, #5
    d2f4:	e1a003a1 	lsr	r0, r1, #7
    d2f8:	e0831103 	add	r1, r3, r3, lsl #2
    d2fc:	e0811101 	add	r1, r1, r1, lsl #2
    d300:	e0803100 	add	r3, r0, r0, lsl #2
    d304:	e1540101 	cmp	r4, r1, lsl #2
    d308:	e0833103 	add	r3, r3, r3, lsl #2
    d30c:	0affffec 	beq	d2c4 <CTimer::GetTimeString()+0x7c>
    d310:	e3140003 	tst	r4, #3
    d314:	03a03001 	moveq	r3, #1
    d318:	13a03000 	movne	r3, #0
    d31c:	e3530000 	cmp	r3, #0
    d320:	1affffec 	bne	d2d8 <CTimer::GetTimeString()+0x90>
    d324:	e3550f5b 	cmp	r5, #364	; 0x16c
    d328:	9a00001b 	bls	d39c <CTimer::GetTimeString()+0x154>
    d32c:	e1a0300c 	mov	r3, ip
    d330:	eaffffeb 	b	d2e4 <CTimer::GetTimeString()+0x9c>
    d334:	e355001e 	cmp	r5, #30
    d338:	8a000086 	bhi	d558 <CTimer::GetTimeString()+0x310>
    d33c:	e3a02000 	mov	r2, #0
    d340:	e3a00010 	mov	r0, #16
    d344:	e58d2014 	str	r2, [sp, #20]
    d348:	ebfffb66 	bl	c0e8 <operator new(unsigned int)>
    d34c:	e59f8224 	ldr	r8, [pc, #548]	; d578 <CTimer::GetTimeString()+0x330>
    d350:	e089889b 	umull	r8, r9, fp, r8
    d354:	e1a082a9 	lsr	r8, r9, #5
    d358:	e1a09000 	mov	r9, r0
    d35c:	ebfff07e 	bl	955c <CString::CString()>
    d360:	e59f321c 	ldr	r3, [pc, #540]	; d584 <CTimer::GetTimeString()+0x33c>
    d364:	e0888108 	add	r8, r8, r8, lsl #2
    d368:	e0888108 	add	r8, r8, r8, lsl #2
    d36c:	e1540003 	cmp	r4, r3
    d370:	e04b8108 	sub	r8, fp, r8, lsl #2
    d374:	8a000041 	bhi	d480 <CTimer::GetTimeString()+0x238>
    d378:	e88d0180 	stm	sp, {r7, r8}
    d37c:	e1a03006 	mov	r3, r6
    d380:	e1a0200a 	mov	r2, sl
    d384:	e59f11fc 	ldr	r1, [pc, #508]	; d588 <CTimer::GetTimeString()+0x340>
    d388:	e1a00009 	mov	r0, r9
    d38c:	ebfff82e 	bl	b44c <CString::Format(char const*, ...)>
    d390:	e1a00009 	mov	r0, r9
    d394:	e28dd01c 	add	sp, sp, #28
    d398:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d39c:	e355001e 	cmp	r5, #30
    d3a0:	8245501f 	subhi	r5, r5, #31
    d3a4:	83a0201c 	movhi	r2, #28
    d3a8:	9affffe3 	bls	d33c <CTimer::GetTimeString()+0xf4>
    d3ac:	e1520005 	cmp	r2, r5
    d3b0:	8a00004b 	bhi	d4e4 <CTimer::GetTimeString()+0x29c>
    d3b4:	e0455002 	sub	r5, r5, r2
    d3b8:	e355001e 	cmp	r5, #30
    d3bc:	93a02002 	movls	r2, #2
    d3c0:	9affffde 	bls	d340 <CTimer::GetTimeString()+0xf8>
    d3c4:	e245201f 	sub	r2, r5, #31
    d3c8:	e352001d 	cmp	r2, #29
    d3cc:	9a000046 	bls	d4ec <CTimer::GetTimeString()+0x2a4>
    d3d0:	e245203d 	sub	r2, r5, #61	; 0x3d
    d3d4:	e352001e 	cmp	r2, #30
    d3d8:	9a000046 	bls	d4f8 <CTimer::GetTimeString()+0x2b0>
    d3dc:	e245205c 	sub	r2, r5, #92	; 0x5c
    d3e0:	e352001d 	cmp	r2, #29
    d3e4:	9a000046 	bls	d504 <CTimer::GetTimeString()+0x2bc>
    d3e8:	e245207a 	sub	r2, r5, #122	; 0x7a
    d3ec:	e352001e 	cmp	r2, #30
    d3f0:	9a000046 	bls	d510 <CTimer::GetTimeString()+0x2c8>
    d3f4:	e2452099 	sub	r2, r5, #153	; 0x99
    d3f8:	e352001e 	cmp	r2, #30
    d3fc:	9a000049 	bls	d528 <CTimer::GetTimeString()+0x2e0>
    d400:	e24520b8 	sub	r2, r5, #184	; 0xb8
    d404:	e352001d 	cmp	r2, #29
    d408:	9a000049 	bls	d534 <CTimer::GetTimeString()+0x2ec>
    d40c:	e24520d6 	sub	r2, r5, #214	; 0xd6
    d410:	e352001e 	cmp	r2, #30
    d414:	9a000040 	bls	d51c <CTimer::GetTimeString()+0x2d4>
    d418:	e24520f5 	sub	r2, r5, #245	; 0xf5
    d41c:	e352001d 	cmp	r2, #29
    d420:	9a000046 	bls	d540 <CTimer::GetTimeString()+0x2f8>
    d424:	e2452e11 	sub	r2, r5, #272	; 0x110
    d428:	e2422003 	sub	r2, r2, #3
    d42c:	e352001e 	cmp	r2, #30
    d430:	9a000045 	bls	d54c <CTimer::GetTimeString()+0x304>
    d434:	e2455e13 	sub	r5, r5, #304	; 0x130
    d438:	e2455002 	sub	r5, r5, #2
    d43c:	e3a0200d 	mov	r2, #13
    d440:	e59f0144 	ldr	r0, [pc, #324]	; d58c <CTimer::GetTimeString()+0x344>
    d444:	ea000004 	b	d45c <CTimer::GetTimeString()+0x214>
    d448:	e7901102 	ldr	r1, [r0, r2, lsl #2]
    d44c:	e1550001 	cmp	r5, r1
    d450:	3affffba 	bcc	d340 <CTimer::GetTimeString()+0xf8>
    d454:	e0455001 	sub	r5, r5, r1
    d458:	e2822001 	add	r2, r2, #1
    d45c:	e3520001 	cmp	r2, #1
    d460:	13a01000 	movne	r1, #0
    d464:	02031001 	andeq	r1, r3, #1
    d468:	e3510000 	cmp	r1, #0
    d46c:	0afffff5 	beq	d448 <CTimer::GetTimeString()+0x200>
    d470:	e355001c 	cmp	r5, #28
    d474:	9a00001a 	bls	d4e4 <CTimer::GetTimeString()+0x29c>
    d478:	e3a0101d 	mov	r1, #29
    d47c:	eafffff4 	b	d454 <CTimer::GetTimeString()+0x20c>
    d480:	e59f0108 	ldr	r0, [pc, #264]	; d590 <CTimer::GetTimeString()+0x348>
    d484:	e59fc108 	ldr	ip, [pc, #264]	; d594 <CTimer::GetTimeString()+0x34c>
    d488:	e081009a 	umull	r0, r1, sl, r0
    d48c:	e1a03221 	lsr	r3, r1, #4
    d490:	e59d2014 	ldr	r2, [sp, #20]
    d494:	e0833083 	add	r3, r3, r3, lsl #1
    d498:	e04aa183 	sub	sl, sl, r3, lsl #3
    d49c:	e79c2102 	ldr	r2, [ip, r2, lsl #2]
    d4a0:	e1a00009 	mov	r0, r9
    d4a4:	e98d01c0 	stmib	sp, {r6, r7, r8}
    d4a8:	e2853001 	add	r3, r5, #1
    d4ac:	e58da000 	str	sl, [sp]
    d4b0:	e59f10e0 	ldr	r1, [pc, #224]	; d598 <CTimer::GetTimeString()+0x350>
    d4b4:	ebfff7e4 	bl	b44c <CString::Format(char const*, ...)>
    d4b8:	e1a00009 	mov	r0, r9
    d4bc:	e28dd01c 	add	sp, sp, #28
    d4c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4c4:	ebfffe25 	bl	cd60 <EnterCritical>
    d4c8:	e5943010 	ldr	r3, [r4, #16]
    d4cc:	e594500c 	ldr	r5, [r4, #12]
    d4d0:	e3530000 	cmp	r3, #0
    d4d4:	e594b004 	ldr	fp, [r4, #4]
    d4d8:	0affff62 	beq	d268 <CTimer::GetTimeString()+0x20>
    d4dc:	ebfffe4b 	bl	ce10 <LeaveCritical>
    d4e0:	eaffff60 	b	d268 <CTimer::GetTimeString()+0x20>
    d4e4:	e3a02001 	mov	r2, #1
    d4e8:	eaffff94 	b	d340 <CTimer::GetTimeString()+0xf8>
    d4ec:	e1a05002 	mov	r5, r2
    d4f0:	e3a02003 	mov	r2, #3
    d4f4:	eaffff91 	b	d340 <CTimer::GetTimeString()+0xf8>
    d4f8:	e1a05002 	mov	r5, r2
    d4fc:	e3a02004 	mov	r2, #4
    d500:	eaffff8e 	b	d340 <CTimer::GetTimeString()+0xf8>
    d504:	e1a05002 	mov	r5, r2
    d508:	e3a02005 	mov	r2, #5
    d50c:	eaffff8b 	b	d340 <CTimer::GetTimeString()+0xf8>
    d510:	e1a05002 	mov	r5, r2
    d514:	e3a02006 	mov	r2, #6
    d518:	eaffff88 	b	d340 <CTimer::GetTimeString()+0xf8>
    d51c:	e1a05002 	mov	r5, r2
    d520:	e3a02009 	mov	r2, #9
    d524:	eaffff85 	b	d340 <CTimer::GetTimeString()+0xf8>
    d528:	e1a05002 	mov	r5, r2
    d52c:	e3a02007 	mov	r2, #7
    d530:	eaffff82 	b	d340 <CTimer::GetTimeString()+0xf8>
    d534:	e1a05002 	mov	r5, r2
    d538:	e3a02008 	mov	r2, #8
    d53c:	eaffff7f 	b	d340 <CTimer::GetTimeString()+0xf8>
    d540:	e1a05002 	mov	r5, r2
    d544:	e3a0200a 	mov	r2, #10
    d548:	eaffff7c 	b	d340 <CTimer::GetTimeString()+0xf8>
    d54c:	e1a05002 	mov	r5, r2
    d550:	e3a0200b 	mov	r2, #11
    d554:	eaffff79 	b	d340 <CTimer::GetTimeString()+0xf8>
    d558:	e245501f 	sub	r5, r5, #31
    d55c:	e3a03001 	mov	r3, #1
    d560:	e3a0201d 	mov	r2, #29
    d564:	eaffff90 	b	d3ac <CTimer::GetTimeString()+0x164>
    d568:	88888889 	.word	0x88888889
    d56c:	91a2b3c5 	.word	0x91a2b3c5
    d570:	c22e4507 	.word	0xc22e4507
    d574:	000007b2 	.word	0x000007b2
    d578:	51eb851f 	.word	0x51eb851f
    d57c:	0000016d 	.word	0x0000016d
    d580:	0000016e 	.word	0x0000016e
    d584:	000007b7 	.word	0x000007b7
    d588:	0001398c 	.word	0x0001398c
    d58c:	000138c0 	.word	0x000138c0
    d590:	aaaaaaab 	.word	0xaaaaaaab
    d594:	00013cf8 	.word	0x00013cf8
    d598:	00013970 	.word	0x00013970

0000d59c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    d59c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5a0:	e1a0a000 	mov	sl, r0
    d5a4:	e1a04002 	mov	r4, r2
    d5a8:	e3a00014 	mov	r0, #20
    d5ac:	e1a06001 	mov	r6, r1
    d5b0:	e1a08003 	mov	r8, r3
    d5b4:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    d5b8:	ebfffaca 	bl	c0e8 <operator new(unsigned int)>
    d5bc:	e59a1004 	ldr	r1, [sl, #4]
    d5c0:	e3540000 	cmp	r4, #0
    d5c4:	e1a07000 	mov	r7, r0
    d5c8:	e0816006 	add	r6, r1, r6
    d5cc:	0a00003a 	beq	d6bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    d5d0:	e59a001c 	ldr	r0, [sl, #28]
    d5d4:	e59f20f4 	ldr	r2, [pc, #244]	; d6d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    d5d8:	e3500000 	cmp	r0, #0
    d5dc:	e5874004 	str	r4, [r7, #4]
    d5e0:	e5876008 	str	r6, [r7, #8]
    d5e4:	e587800c 	str	r8, [r7, #12]
    d5e8:	e5875010 	str	r5, [r7, #16]
    d5ec:	e5872000 	str	r2, [r7]
    d5f0:	1a00002f 	bne	d6b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    d5f4:	e28a5018 	add	r5, sl, #24
    d5f8:	e1a00005 	mov	r0, r5
    d5fc:	eb000407 	bl	e620 <CPtrList::GetFirst()>
    d600:	e2504000 	subs	r4, r0, #0
    d604:	0a000025 	beq	d6a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    d608:	e59f90c4 	ldr	r9, [pc, #196]	; d6d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    d60c:	e59f80bc 	ldr	r8, [pc, #188]	; d6d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    d610:	ea000010 	b	d658 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    d614:	e59b3000 	ldr	r3, [fp]
    d618:	e1530008 	cmp	r3, r8
    d61c:	0a000003 	beq	d630 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    d620:	e59f20b0 	ldr	r2, [pc, #176]	; d6d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    d624:	e1a01009 	mov	r1, r9
    d628:	e59f00ac 	ldr	r0, [pc, #172]	; d6dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    d62c:	ebffeceb 	bl	89e0 <assertion_failed>
    d630:	e59b3008 	ldr	r3, [fp, #8]
    d634:	e1a01004 	mov	r1, r4
    d638:	e0433006 	sub	r3, r3, r6
    d63c:	e3530000 	cmp	r3, #0
    d640:	e1a00005 	mov	r0, r5
    d644:	ca00000d 	bgt	d680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
    d648:	eb0003f6 	bl	e628 <CPtrList::GetNext(TPtrListElement*)>
    d64c:	e3500000 	cmp	r0, #0
    d650:	0a000012 	beq	d6a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    d654:	e1a04000 	mov	r4, r0
    d658:	e1a01004 	mov	r1, r4
    d65c:	e1a00005 	mov	r0, r5
    d660:	eb000406 	bl	e680 <CPtrList::GetPtr(TPtrListElement*)>
    d664:	e250b000 	subs	fp, r0, #0
    d668:	1affffe9 	bne	d614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    d66c:	e59f206c 	ldr	r2, [pc, #108]	; d6e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    d670:	e1a01009 	mov	r1, r9
    d674:	e59f0068 	ldr	r0, [pc, #104]	; d6e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    d678:	ebffecd8 	bl	89e0 <assertion_failed>
    d67c:	eaffffe4 	b	d614 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    d680:	e1a02007 	mov	r2, r7
    d684:	eb000413 	bl	e6d8 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    d688:	e59a301c 	ldr	r3, [sl, #28]
    d68c:	e3530000 	cmp	r3, #0
    d690:	0a000000 	beq	d698 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    d694:	ebfffddd 	bl	ce10 <LeaveCritical>
    d698:	e1a00007 	mov	r0, r7
    d69c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6a0:	e1a01004 	mov	r1, r4
    d6a4:	e1a00005 	mov	r0, r5
    d6a8:	e1a02007 	mov	r2, r7
    d6ac:	eb00044b 	bl	e7e0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    d6b0:	eafffff4 	b	d688 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    d6b4:	ebfffda9 	bl	cd60 <EnterCritical>
    d6b8:	eaffffcd 	b	d5f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    d6bc:	e59f2024 	ldr	r2, [pc, #36]	; d6e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    d6c0:	e59f100c 	ldr	r1, [pc, #12]	; d6d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    d6c4:	e59f0020 	ldr	r0, [pc, #32]	; d6ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
    d6c8:	ebffecc4 	bl	89e0 <assertion_failed>
    d6cc:	eaffffbf 	b	d5d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>
    d6d0:	4b544d43 	.word	0x4b544d43
    d6d4:	000138f0 	.word	0x000138f0
    d6d8:	00000133 	.word	0x00000133
    d6dc:	000139b0 	.word	0x000139b0
    d6e0:	00000132 	.word	0x00000132
    d6e4:	000139a0 	.word	0x000139a0
    d6e8:	00000122 	.word	0x00000122
    d6ec:	00013394 	.word	0x00013394

0000d6f0 <CTimer::CancelKernelTimer(unsigned int)>:
    d6f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d6f4:	e2514000 	subs	r4, r1, #0
    d6f8:	e1a05000 	mov	r5, r0
    d6fc:	0a000020 	beq	d784 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    d700:	e595001c 	ldr	r0, [r5, #28]
    d704:	e3500000 	cmp	r0, #0
    d708:	1a00001b 	bne	d77c <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    d70c:	e2856018 	add	r6, r5, #24
    d710:	e1a00006 	mov	r0, r6
    d714:	e1a01004 	mov	r1, r4
    d718:	eb0004c4 	bl	ea30 <CPtrList::Find(void*)>
    d71c:	e2507000 	subs	r7, r0, #0
    d720:	0a00000b 	beq	d754 <CTimer::CancelKernelTimer(unsigned int)+0x64>
    d724:	e59f306c 	ldr	r3, [pc, #108]	; d798 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    d728:	e5942000 	ldr	r2, [r4]
    d72c:	e1520003 	cmp	r2, r3
    d730:	1a00000c 	bne	d768 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    d734:	e1a01007 	mov	r1, r7
    d738:	e1a00006 	mov	r0, r6
    d73c:	eb000466 	bl	e8dc <CPtrList::Remove(TPtrListElement*)>
    d740:	e3a03000 	mov	r3, #0
    d744:	e1a00004 	mov	r0, r4
    d748:	e5843000 	str	r3, [r4]
    d74c:	e3a01014 	mov	r1, #20
    d750:	ebfffa68 	bl	c0f8 <operator delete(void*, unsigned int)>
    d754:	e595301c 	ldr	r3, [r5, #28]
    d758:	e3530000 	cmp	r3, #0
    d75c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    d760:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d764:	eafffda9 	b	ce10 <LeaveCritical>
    d768:	e59f202c 	ldr	r2, [pc, #44]	; d79c <CTimer::CancelKernelTimer(unsigned int)+0xac>
    d76c:	e59f102c 	ldr	r1, [pc, #44]	; d7a0 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    d770:	e59f002c 	ldr	r0, [pc, #44]	; d7a4 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    d774:	ebffec99 	bl	89e0 <assertion_failed>
    d778:	eaffffed 	b	d734 <CTimer::CancelKernelTimer(unsigned int)+0x44>
    d77c:	ebfffd77 	bl	cd60 <EnterCritical>
    d780:	eaffffe1 	b	d70c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    d784:	e59f201c 	ldr	r2, [pc, #28]	; d7a8 <CTimer::CancelKernelTimer(unsigned int)+0xb8>
    d788:	e59f1010 	ldr	r1, [pc, #16]	; d7a0 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    d78c:	e59f0018 	ldr	r0, [pc, #24]	; d7ac <CTimer::CancelKernelTimer(unsigned int)+0xbc>
    d790:	ebffec92 	bl	89e0 <assertion_failed>
    d794:	eaffffd9 	b	d700 <CTimer::CancelKernelTimer(unsigned int)+0x10>
    d798:	4b544d43 	.word	0x4b544d43
    d79c:	00000156 	.word	0x00000156
    d7a0:	000138f0 	.word	0x000138f0
    d7a4:	00013930 	.word	0x00013930
    d7a8:	0000014f 	.word	0x0000014f
    d7ac:	00013924 	.word	0x00013924

0000d7b0 <CTimer::PollKernelTimers()>:
    d7b0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7b4:	e1a05000 	mov	r5, r0
    d7b8:	e590001c 	ldr	r0, [r0, #28]
    d7bc:	e3500000 	cmp	r0, #0
    d7c0:	1a00004a 	bne	d8f0 <CTimer::PollKernelTimers()+0x140>
    d7c4:	e2856018 	add	r6, r5, #24
    d7c8:	e1a00006 	mov	r0, r6
    d7cc:	eb000393 	bl	e620 <CPtrList::GetFirst()>
    d7d0:	e2504000 	subs	r4, r0, #0
    d7d4:	0a00003b 	beq	d8c8 <CTimer::PollKernelTimers()+0x118>
    d7d8:	e59f9118 	ldr	r9, [pc, #280]	; d8f8 <CTimer::PollKernelTimers()+0x148>
    d7dc:	e59f8118 	ldr	r8, [pc, #280]	; d8fc <CTimer::PollKernelTimers()+0x14c>
    d7e0:	e59fa118 	ldr	sl, [pc, #280]	; d900 <CTimer::PollKernelTimers()+0x150>
    d7e4:	ea000010 	b	d82c <CTimer::PollKernelTimers()+0x7c>
    d7e8:	e5974004 	ldr	r4, [r7, #4]
    d7ec:	e3540000 	cmp	r4, #0
    d7f0:	0a00002c 	beq	d8a8 <CTimer::PollKernelTimers()+0xf8>
    d7f4:	e5972010 	ldr	r2, [r7, #16]
    d7f8:	e597100c 	ldr	r1, [r7, #12]
    d7fc:	e1a00007 	mov	r0, r7
    d800:	e12fff34 	blx	r4
    d804:	e3a03000 	mov	r3, #0
    d808:	e1a00007 	mov	r0, r7
    d80c:	e5873000 	str	r3, [r7]
    d810:	e3a01014 	mov	r1, #20
    d814:	ebfffa37 	bl	c0f8 <operator delete(void*, unsigned int)>
    d818:	e595001c 	ldr	r0, [r5, #28]
    d81c:	e3500000 	cmp	r0, #0
    d820:	1a000025 	bne	d8bc <CTimer::PollKernelTimers()+0x10c>
    d824:	e25b4000 	subs	r4, fp, #0
    d828:	0a000026 	beq	d8c8 <CTimer::PollKernelTimers()+0x118>
    d82c:	e1a01004 	mov	r1, r4
    d830:	e1a00006 	mov	r0, r6
    d834:	eb000391 	bl	e680 <CPtrList::GetPtr(TPtrListElement*)>
    d838:	e2507000 	subs	r7, r0, #0
    d83c:	0a000026 	beq	d8dc <CTimer::PollKernelTimers()+0x12c>
    d840:	e5973000 	ldr	r3, [r7]
    d844:	e1530008 	cmp	r3, r8
    d848:	0a000003 	beq	d85c <CTimer::PollKernelTimers()+0xac>
    d84c:	e3a02f5b 	mov	r2, #364	; 0x16c
    d850:	e1a01009 	mov	r1, r9
    d854:	e1a0000a 	mov	r0, sl
    d858:	ebffec60 	bl	89e0 <assertion_failed>
    d85c:	e5952004 	ldr	r2, [r5, #4]
    d860:	e5973008 	ldr	r3, [r7, #8]
    d864:	e0433002 	sub	r3, r3, r2
    d868:	e3530000 	cmp	r3, #0
    d86c:	ca000015 	bgt	d8c8 <CTimer::PollKernelTimers()+0x118>
    d870:	e1a01004 	mov	r1, r4
    d874:	e1a00006 	mov	r0, r6
    d878:	eb00036a 	bl	e628 <CPtrList::GetNext(TPtrListElement*)>
    d87c:	e1a01004 	mov	r1, r4
    d880:	e1a0b000 	mov	fp, r0
    d884:	e1a00006 	mov	r0, r6
    d888:	eb000413 	bl	e8dc <CPtrList::Remove(TPtrListElement*)>
    d88c:	e595301c 	ldr	r3, [r5, #28]
    d890:	e3530000 	cmp	r3, #0
    d894:	0affffd3 	beq	d7e8 <CTimer::PollKernelTimers()+0x38>
    d898:	ebfffd5c 	bl	ce10 <LeaveCritical>
    d89c:	e5974004 	ldr	r4, [r7, #4]
    d8a0:	e3540000 	cmp	r4, #0
    d8a4:	1affffd2 	bne	d7f4 <CTimer::PollKernelTimers()+0x44>
    d8a8:	e59f2054 	ldr	r2, [pc, #84]	; d904 <CTimer::PollKernelTimers()+0x154>
    d8ac:	e1a01009 	mov	r1, r9
    d8b0:	e59f0050 	ldr	r0, [pc, #80]	; d908 <CTimer::PollKernelTimers()+0x158>
    d8b4:	ebffec49 	bl	89e0 <assertion_failed>
    d8b8:	eaffffcd 	b	d7f4 <CTimer::PollKernelTimers()+0x44>
    d8bc:	ebfffd27 	bl	cd60 <EnterCritical>
    d8c0:	e25b4000 	subs	r4, fp, #0
    d8c4:	1affffd8 	bne	d82c <CTimer::PollKernelTimers()+0x7c>
    d8c8:	e595301c 	ldr	r3, [r5, #28]
    d8cc:	e3530000 	cmp	r3, #0
    d8d0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8d4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8d8:	eafffd4c 	b	ce10 <LeaveCritical>
    d8dc:	e59f2028 	ldr	r2, [pc, #40]	; d90c <CTimer::PollKernelTimers()+0x15c>
    d8e0:	e1a01009 	mov	r1, r9
    d8e4:	e59f0024 	ldr	r0, [pc, #36]	; d910 <CTimer::PollKernelTimers()+0x160>
    d8e8:	ebffec3c 	bl	89e0 <assertion_failed>
    d8ec:	eaffffd3 	b	d840 <CTimer::PollKernelTimers()+0x90>
    d8f0:	ebfffd1a 	bl	cd60 <EnterCritical>
    d8f4:	eaffffb2 	b	d7c4 <CTimer::PollKernelTimers()+0x14>
    d8f8:	000138f0 	.word	0x000138f0
    d8fc:	4b544d43 	.word	0x4b544d43
    d900:	00013930 	.word	0x00013930
    d904:	0000017a 	.word	0x0000017a
    d908:	00013394 	.word	0x00013394
    d90c:	0000016b 	.word	0x0000016b
    d910:	00013924 	.word	0x00013924

0000d914 <CTimer::InterruptHandler(void*)>:
    d914:	e92d4010 	push	{r4, lr}
    d918:	e2504000 	subs	r4, r0, #0
    d91c:	0a00003c 	beq	da14 <CTimer::InterruptHandler(void*)+0x100>
    d920:	e3a03000 	mov	r3, #0
    d924:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d928:	e59f20f8 	ldr	r2, [pc, #248]	; da28 <CTimer::InterruptHandler(void*)+0x114>
    d92c:	e5923018 	ldr	r3, [r2, #24]
    d930:	e2833c27 	add	r3, r3, #9984	; 0x2700
    d934:	e2833010 	add	r3, r3, #16
    d938:	e5823018 	str	r3, [r2, #24]
    d93c:	e5921004 	ldr	r1, [r2, #4]
    d940:	e1530001 	cmp	r3, r1
    d944:	e3a01008 	mov	r1, #8
    d948:	35923004 	ldrcc	r3, [r2, #4]
    d94c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    d950:	32833010 	addcc	r3, r3, #16
    d954:	35823018 	strcc	r3, [r2, #24]
    d958:	e59f20c8 	ldr	r2, [pc, #200]	; da28 <CTimer::InterruptHandler(void*)+0x114>
    d95c:	e3a03000 	mov	r3, #0
    d960:	e5821000 	str	r1, [r2]
    d964:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d968:	e5940010 	ldr	r0, [r4, #16]
    d96c:	e1500003 	cmp	r0, r3
    d970:	1a00001a 	bne	d9e0 <CTimer::InterruptHandler(void*)+0xcc>
    d974:	e5942004 	ldr	r2, [r4, #4]
    d978:	e59f00ac 	ldr	r0, [pc, #172]	; da2c <CTimer::InterruptHandler(void*)+0x118>
    d97c:	e2822001 	add	r2, r2, #1
    d980:	e0810092 	umull	r0, r1, r2, r0
    d984:	e1a032a1 	lsr	r3, r1, #5
    d988:	e0833103 	add	r3, r3, r3, lsl #2
    d98c:	e0833103 	add	r3, r3, r3, lsl #2
    d990:	e0523103 	subs	r3, r2, r3, lsl #2
    d994:	e5842004 	str	r2, [r4, #4]
    d998:	1a000007 	bne	d9bc <CTimer::InterruptHandler(void*)+0xa8>
    d99c:	e5942008 	ldr	r2, [r4, #8]
    d9a0:	e2822001 	add	r2, r2, #1
    d9a4:	e5842008 	str	r2, [r4, #8]
    d9a8:	e594200c 	ldr	r2, [r4, #12]
    d9ac:	e2822001 	add	r2, r2, #1
    d9b0:	e584200c 	str	r2, [r4, #12]
    d9b4:	e3530000 	cmp	r3, #0
    d9b8:	1a000006 	bne	d9d8 <CTimer::InterruptHandler(void*)+0xc4>
    d9bc:	e1a00004 	mov	r0, r4
    d9c0:	ebffff7a 	bl	d7b0 <CTimer::PollKernelTimers()>
    d9c4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d9c8:	e3530000 	cmp	r3, #0
    d9cc:	08bd8010 	popeq	{r4, pc}
    d9d0:	e8bd4010 	pop	{r4, lr}
    d9d4:	e12fff13 	bx	r3
    d9d8:	ebfffd0c 	bl	ce10 <LeaveCritical>
    d9dc:	eafffff6 	b	d9bc <CTimer::InterruptHandler(void*)+0xa8>
    d9e0:	ebfffcde 	bl	cd60 <EnterCritical>
    d9e4:	e5942004 	ldr	r2, [r4, #4]
    d9e8:	e59f003c 	ldr	r0, [pc, #60]	; da2c <CTimer::InterruptHandler(void*)+0x118>
    d9ec:	e2822001 	add	r2, r2, #1
    d9f0:	e0810092 	umull	r0, r1, r2, r0
    d9f4:	e1a032a1 	lsr	r3, r1, #5
    d9f8:	e0833103 	add	r3, r3, r3, lsl #2
    d9fc:	e0833103 	add	r3, r3, r3, lsl #2
    da00:	e1520103 	cmp	r2, r3, lsl #2
    da04:	e5842004 	str	r2, [r4, #4]
    da08:	e5943010 	ldr	r3, [r4, #16]
    da0c:	1affffe8 	bne	d9b4 <CTimer::InterruptHandler(void*)+0xa0>
    da10:	eaffffe1 	b	d99c <CTimer::InterruptHandler(void*)+0x88>
    da14:	e59f2014 	ldr	r2, [pc, #20]	; da30 <CTimer::InterruptHandler(void*)+0x11c>
    da18:	e59f1014 	ldr	r1, [pc, #20]	; da34 <CTimer::InterruptHandler(void*)+0x120>
    da1c:	e59f0014 	ldr	r0, [pc, #20]	; da38 <CTimer::InterruptHandler(void*)+0x124>
    da20:	ebffebee 	bl	89e0 <assertion_failed>
    da24:	eaffffbd 	b	d920 <CTimer::InterruptHandler(void*)+0xc>
    da28:	20003000 	.word	0x20003000
    da2c:	51eb851f 	.word	0x51eb851f
    da30:	000001b3 	.word	0x000001b3
    da34:	000138f0 	.word	0x000138f0
    da38:	000139d8 	.word	0x000139d8

0000da3c <CTimer::InterruptHandler()>:
    da3c:	e92d4010 	push	{r4, lr}
    da40:	e3a03000 	mov	r3, #0
    da44:	e1a04000 	mov	r4, r0
    da48:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    da4c:	e59f20e4 	ldr	r2, [pc, #228]	; db38 <CTimer::InterruptHandler()+0xfc>
    da50:	e5923018 	ldr	r3, [r2, #24]
    da54:	e2833c27 	add	r3, r3, #9984	; 0x2700
    da58:	e2833010 	add	r3, r3, #16
    da5c:	e5823018 	str	r3, [r2, #24]
    da60:	e5921004 	ldr	r1, [r2, #4]
    da64:	e1530001 	cmp	r3, r1
    da68:	e3a01008 	mov	r1, #8
    da6c:	35923004 	ldrcc	r3, [r2, #4]
    da70:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    da74:	32833010 	addcc	r3, r3, #16
    da78:	35823018 	strcc	r3, [r2, #24]
    da7c:	e59f20b4 	ldr	r2, [pc, #180]	; db38 <CTimer::InterruptHandler()+0xfc>
    da80:	e3a03000 	mov	r3, #0
    da84:	e5821000 	str	r1, [r2]
    da88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    da8c:	e5900010 	ldr	r0, [r0, #16]
    da90:	e1500003 	cmp	r0, r3
    da94:	1a00001a 	bne	db04 <CTimer::InterruptHandler()+0xc8>
    da98:	e5942004 	ldr	r2, [r4, #4]
    da9c:	e59f0098 	ldr	r0, [pc, #152]	; db3c <CTimer::InterruptHandler()+0x100>
    daa0:	e2822001 	add	r2, r2, #1
    daa4:	e0810092 	umull	r0, r1, r2, r0
    daa8:	e1a032a1 	lsr	r3, r1, #5
    daac:	e0833103 	add	r3, r3, r3, lsl #2
    dab0:	e0833103 	add	r3, r3, r3, lsl #2
    dab4:	e0523103 	subs	r3, r2, r3, lsl #2
    dab8:	e5842004 	str	r2, [r4, #4]
    dabc:	1a000007 	bne	dae0 <CTimer::InterruptHandler()+0xa4>
    dac0:	e5942008 	ldr	r2, [r4, #8]
    dac4:	e2822001 	add	r2, r2, #1
    dac8:	e5842008 	str	r2, [r4, #8]
    dacc:	e594200c 	ldr	r2, [r4, #12]
    dad0:	e2822001 	add	r2, r2, #1
    dad4:	e584200c 	str	r2, [r4, #12]
    dad8:	e3530000 	cmp	r3, #0
    dadc:	1a000006 	bne	dafc <CTimer::InterruptHandler()+0xc0>
    dae0:	e1a00004 	mov	r0, r4
    dae4:	ebffff31 	bl	d7b0 <CTimer::PollKernelTimers()>
    dae8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    daec:	e3530000 	cmp	r3, #0
    daf0:	08bd8010 	popeq	{r4, pc}
    daf4:	e8bd4010 	pop	{r4, lr}
    daf8:	e12fff13 	bx	r3
    dafc:	ebfffcc3 	bl	ce10 <LeaveCritical>
    db00:	eafffff6 	b	dae0 <CTimer::InterruptHandler()+0xa4>
    db04:	ebfffc95 	bl	cd60 <EnterCritical>
    db08:	e5942004 	ldr	r2, [r4, #4]
    db0c:	e59f0028 	ldr	r0, [pc, #40]	; db3c <CTimer::InterruptHandler()+0x100>
    db10:	e2822001 	add	r2, r2, #1
    db14:	e0810092 	umull	r0, r1, r2, r0
    db18:	e1a032a1 	lsr	r3, r1, #5
    db1c:	e0833103 	add	r3, r3, r3, lsl #2
    db20:	e0833103 	add	r3, r3, r3, lsl #2
    db24:	e1520103 	cmp	r2, r3, lsl #2
    db28:	e5842004 	str	r2, [r4, #4]
    db2c:	e5943010 	ldr	r3, [r4, #16]
    db30:	1affffe8 	bne	dad8 <CTimer::InterruptHandler()+0x9c>
    db34:	eaffffe1 	b	dac0 <CTimer::InterruptHandler()+0x84>
    db38:	20003000 	.word	0x20003000
    db3c:	51eb851f 	.word	0x51eb851f

0000db40 <CTimer::TuneMsDelay()>:
    db40:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    db44:	e1a04000 	mov	r4, r0
    db48:	e5900020 	ldr	r0, [r0, #32]
    db4c:	e24dd00c 	sub	sp, sp, #12
    db50:	e0603280 	rsb	r3, r0, r0, lsl #5
    db54:	e0800103 	add	r0, r0, r3, lsl #2
    db58:	e1a00180 	lsl	r0, r0, #3
    db5c:	e5945004 	ldr	r5, [r4, #4]
    db60:	eb000248 	bl	e488 <DelayLoop>
    db64:	e5941004 	ldr	r1, [r4, #4]
    db68:	e59f0068 	ldr	r0, [pc, #104]	; dbd8 <CTimer::TuneMsDelay()+0x98>
    db6c:	e0411005 	sub	r1, r1, r5
    db70:	eb000518 	bl	efd8 <__udivsi3>
    db74:	e1a05000 	mov	r5, r0
    db78:	e5942020 	ldr	r2, [r4, #32]
    db7c:	e59f6058 	ldr	r6, [pc, #88]	; dbdc <CTimer::TuneMsDelay()+0x9c>
    db80:	e0020092 	mul	r2, r2, r0
    db84:	e0832692 	umull	r2, r3, r2, r6
    db88:	e1a012a3 	lsr	r1, r3, #5
    db8c:	e59f304c 	ldr	r3, [pc, #76]	; dbe0 <CTimer::TuneMsDelay()+0xa0>
    db90:	e2812f7d 	add	r2, r1, #500	; 0x1f4
    db94:	e0832392 	umull	r2, r3, r2, r3
    db98:	e0876695 	umull	r6, r7, r5, r6
    db9c:	e1a03323 	lsr	r3, r3, #6
    dba0:	e5841020 	str	r1, [r4, #32]
    dba4:	e5843024 	str	r3, [r4, #36]	; 0x24
    dba8:	ebffeca2 	bl	8e38 <CLogger::Get()>
    dbac:	e1a022a7 	lsr	r2, r7, #5
    dbb0:	e0823102 	add	r3, r2, r2, lsl #2
    dbb4:	e0833103 	add	r3, r3, r3, lsl #2
    dbb8:	e0455103 	sub	r5, r5, r3, lsl #2
    dbbc:	e88d0024 	stm	sp, {r2, r5}
    dbc0:	e59f301c 	ldr	r3, [pc, #28]	; dbe4 <CTimer::TuneMsDelay()+0xa4>
    dbc4:	e3a02003 	mov	r2, #3
    dbc8:	e59f1018 	ldr	r1, [pc, #24]	; dbe8 <CTimer::TuneMsDelay()+0xa8>
    dbcc:	ebffee2b 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dbd0:	e28dd00c 	add	sp, sp, #12
    dbd4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dbd8:	00002710 	.word	0x00002710
    dbdc:	51eb851f 	.word	0x51eb851f
    dbe0:	10624dd3 	.word	0x10624dd3
    dbe4:	00013958 	.word	0x00013958
    dbe8:	000138b8 	.word	0x000138b8

0000dbec <CTimer::RegisterPeriodicHandler(void (*)())>:
    dbec:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    dbf0:	e92d4070 	push	{r4, r5, r6, lr}
    dbf4:	e3530000 	cmp	r3, #0
    dbf8:	e1a04000 	mov	r4, r0
    dbfc:	e1a05001 	mov	r5, r1
    dc00:	0a000003 	beq	dc14 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
    dc04:	e59f2028 	ldr	r2, [pc, #40]	; dc34 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
    dc08:	e59f1028 	ldr	r1, [pc, #40]	; dc38 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
    dc0c:	e59f0028 	ldr	r0, [pc, #40]	; dc3c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    dc10:	ebffeb72 	bl	89e0 <assertion_failed>
    dc14:	e3550000 	cmp	r5, #0
    dc18:	e5845028 	str	r5, [r4, #40]	; 0x28
    dc1c:	18bd8070 	popne	{r4, r5, r6, pc}
    dc20:	e59f2018 	ldr	r2, [pc, #24]	; dc40 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
    dc24:	e59f100c 	ldr	r1, [pc, #12]	; dc38 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
    dc28:	e59f0014 	ldr	r0, [pc, #20]	; dc44 <CTimer::RegisterPeriodicHandler(void (*)())+0x58>
    dc2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    dc30:	eaffeb6a 	b	89e0 <assertion_failed>
    dc34:	000001c9 	.word	0x000001c9
    dc38:	000138f0 	.word	0x000138f0
    dc3c:	000139e4 	.word	0x000139e4
    dc40:	000001cb 	.word	0x000001cb
    dc44:	000139fc 	.word	0x000139fc

0000dc48 <CTimer::SimpleMsDelay(unsigned int)>:
    dc48:	e3500000 	cmp	r0, #0
    dc4c:	012fff1e 	bxeq	lr
    dc50:	e0603280 	rsb	r3, r0, r0, lsl #5
    dc54:	e0800103 	add	r0, r0, r3, lsl #2
    dc58:	e1b00180 	lsls	r0, r0, #3
    dc5c:	012fff1e 	bxeq	lr
    dc60:	e2800001 	add	r0, r0, #1
    dc64:	e3a03000 	mov	r3, #0
    dc68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dc6c:	e59f3020 	ldr	r3, [pc, #32]	; dc94 <CTimer::SimpleMsDelay(unsigned int)+0x4c>
    dc70:	e1a01003 	mov	r1, r3
    dc74:	e5932004 	ldr	r2, [r3, #4]
    dc78:	e5913004 	ldr	r3, [r1, #4]
    dc7c:	e0433002 	sub	r3, r3, r2
    dc80:	e1500003 	cmp	r0, r3
    dc84:	8afffffb 	bhi	dc78 <CTimer::SimpleMsDelay(unsigned int)+0x30>
    dc88:	e3a03000 	mov	r3, #0
    dc8c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dc90:	e12fff1e 	bx	lr
    dc94:	20003000 	.word	0x20003000

0000dc98 <CTimer::SimpleusDelay(unsigned int)>:
    dc98:	e3500000 	cmp	r0, #0
    dc9c:	012fff1e 	bxeq	lr
    dca0:	e2800001 	add	r0, r0, #1
    dca4:	e3a03000 	mov	r3, #0
    dca8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dcac:	e59f3020 	ldr	r3, [pc, #32]	; dcd4 <CTimer::SimpleusDelay(unsigned int)+0x3c>
    dcb0:	e1a01003 	mov	r1, r3
    dcb4:	e5932004 	ldr	r2, [r3, #4]
    dcb8:	e5913004 	ldr	r3, [r1, #4]
    dcbc:	e0433002 	sub	r3, r3, r2
    dcc0:	e1500003 	cmp	r0, r3
    dcc4:	8afffffb 	bhi	dcb8 <CTimer::SimpleusDelay(unsigned int)+0x20>
    dcc8:	e3a03000 	mov	r3, #0
    dccc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dcd0:	e12fff1e 	bx	lr
    dcd4:	20003000 	.word	0x20003000

0000dcd8 <CTimer::IsLeapYear(unsigned int)>:
    dcd8:	e92d0030 	push	{r4, r5}
    dcdc:	e59f4048 	ldr	r4, [pc, #72]	; dd2c <CTimer::IsLeapYear(unsigned int)+0x54>
    dce0:	e0854490 	umull	r4, r5, r0, r4
    dce4:	e1a032a5 	lsr	r3, r5, #5
    dce8:	e0833103 	add	r3, r3, r3, lsl #2
    dcec:	e0833103 	add	r3, r3, r3, lsl #2
    dcf0:	e1500103 	cmp	r0, r3, lsl #2
    dcf4:	0a000004 	beq	dd0c <CTimer::IsLeapYear(unsigned int)+0x34>
    dcf8:	e8bd0030 	pop	{r4, r5}
    dcfc:	e3100003 	tst	r0, #3
    dd00:	03a00001 	moveq	r0, #1
    dd04:	13a00000 	movne	r0, #0
    dd08:	e12fff1e 	bx	lr
    dd0c:	e1a033a5 	lsr	r3, r5, #7
    dd10:	e0833103 	add	r3, r3, r3, lsl #2
    dd14:	e0833103 	add	r3, r3, r3, lsl #2
    dd18:	e1500203 	cmp	r0, r3, lsl #4
    dd1c:	03a00001 	moveq	r0, #1
    dd20:	e8bd0030 	pop	{r4, r5}
    dd24:	13a00000 	movne	r0, #0
    dd28:	e12fff1e 	bx	lr
    dd2c:	51eb851f 	.word	0x51eb851f

0000dd30 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    dd30:	e3500001 	cmp	r0, #1
    dd34:	0a000003 	beq	dd48 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    dd38:	e59f306c 	ldr	r3, [pc, #108]	; ddac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x7c>
    dd3c:	e0830100 	add	r0, r3, r0, lsl #2
    dd40:	e5900008 	ldr	r0, [r0, #8]
    dd44:	e12fff1e 	bx	lr
    dd48:	e92d0030 	push	{r4, r5}
    dd4c:	e59f405c 	ldr	r4, [pc, #92]	; ddb0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x80>
    dd50:	e0854491 	umull	r4, r5, r1, r4
    dd54:	e1a032a5 	lsr	r3, r5, #5
    dd58:	e0833103 	add	r3, r3, r3, lsl #2
    dd5c:	e0833103 	add	r3, r3, r3, lsl #2
    dd60:	e1510103 	cmp	r1, r3, lsl #2
    dd64:	0a000009 	beq	dd90 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    dd68:	e3110003 	tst	r1, #3
    dd6c:	03a03001 	moveq	r3, #1
    dd70:	13a03000 	movne	r3, #0
    dd74:	e8bd0030 	pop	{r4, r5}
    dd78:	e3530000 	cmp	r3, #0
    dd7c:	059f3028 	ldreq	r3, [pc, #40]	; ddac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x7c>
    dd80:	13a0001d 	movne	r0, #29
    dd84:	00830100 	addeq	r0, r3, r0, lsl #2
    dd88:	05900008 	ldreq	r0, [r0, #8]
    dd8c:	e12fff1e 	bx	lr
    dd90:	e1a033a5 	lsr	r3, r5, #7
    dd94:	e0833103 	add	r3, r3, r3, lsl #2
    dd98:	e0833103 	add	r3, r3, r3, lsl #2
    dd9c:	e1510203 	cmp	r1, r3, lsl #4
    dda0:	03a03001 	moveq	r3, #1
    dda4:	13a03000 	movne	r3, #0
    dda8:	eafffff1 	b	dd74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
    ddac:	000138b8 	.word	0x000138b8
    ddb0:	51eb851f 	.word	0x51eb851f

0000ddb4 <CTimer::Get()>:
    ddb4:	e92d4010 	push	{r4, lr}
    ddb8:	e59f4020 	ldr	r4, [pc, #32]	; dde0 <CTimer::Get()+0x2c>
    ddbc:	e5940000 	ldr	r0, [r4]
    ddc0:	e3500000 	cmp	r0, #0
    ddc4:	18bd8010 	popne	{r4, pc}
    ddc8:	e59f2014 	ldr	r2, [pc, #20]	; dde4 <CTimer::Get()+0x30>
    ddcc:	e59f1014 	ldr	r1, [pc, #20]	; dde8 <CTimer::Get()+0x34>
    ddd0:	e59f0014 	ldr	r0, [pc, #20]	; ddec <CTimer::Get()+0x38>
    ddd4:	ebffeb01 	bl	89e0 <assertion_failed>
    ddd8:	e5940000 	ldr	r0, [r4]
    dddc:	e8bd8010 	pop	{r4, pc}
    dde0:	00013dd8 	.word	0x00013dd8
    dde4:	00000207 	.word	0x00000207
    dde8:	000138f0 	.word	0x000138f0
    ddec:	0001311c 	.word	0x0001311c

0000ddf0 <memset>:
    ddf0:	e3520000 	cmp	r2, #0
    ddf4:	012fff1e 	bxeq	lr
    ddf8:	e2603000 	rsb	r3, r0, #0
    ddfc:	e2033003 	and	r3, r3, #3
    de00:	e283c003 	add	ip, r3, #3
    de04:	e35c0005 	cmp	ip, #5
    de08:	33a0c005 	movcc	ip, #5
    de0c:	e92d4070 	push	{r4, r5, r6, lr}
    de10:	e2424001 	sub	r4, r2, #1
    de14:	e154000c 	cmp	r4, ip
    de18:	e6af1071 	sxtb	r1, r1
    de1c:	3a00002f 	bcc	dee0 <memset+0xf0>
    de20:	e3530000 	cmp	r3, #0
    de24:	01a05000 	moveq	r5, r0
    de28:	0a00000b 	beq	de5c <memset+0x6c>
    de2c:	e3530001 	cmp	r3, #1
    de30:	e5c01000 	strb	r1, [r0]
    de34:	e2805001 	add	r5, r0, #1
    de38:	e2424002 	sub	r4, r2, #2
    de3c:	0a000006 	beq	de5c <memset+0x6c>
    de40:	e3530003 	cmp	r3, #3
    de44:	e2805002 	add	r5, r0, #2
    de48:	e2424003 	sub	r4, r2, #3
    de4c:	e5c01001 	strb	r1, [r0, #1]
    de50:	05c01002 	strbeq	r1, [r0, #2]
    de54:	02805003 	addeq	r5, r0, #3
    de58:	02424004 	subeq	r4, r2, #4
    de5c:	e3a0c000 	mov	ip, #0
    de60:	e6ef6071 	uxtb	r6, r1
    de64:	e186e406 	orr	lr, r6, r6, lsl #8
    de68:	e0422003 	sub	r2, r2, r3
    de6c:	e18ee806 	orr	lr, lr, r6, lsl #16
    de70:	e18eec06 	orr	lr, lr, r6, lsl #24
    de74:	e0803003 	add	r3, r0, r3
    de78:	e1a06122 	lsr	r6, r2, #2
    de7c:	e28cc001 	add	ip, ip, #1
    de80:	e15c0006 	cmp	ip, r6
    de84:	e483e004 	str	lr, [r3], #4
    de88:	3afffffb 	bcc	de7c <memset+0x8c>
    de8c:	e3c2c003 	bic	ip, r2, #3
    de90:	e152000c 	cmp	r2, ip
    de94:	e085300c 	add	r3, r5, ip
    de98:	e044400c 	sub	r4, r4, ip
    de9c:	08bd8070 	popeq	{r4, r5, r6, pc}
    dea0:	e3540000 	cmp	r4, #0
    dea4:	e5c31000 	strb	r1, [r3]
    dea8:	08bd8070 	popeq	{r4, r5, r6, pc}
    deac:	e3540001 	cmp	r4, #1
    deb0:	e5c31001 	strb	r1, [r3, #1]
    deb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    deb8:	e3540002 	cmp	r4, #2
    debc:	e5c31002 	strb	r1, [r3, #2]
    dec0:	08bd8070 	popeq	{r4, r5, r6, pc}
    dec4:	e3540003 	cmp	r4, #3
    dec8:	e5c31003 	strb	r1, [r3, #3]
    decc:	08bd8070 	popeq	{r4, r5, r6, pc}
    ded0:	e3540004 	cmp	r4, #4
    ded4:	e5c31004 	strb	r1, [r3, #4]
    ded8:	15c31005 	strbne	r1, [r3, #5]
    dedc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dee0:	e1a03000 	mov	r3, r0
    dee4:	eaffffed 	b	dea0 <memset+0xb0>

0000dee8 <memcmp>:
    dee8:	e3520000 	cmp	r2, #0
    deec:	e242c001 	sub	ip, r2, #1
    def0:	0a00000d 	beq	df2c <memcmp+0x44>
    def4:	e5d02000 	ldrb	r2, [r0]
    def8:	e5d13000 	ldrb	r3, [r1]
    defc:	e1520003 	cmp	r2, r3
    df00:	8a00000b 	bhi	df34 <memcmp+0x4c>
    df04:	3a00000c 	bcc	df3c <memcmp+0x54>
    df08:	e081c00c 	add	ip, r1, ip
    df0c:	ea000004 	b	df24 <memcmp+0x3c>
    df10:	e5f02001 	ldrb	r2, [r0, #1]!
    df14:	e5f13001 	ldrb	r3, [r1, #1]!
    df18:	e1520003 	cmp	r2, r3
    df1c:	8a000004 	bhi	df34 <memcmp+0x4c>
    df20:	3a000005 	bcc	df3c <memcmp+0x54>
    df24:	e151000c 	cmp	r1, ip
    df28:	1afffff8 	bne	df10 <memcmp+0x28>
    df2c:	e3a00000 	mov	r0, #0
    df30:	e12fff1e 	bx	lr
    df34:	e3a00001 	mov	r0, #1
    df38:	e12fff1e 	bx	lr
    df3c:	e3e00000 	mvn	r0, #0
    df40:	e12fff1e 	bx	lr

0000df44 <strlen>:
    df44:	e1d010d0 	ldrsb	r1, [r0]
    df48:	e2803001 	add	r3, r0, #1
    df4c:	e3510000 	cmp	r1, #0
    df50:	0a000003 	beq	df64 <strlen+0x20>
    df54:	e0431000 	sub	r1, r3, r0
    df58:	e0d320d1 	ldrsb	r2, [r3], #1
    df5c:	e3520000 	cmp	r2, #0
    df60:	1afffffb 	bne	df54 <strlen+0x10>
    df64:	e1a00001 	mov	r0, r1
    df68:	e12fff1e 	bx	lr

0000df6c <strcmp>:
    df6c:	e1d030d0 	ldrsb	r3, [r0]
    df70:	e1d120d0 	ldrsb	r2, [r1]
    df74:	e3530000 	cmp	r3, #0
    df78:	0a00000e 	beq	dfb8 <strcmp+0x4c>
    df7c:	e3520000 	cmp	r2, #0
    df80:	0a00000c 	beq	dfb8 <strcmp+0x4c>
    df84:	e1520003 	cmp	r2, r3
    df88:	ba00000f 	blt	dfcc <strcmp+0x60>
    df8c:	da000005 	ble	dfa8 <strcmp+0x3c>
    df90:	ea00000f 	b	dfd4 <strcmp+0x68>
    df94:	e3520000 	cmp	r2, #0
    df98:	0a000006 	beq	dfb8 <strcmp+0x4c>
    df9c:	e1530002 	cmp	r3, r2
    dfa0:	ca000009 	bgt	dfcc <strcmp+0x60>
    dfa4:	ba00000a 	blt	dfd4 <strcmp+0x68>
    dfa8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    dfac:	e1f120d1 	ldrsb	r2, [r1, #1]!
    dfb0:	e3530000 	cmp	r3, #0
    dfb4:	1afffff6 	bne	df94 <strcmp+0x28>
    dfb8:	e1530002 	cmp	r3, r2
    dfbc:	ca000002 	bgt	dfcc <strcmp+0x60>
    dfc0:	b3e00000 	mvnlt	r0, #0
    dfc4:	a3a00000 	movge	r0, #0
    dfc8:	e12fff1e 	bx	lr
    dfcc:	e3a00001 	mov	r0, #1
    dfd0:	e12fff1e 	bx	lr
    dfd4:	e3e00000 	mvn	r0, #0
    dfd8:	e12fff1e 	bx	lr

0000dfdc <strcasecmp>:
    dfdc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dfe0:	e2400001 	sub	r0, r0, #1
    dfe4:	e2411001 	sub	r1, r1, #1
    dfe8:	ea000007 	b	e00c <strcasecmp+0x30>
    dfec:	e35e0019 	cmp	lr, #25
    dff0:	81a0c002 	movhi	ip, r2
    dff4:	9242c020 	subls	ip, r2, #32
    dff8:	e35c0000 	cmp	ip, #0
    dffc:	0a00000a 	beq	e02c <strcasecmp+0x50>
    e000:	e153000c 	cmp	r3, ip
    e004:	ca00000f 	bgt	e048 <strcasecmp+0x6c>
    e008:	ba000010 	blt	e050 <strcasecmp+0x74>
    e00c:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e010:	e2432061 	sub	r2, r3, #97	; 0x61
    e014:	e3520019 	cmp	r2, #25
    e018:	92433020 	subls	r3, r3, #32
    e01c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e020:	e3530000 	cmp	r3, #0
    e024:	e242e061 	sub	lr, r2, #97	; 0x61
    e028:	1affffef 	bne	dfec <strcasecmp+0x10>
    e02c:	e35e0019 	cmp	lr, #25
    e030:	92422020 	subls	r2, r2, #32
    e034:	e1520003 	cmp	r2, r3
    e038:	ba000002 	blt	e048 <strcasecmp+0x6c>
    e03c:	c3e00000 	mvngt	r0, #0
    e040:	d3a00000 	movle	r0, #0
    e044:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e048:	e3a00001 	mov	r0, #1
    e04c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e050:	e3e00000 	mvn	r0, #0
    e054:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000e058 <strncmp>:
    e058:	e3520000 	cmp	r2, #0
    e05c:	0a000016 	beq	e0bc <strncmp+0x64>
    e060:	e1d030d0 	ldrsb	r3, [r0]
    e064:	e1d1c0d0 	ldrsb	ip, [r1]
    e068:	e3530000 	cmp	r3, #0
    e06c:	0a000015 	beq	e0c8 <strncmp+0x70>
    e070:	e35c0000 	cmp	ip, #0
    e074:	0a000013 	beq	e0c8 <strncmp+0x70>
    e078:	e153000c 	cmp	r3, ip
    e07c:	ca000016 	bgt	e0dc <strncmp+0x84>
    e080:	ba000017 	blt	e0e4 <strncmp+0x8c>
    e084:	e2422001 	sub	r2, r2, #1
    e088:	e0812002 	add	r2, r1, r2
    e08c:	ea000008 	b	e0b4 <strncmp+0x5c>
    e090:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e094:	e3530000 	cmp	r3, #0
    e098:	0a000009 	beq	e0c4 <strncmp+0x6c>
    e09c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    e0a0:	e35c0000 	cmp	ip, #0
    e0a4:	0a000007 	beq	e0c8 <strncmp+0x70>
    e0a8:	e153000c 	cmp	r3, ip
    e0ac:	ca00000a 	bgt	e0dc <strncmp+0x84>
    e0b0:	ba00000b 	blt	e0e4 <strncmp+0x8c>
    e0b4:	e1520001 	cmp	r2, r1
    e0b8:	1afffff4 	bne	e090 <strncmp+0x38>
    e0bc:	e3a00000 	mov	r0, #0
    e0c0:	e12fff1e 	bx	lr
    e0c4:	e1d1c0d1 	ldrsb	ip, [r1, #1]
    e0c8:	e153000c 	cmp	r3, ip
    e0cc:	ca000002 	bgt	e0dc <strncmp+0x84>
    e0d0:	b3e00000 	mvnlt	r0, #0
    e0d4:	a3a00000 	movge	r0, #0
    e0d8:	e12fff1e 	bx	lr
    e0dc:	e3a00001 	mov	r0, #1
    e0e0:	e12fff1e 	bx	lr
    e0e4:	e3e00000 	mvn	r0, #0
    e0e8:	e12fff1e 	bx	lr

0000e0ec <strcpy>:
    e0ec:	e1d130d0 	ldrsb	r3, [r1]
    e0f0:	e1a02000 	mov	r2, r0
    e0f4:	e3530000 	cmp	r3, #0
    e0f8:	0a000003 	beq	e10c <strcpy+0x20>
    e0fc:	e4c23001 	strb	r3, [r2], #1
    e100:	e1f130d1 	ldrsb	r3, [r1, #1]!
    e104:	e3530000 	cmp	r3, #0
    e108:	1afffffb 	bne	e0fc <strcpy+0x10>
    e10c:	e3a03000 	mov	r3, #0
    e110:	e5c23000 	strb	r3, [r2]
    e114:	e12fff1e 	bx	lr

0000e118 <strncpy>:
    e118:	e3520000 	cmp	r2, #0
    e11c:	012fff1e 	bxeq	lr
    e120:	e1d1c0d0 	ldrsb	ip, [r1]
    e124:	e35c0000 	cmp	ip, #0
    e128:	0a00000a 	beq	e158 <strncpy+0x40>
    e12c:	e1a03000 	mov	r3, r0
    e130:	e0802002 	add	r2, r0, r2
    e134:	e4c3c001 	strb	ip, [r3], #1
    e138:	e1530002 	cmp	r3, r2
    e13c:	012fff1e 	bxeq	lr
    e140:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    e144:	e35c0000 	cmp	ip, #0
    e148:	1afffff9 	bne	e134 <strncpy+0x1c>
    e14c:	e3a02000 	mov	r2, #0
    e150:	e5c32000 	strb	r2, [r3]
    e154:	e12fff1e 	bx	lr
    e158:	e1a03000 	mov	r3, r0
    e15c:	eafffffa 	b	e14c <strncpy+0x34>

0000e160 <strcat>:
    e160:	e1d030d0 	ldrsb	r3, [r0]
    e164:	e3530000 	cmp	r3, #0
    e168:	e1a03000 	mov	r3, r0
    e16c:	0a000002 	beq	e17c <strcat+0x1c>
    e170:	e1f320d1 	ldrsb	r2, [r3, #1]!
    e174:	e3520000 	cmp	r2, #0
    e178:	1afffffc 	bne	e170 <strcat+0x10>
    e17c:	e1d120d0 	ldrsb	r2, [r1]
    e180:	e3520000 	cmp	r2, #0
    e184:	0a000003 	beq	e198 <strcat+0x38>
    e188:	e4c32001 	strb	r2, [r3], #1
    e18c:	e1f120d1 	ldrsb	r2, [r1, #1]!
    e190:	e3520000 	cmp	r2, #0
    e194:	1afffffb 	bne	e188 <strcat+0x28>
    e198:	e3a02000 	mov	r2, #0
    e19c:	e5c32000 	strb	r2, [r3]
    e1a0:	e12fff1e 	bx	lr

0000e1a4 <strchr>:
    e1a4:	e1d020d0 	ldrsb	r2, [r0]
    e1a8:	e3520000 	cmp	r2, #0
    e1ac:	0a000009 	beq	e1d8 <strchr+0x34>
    e1b0:	e1510002 	cmp	r1, r2
    e1b4:	1a000002 	bne	e1c4 <strchr+0x20>
    e1b8:	e12fff1e 	bx	lr
    e1bc:	e1530001 	cmp	r3, r1
    e1c0:	012fff1e 	bxeq	lr
    e1c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    e1c8:	e3530000 	cmp	r3, #0
    e1cc:	1afffffa 	bne	e1bc <strchr+0x18>
    e1d0:	e1a00003 	mov	r0, r3
    e1d4:	e12fff1e 	bx	lr
    e1d8:	e1a00002 	mov	r0, r2
    e1dc:	e12fff1e 	bx	lr

0000e1e0 <strtok_r>:
    e1e0:	e92d4030 	push	{r4, r5, lr}
    e1e4:	e2505000 	subs	r5, r0, #0
    e1e8:	0a000028 	beq	e290 <strtok_r+0xb0>
    e1ec:	e1d530d0 	ldrsb	r3, [r5]
    e1f0:	e3530000 	cmp	r3, #0
    e1f4:	0a00002a 	beq	e2a4 <strtok_r+0xc4>
    e1f8:	e1d140d0 	ldrsb	r4, [r1]
    e1fc:	e3540000 	cmp	r4, #0
    e200:	e1a00005 	mov	r0, r5
    e204:	e0d5c0d1 	ldrsb	ip, [r5], #1
    e208:	0a000008 	beq	e230 <strtok_r+0x50>
    e20c:	e15c0004 	cmp	ip, r4
    e210:	0afffff9 	beq	e1fc <strtok_r+0x1c>
    e214:	e1a0e001 	mov	lr, r1
    e218:	ea000001 	b	e224 <strtok_r+0x44>
    e21c:	e15c0003 	cmp	ip, r3
    e220:	0afffff5 	beq	e1fc <strtok_r+0x1c>
    e224:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    e228:	e3530000 	cmp	r3, #0
    e22c:	1afffffa 	bne	e21c <strtok_r+0x3c>
    e230:	e35c0000 	cmp	ip, #0
    e234:	0a00001a 	beq	e2a4 <strtok_r+0xc4>
    e238:	e1a05000 	mov	r5, r0
    e23c:	e3540000 	cmp	r4, #0
    e240:	0a000008 	beq	e268 <strtok_r+0x88>
    e244:	e15c0004 	cmp	ip, r4
    e248:	0a00000b 	beq	e27c <strtok_r+0x9c>
    e24c:	e1a0e001 	mov	lr, r1
    e250:	ea000001 	b	e25c <strtok_r+0x7c>
    e254:	e153000c 	cmp	r3, ip
    e258:	0a000007 	beq	e27c <strtok_r+0x9c>
    e25c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    e260:	e3530000 	cmp	r3, #0
    e264:	1afffffa 	bne	e254 <strtok_r+0x74>
    e268:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    e26c:	e35c0000 	cmp	ip, #0
    e270:	1afffff1 	bne	e23c <strtok_r+0x5c>
    e274:	e5825000 	str	r5, [r2]
    e278:	e8bd8030 	pop	{r4, r5, pc}
    e27c:	e3a03000 	mov	r3, #0
    e280:	e2855001 	add	r5, r5, #1
    e284:	e5453001 	strb	r3, [r5, #-1]
    e288:	e5825000 	str	r5, [r2]
    e28c:	e8bd8030 	pop	{r4, r5, pc}
    e290:	e5925000 	ldr	r5, [r2]
    e294:	e3550000 	cmp	r5, #0
    e298:	1affffd3 	bne	e1ec <strtok_r+0xc>
    e29c:	e1a00005 	mov	r0, r5
    e2a0:	e8bd8030 	pop	{r4, r5, pc}
    e2a4:	e3a05000 	mov	r5, #0
    e2a8:	e5825000 	str	r5, [r2]
    e2ac:	e1a00005 	mov	r0, r5
    e2b0:	e8bd8030 	pop	{r4, r5, pc}

0000e2b4 <strtoul>:
    e2b4:	e92d4070 	push	{r4, r5, r6, lr}
    e2b8:	e3510000 	cmp	r1, #0
    e2bc:	e2425002 	sub	r5, r2, #2
    e2c0:	15810000 	strne	r0, [r1]
    e2c4:	e3520000 	cmp	r2, #0
    e2c8:	13550022 	cmpne	r5, #34	; 0x22
    e2cc:	e3c2e010 	bic	lr, r2, #16
    e2d0:	83a05001 	movhi	r5, #1
    e2d4:	93a05000 	movls	r5, #0
    e2d8:	8a000031 	bhi	e3a4 <strtoul+0xf0>
    e2dc:	e1d030d0 	ldrsb	r3, [r0]
    e2e0:	e1a04000 	mov	r4, r0
    e2e4:	e243c009 	sub	ip, r3, #9
    e2e8:	e3530020 	cmp	r3, #32
    e2ec:	e2800001 	add	r0, r0, #1
    e2f0:	e6efc07c 	uxtb	ip, ip
    e2f4:	0afffff8 	beq	e2dc <strtoul+0x28>
    e2f8:	e35c0004 	cmp	ip, #4
    e2fc:	9afffff6 	bls	e2dc <strtoul+0x28>
    e300:	e353002b 	cmp	r3, #43	; 0x2b
    e304:	0a000028 	beq	e3ac <strtoul+0xf8>
    e308:	e353002d 	cmp	r3, #45	; 0x2d
    e30c:	01d430d1 	ldrsbeq	r3, [r4, #1]
    e310:	03a05001 	moveq	r5, #1
    e314:	01a04000 	moveq	r4, r0
    e318:	e3530030 	cmp	r3, #48	; 0x30
    e31c:	0a000026 	beq	e3bc <strtoul+0x108>
    e320:	e3520000 	cmp	r2, #0
    e324:	03a0200a 	moveq	r2, #10
    e328:	e353002f 	cmp	r3, #47	; 0x2f
    e32c:	e1a0c003 	mov	ip, r3
    e330:	da000037 	ble	e414 <strtoul+0x160>
    e334:	e3a06001 	mov	r6, #1
    e338:	e3a0e000 	mov	lr, #0
    e33c:	ea000008 	b	e364 <strtoul+0xb0>
    e340:	e020c29e 	mla	r0, lr, r2, ip
    e344:	e150000e 	cmp	r0, lr
    e348:	3a000026 	bcc	e3e8 <strtoul+0x134>
    e34c:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
    e350:	e3a06000 	mov	r6, #0
    e354:	e35c002f 	cmp	ip, #47	; 0x2f
    e358:	e1a0300c 	mov	r3, ip
    e35c:	da00000b 	ble	e390 <strtoul+0xdc>
    e360:	e1a0e000 	mov	lr, r0
    e364:	e2433061 	sub	r3, r3, #97	; 0x61
    e368:	e3530019 	cmp	r3, #25
    e36c:	924cc020 	subls	ip, ip, #32
    e370:	e35c0040 	cmp	ip, #64	; 0x40
    e374:	c24cc007 	subgt	ip, ip, #7
    e378:	e24cc030 	sub	ip, ip, #48	; 0x30
    e37c:	e15c0002 	cmp	ip, r2
    e380:	baffffee 	blt	e340 <strtoul+0x8c>
    e384:	e1a0000e 	mov	r0, lr
    e388:	e2266001 	eor	r6, r6, #1
    e38c:	e0055006 	and	r5, r5, r6
    e390:	e3510000 	cmp	r1, #0
    e394:	15814000 	strne	r4, [r1]
    e398:	e3550000 	cmp	r5, #0
    e39c:	12600000 	rsbne	r0, r0, #0
    e3a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3a4:	e3a00000 	mov	r0, #0
    e3a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3ac:	e1d430d1 	ldrsb	r3, [r4, #1]
    e3b0:	e1a04000 	mov	r4, r0
    e3b4:	e3530030 	cmp	r3, #48	; 0x30
    e3b8:	1affffd8 	bne	e320 <strtoul+0x6c>
    e3bc:	e1d430d1 	ldrsb	r3, [r4, #1]
    e3c0:	e284c001 	add	ip, r4, #1
    e3c4:	e3c30020 	bic	r0, r3, #32
    e3c8:	e3500058 	cmp	r0, #88	; 0x58
    e3cc:	1a00000a 	bne	e3fc <strtoul+0x148>
    e3d0:	e35e0000 	cmp	lr, #0
    e3d4:	1afffff2 	bne	e3a4 <strtoul+0xf0>
    e3d8:	e1d430d2 	ldrsb	r3, [r4, #2]
    e3dc:	e3a02010 	mov	r2, #16
    e3e0:	e2844002 	add	r4, r4, #2
    e3e4:	eaffffcf 	b	e328 <strtoul+0x74>
    e3e8:	e3510000 	cmp	r1, #0
    e3ec:	0a000006 	beq	e40c <strtoul+0x158>
    e3f0:	e5814000 	str	r4, [r1]
    e3f4:	e3e00000 	mvn	r0, #0
    e3f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e3fc:	e3520000 	cmp	r2, #0
    e400:	e1a0400c 	mov	r4, ip
    e404:	03a02008 	moveq	r2, #8
    e408:	eaffffc6 	b	e328 <strtoul+0x74>
    e40c:	e3e00000 	mvn	r0, #0
    e410:	e8bd8070 	pop	{r4, r5, r6, pc}
    e414:	e3510000 	cmp	r1, #0
    e418:	0affffe1 	beq	e3a4 <strtoul+0xf0>
    e41c:	e3a00000 	mov	r0, #0
    e420:	e5814000 	str	r4, [r1]
    e424:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e428 <char2int>:
    e428:	e12fff1e 	bx	lr

0000e42c <memcpy>:
    e42c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    e430:	e352007f 	cmp	r2, #127	; 0x7f
    e434:	9a00000b 	bls	e468 <memcpy+0x3c>
    e438:	e3110003 	tst	r1, #3
    e43c:	1a000009 	bne	e468 <memcpy+0x3c>
    e440:	e3100003 	tst	r0, #3
    e444:	1a000007 	bne	e468 <memcpy+0x3c>
    e448:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    e44c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    e450:	e2422020 	sub	r2, r2, #32
    e454:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    e458:	f5d1f040 	pld	[r1, #64]	; 0x40
    e45c:	e352001f 	cmp	r2, #31
    e460:	8afffff9 	bhi	e44c <memcpy+0x20>
    e464:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    e468:	e3520000 	cmp	r2, #0
    e46c:	0a000003 	beq	e480 <memcpy+0x54>
    e470:	e4d13001 	ldrb	r3, [r1], #1
    e474:	e2522001 	subs	r2, r2, #1
    e478:	e4c03001 	strb	r3, [r0], #1
    e47c:	1afffffb 	bne	e470 <memcpy+0x44>
    e480:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    e484:	e12fff1e 	bx	lr

0000e488 <DelayLoop>:
    e488:	e2500001 	subs	r0, r0, #1
    e48c:	8afffffd 	bhi	e488 <DelayLoop>
    e490:	e1a0f00e 	mov	pc, lr

0000e494 <UndefinedInstructionInternal>:
    e494:	e24ee004 	sub	lr, lr, #4
    e498:	e92d4000 	stmfd	sp!, {lr}
    e49c:	e14fe000 	mrs	lr, SPSR
    e4a0:	e92d4000 	stmfd	sp!, {lr}
    e4a4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e4a8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e4ac:	e1a0100d 	mov	r1, sp
    e4b0:	f1020012 	cps	#18
    e4b4:	e1a0200d 	mov	r2, sp
    e4b8:	e1a0300e 	mov	r3, lr
    e4bc:	f102001f 	cps	#31
    e4c0:	e1a0d001 	mov	sp, r1
    e4c4:	e92d000c 	push	{r2, r3}
    e4c8:	e1a0100d 	mov	r1, sp
    e4cc:	e3a00001 	mov	r0, #1
    e4d0:	ea000260 	b	ee58 <ExceptionHandler>

0000e4d4 <PrefetchAbortStub>:
    e4d4:	e24ee004 	sub	lr, lr, #4
    e4d8:	e92d4000 	stmfd	sp!, {lr}
    e4dc:	e14fe000 	mrs	lr, SPSR
    e4e0:	e92d4000 	stmfd	sp!, {lr}
    e4e4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e4e8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e4ec:	e1a0100d 	mov	r1, sp
    e4f0:	f1020012 	cps	#18
    e4f4:	e1a0200d 	mov	r2, sp
    e4f8:	e1a0300e 	mov	r3, lr
    e4fc:	f102001f 	cps	#31
    e500:	e1a0d001 	mov	sp, r1
    e504:	e92d000c 	push	{r2, r3}
    e508:	e1a0100d 	mov	r1, sp
    e50c:	e3a00002 	mov	r0, #2
    e510:	ea000250 	b	ee58 <ExceptionHandler>

0000e514 <DataAbortStub>:
    e514:	e24ee008 	sub	lr, lr, #8
    e518:	e92d4000 	stmfd	sp!, {lr}
    e51c:	e14fe000 	mrs	lr, SPSR
    e520:	e92d4000 	stmfd	sp!, {lr}
    e524:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e528:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e52c:	e1a0100d 	mov	r1, sp
    e530:	f1020012 	cps	#18
    e534:	e1a0200d 	mov	r2, sp
    e538:	e1a0300e 	mov	r3, lr
    e53c:	f102001f 	cps	#31
    e540:	e1a0d001 	mov	sp, r1
    e544:	e92d000c 	push	{r2, r3}
    e548:	e1a0100d 	mov	r1, sp
    e54c:	e3a00003 	mov	r0, #3
    e550:	ea000240 	b	ee58 <ExceptionHandler>

0000e554 <UndefinedInstructionStub>:
    e554:	e92d4001 	push	{r0, lr}
    e558:	eef80a10 	vmrs	r0, fpexc
    e55c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    e560:	0affffcb 	beq	e494 <UndefinedInstructionInternal>
    e564:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    e568:	eee80a10 	vmsr	fpexc, r0
    e56c:	e8fd8001 	ldm	sp!, {r0, pc}^

0000e570 <IRQStub>:
    e570:	e24ee004 	sub	lr, lr, #4
    e574:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e578:	ebfff589 	bl	bba4 <InterruptHandler>
    e57c:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e580 <FIQStub>:
    e580:	e24ee004 	sub	lr, lr, #4
    e584:	e92d400f 	push	{r0, r1, r2, r3, lr}
    e588:	e3a03000 	mov	r3, #0
    e58c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e590:	e59f2040 	ldr	r2, [pc, #64]	; e5d8 <FIQStub+0x58>
    e594:	e5921000 	ldr	r1, [r2]
    e598:	e3510000 	cmp	r1, #0
    e59c:	0a000004 	beq	e5b4 <FIQStub+0x34>
    e5a0:	e5920004 	ldr	r0, [r2, #4]
    e5a4:	e12fff31 	blx	r1
    e5a8:	e3a03000 	mov	r3, #0
    e5ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e5b0:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e5b4:	e3a03000 	mov	r3, #0
    e5b8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e5bc:	e59f1018 	ldr	r1, [pc, #24]	; e5dc <FIQStub+0x5c>
    e5c0:	e3a00000 	mov	r0, #0
    e5c4:	e5810000 	str	r0, [r1]
    e5c8:	e3a03000 	mov	r3, #0
    e5cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e5d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e5d4:	e8fd800f 	ldm	sp!, {r0, r1, r2, r3, pc}^
    e5d8:	00013d28 	.word	0x00013d28
    e5dc:	2000b20c 	.word	0x2000b20c

0000e5e0 <CPtrList::CPtrList()>:
    e5e0:	e3a02000 	mov	r2, #0
    e5e4:	e5802000 	str	r2, [r0]
    e5e8:	e12fff1e 	bx	lr

0000e5ec <CPtrList::~CPtrList()>:
    e5ec:	e5903000 	ldr	r3, [r0]
    e5f0:	e92d4010 	push	{r4, lr}
    e5f4:	e3530000 	cmp	r3, #0
    e5f8:	e1a04000 	mov	r4, r0
    e5fc:	0a000003 	beq	e610 <CPtrList::~CPtrList()+0x24>
    e600:	e3a0202a 	mov	r2, #42	; 0x2a
    e604:	e59f100c 	ldr	r1, [pc, #12]	; e618 <CPtrList::~CPtrList()+0x2c>
    e608:	e59f000c 	ldr	r0, [pc, #12]	; e61c <CPtrList::~CPtrList()+0x30>
    e60c:	ebffe8f3 	bl	89e0 <assertion_failed>
    e610:	e1a00004 	mov	r0, r4
    e614:	e8bd8010 	pop	{r4, pc}
    e618:	00013a44 	.word	0x00013a44
    e61c:	00013a50 	.word	0x00013a50

0000e620 <CPtrList::GetFirst()>:
    e620:	e5900000 	ldr	r0, [r0]
    e624:	e12fff1e 	bx	lr

0000e628 <CPtrList::GetNext(TPtrListElement*)>:
    e628:	e92d4010 	push	{r4, lr}
    e62c:	e2514000 	subs	r4, r1, #0
    e630:	0a000009 	beq	e65c <CPtrList::GetNext(TPtrListElement*)+0x34>
    e634:	e59f3034 	ldr	r3, [pc, #52]	; e670 <CPtrList::GetNext(TPtrListElement*)+0x48>
    e638:	e5942000 	ldr	r2, [r4]
    e63c:	e1520003 	cmp	r2, r3
    e640:	0a000003 	beq	e654 <CPtrList::GetNext(TPtrListElement*)+0x2c>
    e644:	e3a02035 	mov	r2, #53	; 0x35
    e648:	e59f1024 	ldr	r1, [pc, #36]	; e674 <CPtrList::GetNext(TPtrListElement*)+0x4c>
    e64c:	e59f0024 	ldr	r0, [pc, #36]	; e678 <CPtrList::GetNext(TPtrListElement*)+0x50>
    e650:	ebffe8e2 	bl	89e0 <assertion_failed>
    e654:	e5940008 	ldr	r0, [r4, #8]
    e658:	e8bd8010 	pop	{r4, pc}
    e65c:	e3a02034 	mov	r2, #52	; 0x34
    e660:	e59f100c 	ldr	r1, [pc, #12]	; e674 <CPtrList::GetNext(TPtrListElement*)+0x4c>
    e664:	e59f0010 	ldr	r0, [pc, #16]	; e67c <CPtrList::GetNext(TPtrListElement*)+0x54>
    e668:	ebffe8dc 	bl	89e0 <assertion_failed>
    e66c:	eafffff0 	b	e634 <CPtrList::GetNext(TPtrListElement*)+0xc>
    e670:	504c4d43 	.word	0x504c4d43
    e674:	00013a44 	.word	0x00013a44
    e678:	00013a70 	.word	0x00013a70
    e67c:	00013a60 	.word	0x00013a60

0000e680 <CPtrList::GetPtr(TPtrListElement*)>:
    e680:	e92d4010 	push	{r4, lr}
    e684:	e2514000 	subs	r4, r1, #0
    e688:	0a000009 	beq	e6b4 <CPtrList::GetPtr(TPtrListElement*)+0x34>
    e68c:	e59f3034 	ldr	r3, [pc, #52]	; e6c8 <CPtrList::GetPtr(TPtrListElement*)+0x48>
    e690:	e5942000 	ldr	r2, [r4]
    e694:	e1520003 	cmp	r2, r3
    e698:	0a000003 	beq	e6ac <CPtrList::GetPtr(TPtrListElement*)+0x2c>
    e69c:	e3a0203d 	mov	r2, #61	; 0x3d
    e6a0:	e59f1024 	ldr	r1, [pc, #36]	; e6cc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    e6a4:	e59f0024 	ldr	r0, [pc, #36]	; e6d0 <CPtrList::GetPtr(TPtrListElement*)+0x50>
    e6a8:	ebffe8cc 	bl	89e0 <assertion_failed>
    e6ac:	e594000c 	ldr	r0, [r4, #12]
    e6b0:	e8bd8010 	pop	{r4, pc}
    e6b4:	e3a0203c 	mov	r2, #60	; 0x3c
    e6b8:	e59f100c 	ldr	r1, [pc, #12]	; e6cc <CPtrList::GetPtr(TPtrListElement*)+0x4c>
    e6bc:	e59f0010 	ldr	r0, [pc, #16]	; e6d4 <CPtrList::GetPtr(TPtrListElement*)+0x54>
    e6c0:	ebffe8c6 	bl	89e0 <assertion_failed>
    e6c4:	eafffff0 	b	e68c <CPtrList::GetPtr(TPtrListElement*)+0xc>
    e6c8:	504c4d43 	.word	0x504c4d43
    e6cc:	00013a44 	.word	0x00013a44
    e6d0:	00013a70 	.word	0x00013a70
    e6d4:	00013a60 	.word	0x00013a60

0000e6d8 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    e6d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e6dc:	e1a06000 	mov	r6, r0
    e6e0:	e3a00010 	mov	r0, #16
    e6e4:	e1a07002 	mov	r7, r2
    e6e8:	e1a04001 	mov	r4, r1
    e6ec:	ebfff67d 	bl	c0e8 <operator new(unsigned int)>
    e6f0:	e5962000 	ldr	r2, [r6]
    e6f4:	e59f30cc 	ldr	r3, [pc, #204]	; e7c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e6f8:	e3520000 	cmp	r2, #0
    e6fc:	e1a05000 	mov	r5, r0
    e700:	e580700c 	str	r7, [r0, #12]
    e704:	e5803000 	str	r3, [r0]
    e708:	0a000029 	beq	e7b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
    e70c:	e3540000 	cmp	r4, #0
    e710:	0a000022 	beq	e7a0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    e714:	e59f30ac 	ldr	r3, [pc, #172]	; e7c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e718:	e5942000 	ldr	r2, [r4]
    e71c:	e1520003 	cmp	r2, r3
    e720:	0a000003 	beq	e734 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
    e724:	e3a0204e 	mov	r2, #78	; 0x4e
    e728:	e59f109c 	ldr	r1, [pc, #156]	; e7cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    e72c:	e59f009c 	ldr	r0, [pc, #156]	; e7d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
    e730:	ebffe8aa 	bl	89e0 <assertion_failed>
    e734:	e5963000 	ldr	r3, [r6]
    e738:	e1530004 	cmp	r3, r4
    e73c:	0a000011 	beq	e788 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
    e740:	e5943004 	ldr	r3, [r4, #4]
    e744:	e5854008 	str	r4, [r5, #8]
    e748:	e3530000 	cmp	r3, #0
    e74c:	e5853004 	str	r3, [r5, #4]
    e750:	0a000004 	beq	e768 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
    e754:	e59f206c 	ldr	r2, [pc, #108]	; e7c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
    e758:	e5931000 	ldr	r1, [r3]
    e75c:	e1510002 	cmp	r1, r2
    e760:	1a000002 	bne	e770 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
    e764:	e5835008 	str	r5, [r3, #8]
    e768:	e5845004 	str	r5, [r4, #4]
    e76c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e770:	e3a02060 	mov	r2, #96	; 0x60
    e774:	e59f1050 	ldr	r1, [pc, #80]	; e7cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    e778:	e59f0054 	ldr	r0, [pc, #84]	; e7d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    e77c:	ebffe897 	bl	89e0 <assertion_failed>
    e780:	e5943004 	ldr	r3, [r4, #4]
    e784:	eafffff6 	b	e764 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x8c>
    e788:	e3a03000 	mov	r3, #0
    e78c:	e5845004 	str	r5, [r4, #4]
    e790:	e5854008 	str	r4, [r5, #8]
    e794:	e5865000 	str	r5, [r6]
    e798:	e5853004 	str	r3, [r5, #4]
    e79c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e7a0:	e3a0204d 	mov	r2, #77	; 0x4d
    e7a4:	e59f1020 	ldr	r1, [pc, #32]	; e7cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    e7a8:	e59f0028 	ldr	r0, [pc, #40]	; e7d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
    e7ac:	ebffe88b 	bl	89e0 <assertion_failed>
    e7b0:	eaffffd7 	b	e714 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
    e7b4:	e3a0204c 	mov	r2, #76	; 0x4c
    e7b8:	e59f100c 	ldr	r1, [pc, #12]	; e7cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
    e7bc:	e59f0018 	ldr	r0, [pc, #24]	; e7dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x104>
    e7c0:	ebffe886 	bl	89e0 <assertion_failed>
    e7c4:	eaffffd0 	b	e70c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
    e7c8:	504c4d43 	.word	0x504c4d43
    e7cc:	00013a44 	.word	0x00013a44
    e7d0:	00013ab0 	.word	0x00013ab0
    e7d4:	00013ad4 	.word	0x00013ad4
    e7d8:	00013aa4 	.word	0x00013aa4
    e7dc:	00013a94 	.word	0x00013a94

0000e7e0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    e7e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e7e4:	e1a06000 	mov	r6, r0
    e7e8:	e1a05001 	mov	r5, r1
    e7ec:	e3a00010 	mov	r0, #16
    e7f0:	e1a07002 	mov	r7, r2
    e7f4:	ebfff63b 	bl	c0e8 <operator new(unsigned int)>
    e7f8:	e59f30c4 	ldr	r3, [pc, #196]	; e8c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e7fc:	e3550000 	cmp	r5, #0
    e800:	e5803000 	str	r3, [r0]
    e804:	e1a04000 	mov	r4, r0
    e808:	e580700c 	str	r7, [r0, #12]
    e80c:	e5963000 	ldr	r3, [r6]
    e810:	0a00001b 	beq	e884 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
    e814:	e3530000 	cmp	r3, #0
    e818:	0a000024 	beq	e8b0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
    e81c:	e59f30a0 	ldr	r3, [pc, #160]	; e8c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e820:	e5952000 	ldr	r2, [r5]
    e824:	e1520003 	cmp	r2, r3
    e828:	1a000010 	bne	e870 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
    e82c:	e5953008 	ldr	r3, [r5, #8]
    e830:	e5845004 	str	r5, [r4, #4]
    e834:	e3530000 	cmp	r3, #0
    e838:	e5843008 	str	r3, [r4, #8]
    e83c:	0a000009 	beq	e868 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x88>
    e840:	e59f207c 	ldr	r2, [pc, #124]	; e8c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
    e844:	e5931000 	ldr	r1, [r3]
    e848:	e1510002 	cmp	r1, r2
    e84c:	0a000004 	beq	e864 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x84>
    e850:	e3a02085 	mov	r2, #133	; 0x85
    e854:	e59f106c 	ldr	r1, [pc, #108]	; e8c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    e858:	e59f006c 	ldr	r0, [pc, #108]	; e8cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
    e85c:	ebffe85f 	bl	89e0 <assertion_failed>
    e860:	e5953008 	ldr	r3, [r5, #8]
    e864:	e5834004 	str	r4, [r3, #4]
    e868:	e5854008 	str	r4, [r5, #8]
    e86c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e870:	e3a0207e 	mov	r2, #126	; 0x7e
    e874:	e59f104c 	ldr	r1, [pc, #76]	; e8c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    e878:	e59f0050 	ldr	r0, [pc, #80]	; e8d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    e87c:	ebffe857 	bl	89e0 <assertion_failed>
    e880:	eaffffe9 	b	e82c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
    e884:	e3530000 	cmp	r3, #0
    e888:	0a000003 	beq	e89c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    e88c:	e3a02074 	mov	r2, #116	; 0x74
    e890:	e59f1030 	ldr	r1, [pc, #48]	; e8c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    e894:	e59f0038 	ldr	r0, [pc, #56]	; e8d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
    e898:	ebffe850 	bl	89e0 <assertion_failed>
    e89c:	e3a03000 	mov	r3, #0
    e8a0:	e5864000 	str	r4, [r6]
    e8a4:	e5843004 	str	r3, [r4, #4]
    e8a8:	e5843008 	str	r3, [r4, #8]
    e8ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e8b0:	e3a0207d 	mov	r2, #125	; 0x7d
    e8b4:	e59f100c 	ldr	r1, [pc, #12]	; e8c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
    e8b8:	e59f0018 	ldr	r0, [pc, #24]	; e8d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf8>
    e8bc:	ebffe847 	bl	89e0 <assertion_failed>
    e8c0:	eaffffd5 	b	e81c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
    e8c4:	504c4d43 	.word	0x504c4d43
    e8c8:	00013a44 	.word	0x00013a44
    e8cc:	00013b20 	.word	0x00013b20
    e8d0:	00013afc 	.word	0x00013afc
    e8d4:	00013a50 	.word	0x00013a50
    e8d8:	00013a94 	.word	0x00013a94

0000e8dc <CPtrList::Remove(TPtrListElement*)>:
    e8dc:	e92d4070 	push	{r4, r5, r6, lr}
    e8e0:	e2514000 	subs	r4, r1, #0
    e8e4:	e1a05000 	mov	r5, r0
    e8e8:	0a00003e 	beq	e9e8 <CPtrList::Remove(TPtrListElement*)+0x10c>
    e8ec:	e59f3120 	ldr	r3, [pc, #288]	; ea14 <CPtrList::Remove(TPtrListElement*)+0x138>
    e8f0:	e5942000 	ldr	r2, [r4]
    e8f4:	e1520003 	cmp	r2, r3
    e8f8:	0a000003 	beq	e90c <CPtrList::Remove(TPtrListElement*)+0x30>
    e8fc:	e3a02090 	mov	r2, #144	; 0x90
    e900:	e59f1110 	ldr	r1, [pc, #272]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e904:	e59f0110 	ldr	r0, [pc, #272]	; ea1c <CPtrList::Remove(TPtrListElement*)+0x140>
    e908:	ebffe834 	bl	89e0 <assertion_failed>
    e90c:	e5953000 	ldr	r3, [r5]
    e910:	e1530004 	cmp	r3, r4
    e914:	0a000023 	beq	e9a8 <CPtrList::Remove(TPtrListElement*)+0xcc>
    e918:	e5943004 	ldr	r3, [r4, #4]
    e91c:	e3530000 	cmp	r3, #0
    e920:	0a000035 	beq	e9fc <CPtrList::Remove(TPtrListElement*)+0x120>
    e924:	e59f20e8 	ldr	r2, [pc, #232]	; ea14 <CPtrList::Remove(TPtrListElement*)+0x138>
    e928:	e5931000 	ldr	r1, [r3]
    e92c:	e1510002 	cmp	r1, r2
    e930:	1a00000f 	bne	e974 <CPtrList::Remove(TPtrListElement*)+0x98>
    e934:	e5942008 	ldr	r2, [r4, #8]
    e938:	e5832008 	str	r2, [r3, #8]
    e93c:	e5942008 	ldr	r2, [r4, #8]
    e940:	e3520000 	cmp	r2, #0
    e944:	0a000004 	beq	e95c <CPtrList::Remove(TPtrListElement*)+0x80>
    e948:	e59f10c4 	ldr	r1, [pc, #196]	; ea14 <CPtrList::Remove(TPtrListElement*)+0x138>
    e94c:	e5920000 	ldr	r0, [r2]
    e950:	e1500001 	cmp	r0, r1
    e954:	1a00000c 	bne	e98c <CPtrList::Remove(TPtrListElement*)+0xb0>
    e958:	e5823004 	str	r3, [r2, #4]
    e95c:	e3a03000 	mov	r3, #0
    e960:	e1a00004 	mov	r0, r4
    e964:	e5843000 	str	r3, [r4]
    e968:	e3a01010 	mov	r1, #16
    e96c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e970:	eafff5e0 	b	c0f8 <operator delete(void*, unsigned int)>
    e974:	e3a0209f 	mov	r2, #159	; 0x9f
    e978:	e59f1098 	ldr	r1, [pc, #152]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e97c:	e59f009c 	ldr	r0, [pc, #156]	; ea20 <CPtrList::Remove(TPtrListElement*)+0x144>
    e980:	ebffe816 	bl	89e0 <assertion_failed>
    e984:	e5943004 	ldr	r3, [r4, #4]
    e988:	eaffffe9 	b	e934 <CPtrList::Remove(TPtrListElement*)+0x58>
    e98c:	e3a020a4 	mov	r2, #164	; 0xa4
    e990:	e59f1080 	ldr	r1, [pc, #128]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e994:	e59f0088 	ldr	r0, [pc, #136]	; ea24 <CPtrList::Remove(TPtrListElement*)+0x148>
    e998:	ebffe810 	bl	89e0 <assertion_failed>
    e99c:	e5942008 	ldr	r2, [r4, #8]
    e9a0:	e5943004 	ldr	r3, [r4, #4]
    e9a4:	eaffffeb 	b	e958 <CPtrList::Remove(TPtrListElement*)+0x7c>
    e9a8:	e5943008 	ldr	r3, [r4, #8]
    e9ac:	e3530000 	cmp	r3, #0
    e9b0:	e5853000 	str	r3, [r5]
    e9b4:	0affffe8 	beq	e95c <CPtrList::Remove(TPtrListElement*)+0x80>
    e9b8:	e59f2054 	ldr	r2, [pc, #84]	; ea14 <CPtrList::Remove(TPtrListElement*)+0x138>
    e9bc:	e5931000 	ldr	r1, [r3]
    e9c0:	e1510002 	cmp	r1, r2
    e9c4:	0a000004 	beq	e9dc <CPtrList::Remove(TPtrListElement*)+0x100>
    e9c8:	e3a02098 	mov	r2, #152	; 0x98
    e9cc:	e59f1044 	ldr	r1, [pc, #68]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e9d0:	e59f004c 	ldr	r0, [pc, #76]	; ea24 <CPtrList::Remove(TPtrListElement*)+0x148>
    e9d4:	ebffe801 	bl	89e0 <assertion_failed>
    e9d8:	e5943008 	ldr	r3, [r4, #8]
    e9dc:	e3a02000 	mov	r2, #0
    e9e0:	e5832004 	str	r2, [r3, #4]
    e9e4:	eaffffdc 	b	e95c <CPtrList::Remove(TPtrListElement*)+0x80>
    e9e8:	e3a0208f 	mov	r2, #143	; 0x8f
    e9ec:	e59f1024 	ldr	r1, [pc, #36]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    e9f0:	e59f0030 	ldr	r0, [pc, #48]	; ea28 <CPtrList::Remove(TPtrListElement*)+0x14c>
    e9f4:	ebffe7f9 	bl	89e0 <assertion_failed>
    e9f8:	eaffffbb 	b	e8ec <CPtrList::Remove(TPtrListElement*)+0x10>
    e9fc:	e3a0209e 	mov	r2, #158	; 0x9e
    ea00:	e59f1010 	ldr	r1, [pc, #16]	; ea18 <CPtrList::Remove(TPtrListElement*)+0x13c>
    ea04:	e59f0020 	ldr	r0, [pc, #32]	; ea2c <CPtrList::Remove(TPtrListElement*)+0x150>
    ea08:	ebffe7f4 	bl	89e0 <assertion_failed>
    ea0c:	e5943004 	ldr	r3, [r4, #4]
    ea10:	eaffffc3 	b	e924 <CPtrList::Remove(TPtrListElement*)+0x48>
    ea14:	504c4d43 	.word	0x504c4d43
    ea18:	00013a44 	.word	0x00013a44
    ea1c:	00013a70 	.word	0x00013a70
    ea20:	00013b90 	.word	0x00013b90
    ea24:	00013b4c 	.word	0x00013b4c
    ea28:	00013a60 	.word	0x00013a60
    ea2c:	00013b78 	.word	0x00013b78

0000ea30 <CPtrList::Find(void*)>:
    ea30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ea34:	e5904000 	ldr	r4, [r0]
    ea38:	e3540000 	cmp	r4, #0
    ea3c:	0a000013 	beq	ea90 <CPtrList::Find(void*)+0x60>
    ea40:	e1a05001 	mov	r5, r1
    ea44:	e59f6050 	ldr	r6, [pc, #80]	; ea9c <CPtrList::Find(void*)+0x6c>
    ea48:	e59f8050 	ldr	r8, [pc, #80]	; eaa0 <CPtrList::Find(void*)+0x70>
    ea4c:	e59f7050 	ldr	r7, [pc, #80]	; eaa4 <CPtrList::Find(void*)+0x74>
    ea50:	ea000002 	b	ea60 <CPtrList::Find(void*)+0x30>
    ea54:	e5944008 	ldr	r4, [r4, #8]
    ea58:	e3540000 	cmp	r4, #0
    ea5c:	0a00000b 	beq	ea90 <CPtrList::Find(void*)+0x60>
    ea60:	e5943000 	ldr	r3, [r4]
    ea64:	e1530006 	cmp	r3, r6
    ea68:	0a000003 	beq	ea7c <CPtrList::Find(void*)+0x4c>
    ea6c:	e3a020b3 	mov	r2, #179	; 0xb3
    ea70:	e1a01008 	mov	r1, r8
    ea74:	e1a00007 	mov	r0, r7
    ea78:	ebffe7d8 	bl	89e0 <assertion_failed>
    ea7c:	e594300c 	ldr	r3, [r4, #12]
    ea80:	e1530005 	cmp	r3, r5
    ea84:	1afffff2 	bne	ea54 <CPtrList::Find(void*)+0x24>
    ea88:	e1a00004 	mov	r0, r4
    ea8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea90:	e3a04000 	mov	r4, #0
    ea94:	e1a00004 	mov	r0, r4
    ea98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea9c:	504c4d43 	.word	0x504c4d43
    eaa0:	00013a44 	.word	0x00013a44
    eaa4:	00013a70 	.word	0x00013a70

0000eaa8 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    eaa8:	e5801000 	str	r1, [r0]
    eaac:	e12fff1e 	bx	lr

0000eab0 <CBcmMailBox::~CBcmMailBox()>:
    eab0:	e12fff1e 	bx	lr

0000eab4 <CBcmMailBox::WriteRead(unsigned int)>:
    eab4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eab8:	e3a03000 	mov	r3, #0
    eabc:	e1a07000 	mov	r7, r0
    eac0:	e1a06001 	mov	r6, r1
    eac4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    eac8:	e59f50b8 	ldr	r5, [pc, #184]	; eb88 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
    eacc:	e5950000 	ldr	r0, [r5]
    ead0:	e1500003 	cmp	r0, r3
    ead4:	1a000029 	bne	eb80 <CBcmMailBox::WriteRead(unsigned int)+0xcc>
    ead8:	e59f40ac 	ldr	r4, [pc, #172]	; eb8c <CBcmMailBox::WriteRead(unsigned int)+0xd8>
    eadc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    eae0:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eae4:	1a000005 	bne	eb00 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
    eae8:	e3a00014 	mov	r0, #20
    eaec:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    eaf0:	ebfffc54 	bl	dc48 <CTimer::SimpleMsDelay(unsigned int)>
    eaf4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    eaf8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eafc:	0afffff9 	beq	eae8 <CBcmMailBox::WriteRead(unsigned int)+0x34>
    eb00:	e59f2084 	ldr	r2, [pc, #132]	; eb8c <CBcmMailBox::WriteRead(unsigned int)+0xd8>
    eb04:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    eb08:	e3530000 	cmp	r3, #0
    eb0c:	bafffffc 	blt	eb04 <CBcmMailBox::WriteRead(unsigned int)+0x50>
    eb10:	e316000f 	tst	r6, #15
    eb14:	0a000003 	beq	eb28 <CBcmMailBox::WriteRead(unsigned int)+0x74>
    eb18:	e3a0205b 	mov	r2, #91	; 0x5b
    eb1c:	e59f106c 	ldr	r1, [pc, #108]	; eb90 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
    eb20:	e59f006c 	ldr	r0, [pc, #108]	; eb94 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
    eb24:	ebffe7ad 	bl	89e0 <assertion_failed>
    eb28:	e59f305c 	ldr	r3, [pc, #92]	; eb8c <CBcmMailBox::WriteRead(unsigned int)+0xd8>
    eb2c:	e5971000 	ldr	r1, [r7]
    eb30:	e1a02003 	mov	r2, r3
    eb34:	e1866001 	orr	r6, r6, r1
    eb38:	e58368a0 	str	r6, [r3, #2208]	; 0x8a0
    eb3c:	e5971000 	ldr	r1, [r7]
    eb40:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    eb44:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eb48:	1afffffc 	bne	eb40 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    eb4c:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    eb50:	e200300f 	and	r3, r0, #15
    eb54:	e1530001 	cmp	r3, r1
    eb58:	1afffff8 	bne	eb40 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    eb5c:	e5953000 	ldr	r3, [r5]
    eb60:	e3c0400f 	bic	r4, r0, #15
    eb64:	e3530000 	cmp	r3, #0
    eb68:	0a000000 	beq	eb70 <CBcmMailBox::WriteRead(unsigned int)+0xbc>
    eb6c:	ebfff8a7 	bl	ce10 <LeaveCritical>
    eb70:	e3a03000 	mov	r3, #0
    eb74:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    eb78:	e1a00004 	mov	r0, r4
    eb7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eb80:	ebfff876 	bl	cd60 <EnterCritical>
    eb84:	eaffffd3 	b	ead8 <CBcmMailBox::WriteRead(unsigned int)+0x24>
    eb88:	00013ddc 	.word	0x00013ddc
    eb8c:	2000b000 	.word	0x2000b000
    eb90:	00013bbc 	.word	0x00013bbc
    eb94:	00013bcc 	.word	0x00013bcc

0000eb98 <CBcmMailBox::Flush()>:
    eb98:	e92d4010 	push	{r4, lr}
    eb9c:	e59f4024 	ldr	r4, [pc, #36]	; ebc8 <CBcmMailBox::Flush()+0x30>
    eba0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    eba4:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eba8:	18bd8010 	popne	{r4, pc}
    ebac:	e3a00014 	mov	r0, #20
    ebb0:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    ebb4:	ebfffc23 	bl	dc48 <CTimer::SimpleMsDelay(unsigned int)>
    ebb8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ebbc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ebc0:	0afffff9 	beq	ebac <CBcmMailBox::Flush()+0x14>
    ebc4:	e8bd8010 	pop	{r4, pc}
    ebc8:	2000b000 	.word	0x2000b000

0000ebcc <CBcmMailBox::Read()>:
    ebcc:	e5901000 	ldr	r1, [r0]
    ebd0:	e59f2020 	ldr	r2, [pc, #32]	; ebf8 <CBcmMailBox::Read()+0x2c>
    ebd4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    ebd8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ebdc:	1afffffc 	bne	ebd4 <CBcmMailBox::Read()+0x8>
    ebe0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    ebe4:	e200300f 	and	r3, r0, #15
    ebe8:	e1530001 	cmp	r3, r1
    ebec:	1afffff8 	bne	ebd4 <CBcmMailBox::Read()+0x8>
    ebf0:	e3c0000f 	bic	r0, r0, #15
    ebf4:	e12fff1e 	bx	lr
    ebf8:	2000b000 	.word	0x2000b000

0000ebfc <CBcmMailBox::Write(unsigned int)>:
    ebfc:	e92d4070 	push	{r4, r5, r6, lr}
    ec00:	e1a05000 	mov	r5, r0
    ec04:	e1a04001 	mov	r4, r1
    ec08:	e59f2034 	ldr	r2, [pc, #52]	; ec44 <CBcmMailBox::Write(unsigned int)+0x48>
    ec0c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    ec10:	e3530000 	cmp	r3, #0
    ec14:	bafffffc 	blt	ec0c <CBcmMailBox::Write(unsigned int)+0x10>
    ec18:	e314000f 	tst	r4, #15
    ec1c:	0a000003 	beq	ec30 <CBcmMailBox::Write(unsigned int)+0x34>
    ec20:	e3a0205b 	mov	r2, #91	; 0x5b
    ec24:	e59f101c 	ldr	r1, [pc, #28]	; ec48 <CBcmMailBox::Write(unsigned int)+0x4c>
    ec28:	e59f001c 	ldr	r0, [pc, #28]	; ec4c <CBcmMailBox::Write(unsigned int)+0x50>
    ec2c:	ebffe76b 	bl	89e0 <assertion_failed>
    ec30:	e5952000 	ldr	r2, [r5]
    ec34:	e59f3008 	ldr	r3, [pc, #8]	; ec44 <CBcmMailBox::Write(unsigned int)+0x48>
    ec38:	e1844002 	orr	r4, r4, r2
    ec3c:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    ec40:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec44:	2000b000 	.word	0x2000b000
    ec48:	00013bbc 	.word	0x00013bbc
    ec4c:	00013bcc 	.word	0x00013bcc

0000ec50 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
    ec50:	e3a02000 	mov	r2, #0
    ec54:	e59f3004 	ldr	r3, [pc, #4]	; ec60 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
    ec58:	e5832000 	str	r2, [r3]
    ec5c:	e12fff1e 	bx	lr
    ec60:	00013ddc 	.word	0x00013ddc

0000ec64 <CExceptionHandler::CExceptionHandler()>:
    ec64:	e92d4070 	push	{r4, r5, r6, lr}
    ec68:	e59f5068 	ldr	r5, [pc, #104]	; ecd8 <CExceptionHandler::CExceptionHandler()+0x74>
    ec6c:	e1a04000 	mov	r4, r0
    ec70:	e5953000 	ldr	r3, [r5]
    ec74:	e3530000 	cmp	r3, #0
    ec78:	0a000003 	beq	ec8c <CExceptionHandler::CExceptionHandler()+0x28>
    ec7c:	e3a0202f 	mov	r2, #47	; 0x2f
    ec80:	e59f1054 	ldr	r1, [pc, #84]	; ecdc <CExceptionHandler::CExceptionHandler()+0x78>
    ec84:	e59f0054 	ldr	r0, [pc, #84]	; ece0 <CExceptionHandler::CExceptionHandler()+0x7c>
    ec88:	ebffe754 	bl	89e0 <assertion_failed>
    ec8c:	e3a00000 	mov	r0, #0
    ec90:	e59f104c 	ldr	r1, [pc, #76]	; ece4 <CExceptionHandler::CExceptionHandler()+0x80>
    ec94:	e59f204c 	ldr	r2, [pc, #76]	; ece8 <CExceptionHandler::CExceptionHandler()+0x84>
    ec98:	e59f304c 	ldr	r3, [pc, #76]	; ecec <CExceptionHandler::CExceptionHandler()+0x88>
    ec9c:	e1a01141 	asr	r1, r1, #2
    eca0:	e1a02142 	asr	r2, r2, #2
    eca4:	e1a03143 	asr	r3, r3, #2
    eca8:	e2411002 	sub	r1, r1, #2
    ecac:	e2422002 	sub	r2, r2, #2
    ecb0:	e2433002 	sub	r3, r3, #2
    ecb4:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    ecb8:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    ecbc:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    ecc0:	e5854000 	str	r4, [r5]
    ecc4:	e5801004 	str	r1, [r0, #4]
    ecc8:	e1c020fc 	strd	r2, [r0, #12]
    eccc:	ebfff873 	bl	cea0 <SyncDataAndInstructionCache>
    ecd0:	e1a00004 	mov	r0, r4
    ecd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ecd8:	00013de0 	.word	0x00013de0
    ecdc:	00013be8 	.word	0x00013be8
    ece0:	000138fc 	.word	0x000138fc
    ece4:	0000e550 	.word	0x0000e550
    ece8:	0000e4c8 	.word	0x0000e4c8
    ecec:	0000e504 	.word	0x0000e504

0000ecf0 <CExceptionHandler::~CExceptionHandler()>:
    ecf0:	e3a02000 	mov	r2, #0
    ecf4:	e59f3004 	ldr	r3, [pc, #4]	; ed00 <CExceptionHandler::~CExceptionHandler()+0x10>
    ecf8:	e5832000 	str	r2, [r3]
    ecfc:	e12fff1e 	bx	lr
    ed00:	00013de0 	.word	0x00013de0

0000ed04 <CExceptionHandler::Throw(unsigned int)>:
    ed04:	e92d4010 	push	{r4, lr}
    ed08:	e1a04001 	mov	r4, r1
    ed0c:	e24dd008 	sub	sp, sp, #8
    ed10:	ebffe848 	bl	8e38 <CLogger::Get()>
    ed14:	e59f201c 	ldr	r2, [pc, #28]	; ed38 <CExceptionHandler::Throw(unsigned int)+0x34>
    ed18:	e59f301c 	ldr	r3, [pc, #28]	; ed3c <CExceptionHandler::Throw(unsigned int)+0x38>
    ed1c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
    ed20:	e3a02000 	mov	r2, #0
    ed24:	e58d1000 	str	r1, [sp]
    ed28:	e59f1010 	ldr	r1, [pc, #16]	; ed40 <CExceptionHandler::Throw(unsigned int)+0x3c>
    ed2c:	ebffe9d3 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed30:	e28dd008 	add	sp, sp, #8
    ed34:	e8bd8010 	pop	{r4, pc}
    ed38:	00013d30 	.word	0x00013d30
    ed3c:	00013c00 	.word	0x00013c00
    ed40:	00013be0 	.word	0x00013be0

0000ed44 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    ed44:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ed48:	e3510002 	cmp	r1, #2
    ed4c:	e24dd024 	sub	sp, sp, #36	; 0x24
    ed50:	e1a05001 	mov	r5, r1
    ed54:	e1a04002 	mov	r4, r2
    ed58:	0a000028 	beq	ee00 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
    ed5c:	e3510003 	cmp	r1, #3
    ed60:	0a00001d 	beq	eddc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x98>
    ed64:	e3a08000 	mov	r8, #0
    ed68:	e1a09008 	mov	r9, r8
    ed6c:	e3540000 	cmp	r4, #0
    ed70:	0a00001d 	beq	edec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa8>
    ed74:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    ed78:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    ed7c:	e203301f 	and	r3, r3, #31
    ed80:	e3530012 	cmp	r3, #18
    ed84:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    ed88:	01c460d0 	ldrdeq	r6, [r4]
    ed8c:	e59f1078 	ldr	r1, [pc, #120]	; ee0c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
    ed90:	e1a00006 	mov	r0, r6
    ed94:	ebffe776 	bl	8b74 <debug_stacktrace(unsigned int const*, char const*)>
    ed98:	ebffe826 	bl	8e38 <CLogger::Get()>
    ed9c:	e59f306c 	ldr	r3, [pc, #108]	; ee10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
    eda0:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    eda4:	e7931105 	ldr	r1, [r3, r5, lsl #2]
    eda8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    edac:	e58d1000 	str	r1, [sp]
    edb0:	e58d2018 	str	r2, [sp, #24]
    edb4:	e58d3004 	str	r3, [sp, #4]
    edb8:	e1cd61f0 	strd	r6, [sp, #16]
    edbc:	e58d800c 	str	r8, [sp, #12]
    edc0:	e58d9008 	str	r9, [sp, #8]
    edc4:	e59f3048 	ldr	r3, [pc, #72]	; ee14 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
    edc8:	e3a02000 	mov	r2, #0
    edcc:	e59f1038 	ldr	r1, [pc, #56]	; ee0c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc8>
    edd0:	ebffe9aa 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edd4:	e28dd024 	add	sp, sp, #36	; 0x24
    edd8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    eddc:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    ede0:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    ede4:	e3540000 	cmp	r4, #0
    ede8:	1affffe1 	bne	ed74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
    edec:	e3a02068 	mov	r2, #104	; 0x68
    edf0:	e59f1020 	ldr	r1, [pc, #32]	; ee18 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd4>
    edf4:	e59f0020 	ldr	r0, [pc, #32]	; ee1c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd8>
    edf8:	ebffe6f8 	bl	89e0 <assertion_failed>
    edfc:	eaffffdc 	b	ed74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
    ee00:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    ee04:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    ee08:	eaffffd7 	b	ed6c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    ee0c:	00013be0 	.word	0x00013be0
    ee10:	00013d30 	.word	0x00013d30
    ee14:	00013c1c 	.word	0x00013c1c
    ee18:	00013be8 	.word	0x00013be8
    ee1c:	00013c10 	.word	0x00013c10

0000ee20 <CExceptionHandler::Get()>:
    ee20:	e92d4010 	push	{r4, lr}
    ee24:	e59f4020 	ldr	r4, [pc, #32]	; ee4c <CExceptionHandler::Get()+0x2c>
    ee28:	e5940000 	ldr	r0, [r4]
    ee2c:	e3500000 	cmp	r0, #0
    ee30:	18bd8010 	popne	{r4, pc}
    ee34:	e3a0207f 	mov	r2, #127	; 0x7f
    ee38:	e59f1010 	ldr	r1, [pc, #16]	; ee50 <CExceptionHandler::Get()+0x30>
    ee3c:	e59f0010 	ldr	r0, [pc, #16]	; ee54 <CExceptionHandler::Get()+0x34>
    ee40:	ebffe6e6 	bl	89e0 <assertion_failed>
    ee44:	e5940000 	ldr	r0, [r4]
    ee48:	e8bd8010 	pop	{r4, pc}
    ee4c:	00013de0 	.word	0x00013de0
    ee50:	00013be8 	.word	0x00013be8
    ee54:	0001311c 	.word	0x0001311c

0000ee58 <ExceptionHandler>:
    ee58:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    ee5c:	e3a03000 	mov	r3, #0
    ee60:	e24dd024 	sub	sp, sp, #36	; 0x24
    ee64:	e1a05000 	mov	r5, r0
    ee68:	e1a04001 	mov	r4, r1
    ee6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ee70:	e59f30d4 	ldr	r3, [pc, #212]	; ef4c <ExceptionHandler+0xf4>
    ee74:	e5933000 	ldr	r3, [r3]
    ee78:	e3530000 	cmp	r3, #0
    ee7c:	0a00002d 	beq	ef38 <ExceptionHandler+0xe0>
    ee80:	e3550002 	cmp	r5, #2
    ee84:	0a000028 	beq	ef2c <ExceptionHandler+0xd4>
    ee88:	e3550003 	cmp	r5, #3
    ee8c:	0a00001d 	beq	ef08 <ExceptionHandler+0xb0>
    ee90:	e3a08000 	mov	r8, #0
    ee94:	e1a09008 	mov	r9, r8
    ee98:	e3540000 	cmp	r4, #0
    ee9c:	0a00001d 	beq	ef18 <ExceptionHandler+0xc0>
    eea0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    eea4:	e5947040 	ldr	r7, [r4, #64]	; 0x40
    eea8:	e203301f 	and	r3, r3, #31
    eeac:	e3530012 	cmp	r3, #18
    eeb0:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    eeb4:	01c460d0 	ldrdeq	r6, [r4]
    eeb8:	e59f1090 	ldr	r1, [pc, #144]	; ef50 <ExceptionHandler+0xf8>
    eebc:	e1a00006 	mov	r0, r6
    eec0:	ebffe72b 	bl	8b74 <debug_stacktrace(unsigned int const*, char const*)>
    eec4:	ebffe7db 	bl	8e38 <CLogger::Get()>
    eec8:	e59f3084 	ldr	r3, [pc, #132]	; ef54 <ExceptionHandler+0xfc>
    eecc:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    eed0:	e7931105 	ldr	r1, [r3, r5, lsl #2]
    eed4:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    eed8:	e58d1000 	str	r1, [sp]
    eedc:	e58d2018 	str	r2, [sp, #24]
    eee0:	e58d3004 	str	r3, [sp, #4]
    eee4:	e1cd61f0 	strd	r6, [sp, #16]
    eee8:	e58d800c 	str	r8, [sp, #12]
    eeec:	e58d9008 	str	r9, [sp, #8]
    eef0:	e59f3060 	ldr	r3, [pc, #96]	; ef58 <ExceptionHandler+0x100>
    eef4:	e3a02000 	mov	r2, #0
    eef8:	e59f1050 	ldr	r1, [pc, #80]	; ef50 <ExceptionHandler+0xf8>
    eefc:	ebffe95f 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ef00:	e28dd024 	add	sp, sp, #36	; 0x24
    ef04:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ef08:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
    ef0c:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
    ef10:	e3540000 	cmp	r4, #0
    ef14:	1affffe1 	bne	eea0 <ExceptionHandler+0x48>
    ef18:	e3a02068 	mov	r2, #104	; 0x68
    ef1c:	e59f1038 	ldr	r1, [pc, #56]	; ef5c <ExceptionHandler+0x104>
    ef20:	e59f0038 	ldr	r0, [pc, #56]	; ef60 <ExceptionHandler+0x108>
    ef24:	ebffe6ad 	bl	89e0 <assertion_failed>
    ef28:	eaffffdc 	b	eea0 <ExceptionHandler+0x48>
    ef2c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
    ef30:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
    ef34:	eaffffd7 	b	ee98 <ExceptionHandler+0x40>
    ef38:	e3a0207f 	mov	r2, #127	; 0x7f
    ef3c:	e59f1018 	ldr	r1, [pc, #24]	; ef5c <ExceptionHandler+0x104>
    ef40:	e59f001c 	ldr	r0, [pc, #28]	; ef64 <ExceptionHandler+0x10c>
    ef44:	ebffe6a5 	bl	89e0 <assertion_failed>
    ef48:	eaffffcc 	b	ee80 <ExceptionHandler+0x28>
    ef4c:	00013de0 	.word	0x00013de0
    ef50:	00013be0 	.word	0x00013be0
    ef54:	00013d30 	.word	0x00013d30
    ef58:	00013c1c 	.word	0x00013c1c
    ef5c:	00013be8 	.word	0x00013be8
    ef60:	00013c10 	.word	0x00013c10
    ef64:	0001311c 	.word	0x0001311c

0000ef68 <raise>:
    ef68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ef6c:	e59f304c 	ldr	r3, [pc, #76]	; efc0 <raise+0x58>
    ef70:	e24dd00c 	sub	sp, sp, #12
    ef74:	e5933000 	ldr	r3, [r3]
    ef78:	e3530000 	cmp	r3, #0
    ef7c:	0a00000a 	beq	efac <raise+0x44>
    ef80:	ebffe7ac 	bl	8e38 <CLogger::Get()>
    ef84:	e59f2038 	ldr	r2, [pc, #56]	; efc4 <raise+0x5c>
    ef88:	e59f3038 	ldr	r3, [pc, #56]	; efc8 <raise+0x60>
    ef8c:	e5921010 	ldr	r1, [r2, #16]
    ef90:	e3a02000 	mov	r2, #0
    ef94:	e58d1000 	str	r1, [sp]
    ef98:	e59f102c 	ldr	r1, [pc, #44]	; efcc <raise+0x64>
    ef9c:	ebffe937 	bl	9480 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    efa0:	e3a00000 	mov	r0, #0
    efa4:	e28dd00c 	add	sp, sp, #12
    efa8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    efac:	e3a0207f 	mov	r2, #127	; 0x7f
    efb0:	e59f1018 	ldr	r1, [pc, #24]	; efd0 <raise+0x68>
    efb4:	e59f0018 	ldr	r0, [pc, #24]	; efd4 <raise+0x6c>
    efb8:	ebffe688 	bl	89e0 <assertion_failed>
    efbc:	eaffffef 	b	ef80 <raise+0x18>
    efc0:	00013de0 	.word	0x00013de0
    efc4:	00013d30 	.word	0x00013d30
    efc8:	00013c00 	.word	0x00013c00
    efcc:	00013be0 	.word	0x00013be0
    efd0:	00013be8 	.word	0x00013be8
    efd4:	0001311c 	.word	0x0001311c

0000efd8 <__udivsi3>:
    efd8:	e2512001 	subs	r2, r1, #1
    efdc:	012fff1e 	bxeq	lr
    efe0:	3a000036 	bcc	f0c0 <__udivsi3+0xe8>
    efe4:	e1500001 	cmp	r0, r1
    efe8:	9a000022 	bls	f078 <__udivsi3+0xa0>
    efec:	e1110002 	tst	r1, r2
    eff0:	0a000023 	beq	f084 <__udivsi3+0xac>
    eff4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    eff8:	01a01181 	lsleq	r1, r1, #3
    effc:	03a03008 	moveq	r3, #8
    f000:	13a03001 	movne	r3, #1
    f004:	e3510201 	cmp	r1, #268435456	; 0x10000000
    f008:	31510000 	cmpcc	r1, r0
    f00c:	31a01201 	lslcc	r1, r1, #4
    f010:	31a03203 	lslcc	r3, r3, #4
    f014:	3afffffa 	bcc	f004 <__udivsi3+0x2c>
    f018:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    f01c:	31510000 	cmpcc	r1, r0
    f020:	31a01081 	lslcc	r1, r1, #1
    f024:	31a03083 	lslcc	r3, r3, #1
    f028:	3afffffa 	bcc	f018 <__udivsi3+0x40>
    f02c:	e3a02000 	mov	r2, #0
    f030:	e1500001 	cmp	r0, r1
    f034:	20400001 	subcs	r0, r0, r1
    f038:	21822003 	orrcs	r2, r2, r3
    f03c:	e15000a1 	cmp	r0, r1, lsr #1
    f040:	204000a1 	subcs	r0, r0, r1, lsr #1
    f044:	218220a3 	orrcs	r2, r2, r3, lsr #1
    f048:	e1500121 	cmp	r0, r1, lsr #2
    f04c:	20400121 	subcs	r0, r0, r1, lsr #2
    f050:	21822123 	orrcs	r2, r2, r3, lsr #2
    f054:	e15001a1 	cmp	r0, r1, lsr #3
    f058:	204001a1 	subcs	r0, r0, r1, lsr #3
    f05c:	218221a3 	orrcs	r2, r2, r3, lsr #3
    f060:	e3500000 	cmp	r0, #0
    f064:	11b03223 	lsrsne	r3, r3, #4
    f068:	11a01221 	lsrne	r1, r1, #4
    f06c:	1affffef 	bne	f030 <__udivsi3+0x58>
    f070:	e1a00002 	mov	r0, r2
    f074:	e12fff1e 	bx	lr
    f078:	03a00001 	moveq	r0, #1
    f07c:	13a00000 	movne	r0, #0
    f080:	e12fff1e 	bx	lr
    f084:	e3510801 	cmp	r1, #65536	; 0x10000
    f088:	21a01821 	lsrcs	r1, r1, #16
    f08c:	23a02010 	movcs	r2, #16
    f090:	33a02000 	movcc	r2, #0
    f094:	e3510c01 	cmp	r1, #256	; 0x100
    f098:	21a01421 	lsrcs	r1, r1, #8
    f09c:	22822008 	addcs	r2, r2, #8
    f0a0:	e3510010 	cmp	r1, #16
    f0a4:	21a01221 	lsrcs	r1, r1, #4
    f0a8:	22822004 	addcs	r2, r2, #4
    f0ac:	e3510004 	cmp	r1, #4
    f0b0:	82822003 	addhi	r2, r2, #3
    f0b4:	908220a1 	addls	r2, r2, r1, lsr #1
    f0b8:	e1a00230 	lsr	r0, r0, r2
    f0bc:	e12fff1e 	bx	lr
    f0c0:	e3500000 	cmp	r0, #0
    f0c4:	13e00000 	mvnne	r0, #0
    f0c8:	ea000007 	b	f0ec <__aeabi_idiv0>

0000f0cc <__aeabi_uidivmod>:
    f0cc:	e3510000 	cmp	r1, #0
    f0d0:	0afffffa 	beq	f0c0 <__udivsi3+0xe8>
    f0d4:	e92d4003 	push	{r0, r1, lr}
    f0d8:	ebffffbe 	bl	efd8 <__udivsi3>
    f0dc:	e8bd4006 	pop	{r1, r2, lr}
    f0e0:	e0030092 	mul	r3, r2, r0
    f0e4:	e0411003 	sub	r1, r1, r3
    f0e8:	e12fff1e 	bx	lr

0000f0ec <__aeabi_idiv0>:
    f0ec:	e12fff1e 	bx	lr
